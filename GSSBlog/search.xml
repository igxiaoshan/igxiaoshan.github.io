<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker简介</title>
    <url>/GSSBlog/2023/10/30/0.1docker%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h2 id="Docker理念"><a href="#Docker理念" class="headerlink" title="Docker理念"></a>Docker理念</h2><ul>
<li>Docker是基于Go语言实现的云开源项目<ul>
<li>docker的主要目标是 “ Build, Ship and Run Any App , Anywhere” 也就是通过对应用组件的 封装, 分发, 部署, 运行等生命周期的管理,使用的APP (可以是一个WEB应用或者数据库应用等等) 及其运行环境能够做到 “一次镜像,到处运行”</li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">Linux容器技术的出现就解决了这样的问题,而Docker就是在它的基础上发展过来的.将应用打成镜像,通过镜像成为运行在Docker容器上面的实例,而Docker容器在任何操作系统上都是一致的,这就实现了跨平台,跨服务器.只需要一次配置好环境,换到别的机子上就可以一键部署好,大大简化了操作.</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><strong><code>总结</code></strong>: 解决了运行环境和配置问题的软件容器,方便做持续集成并有助于整体发布的容器虚拟化技术</p>
</blockquote>
<h2 id="Docker下载"><a href="#Docker下载" class="headerlink" title="Docker下载"></a>Docker下载</h2><blockquote>
<p><strong><code>官网</code></strong> : <a class="link"   href="https://docker.com/" >https://docker.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><strong><code>仓库</code></strong> : <a class="link"   href="https://hub.docker.com/" >https://hub.docker.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h2 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker的基本组成</h2><ul>
<li><p><strong><code>镜像</code></strong>(images)</p>
<ul>
<li>Docker镜像就是一个只读的模板,镜像可以用来创建Docker容器,一个镜像可以创建多个容易,相当于是一个root文件系统.比如官方镜像centos:7就包含了完整的一套centos:7最小系统的root文件系统.相当于容器的”源代码”;docker镜像文件类似于Java的类模板,而docker容器实例类似于Java中new出来的实例对象</li>
</ul>
</li>
<li><p><strong><code>容器</code></strong> (container)</p>
<ul>
<li>从面向对象角度<ul>
<li>Docker利用容器独立运行的一个或一组应用,应用程序或服务运行在容器里面,容器就类似于一个虚拟化的运行环境.容器是用镜像创建的运行实例.就像是Java中的类和实例对象一样,镜像是静态的定义,容器是镜像运行时的实体.容器为镜像提供了一个标准的和隔离的运行环境;它可以被启动,开始,停止,删除.每个容器都是相互隔离的,保证安全的平台</li>
</ul>
</li>
<li>从镜像容器角度<ul>
<li>可以把容器看成一个简易版的Linux环境(包括root用户权限,进程空间,用户空间和网络空间等)和运行在其中的应用程序</li>
</ul>
</li>
</ul>
</li>
<li><p><strong><code>仓库</code></strong> : (repository)</p>
<ul>
<li>集中存放镜像文件的场所</li>
<li>仓库分为公开库(public) 和私有库(private)两种</li>
</ul>
</li>
<li><p><strong><code>总结</code></strong></p>
<ul>
<li>Docker本身是一个容器运行载体,或者称之为管理引擎.我们把应用程序和配置依赖打包好形成一个可交付的运行环境,这个打包好的运行环境就是images镜像文件,只有通过这个镜像文件才能生成Docker容器实例(类似Java中new出来的一个对象)</li>
<li>image文件可以看做是容器的模板,Docker根据image文件生成容器的实例,同一个image文件,可以生成多个同时运行的容器实例</li>
<li>解析仓库&#x2F;镜像&#x2F;容器的概念<ul>
<li>image文件生成的容器实例,本身也是一个文件,称之为镜像文件</li>
<li>一个容器运行一种服务,当我们需要的时候,就可以docker客户端创建一个对应的运行实例,也就是我们的容器</li>
<li>仓库就是放一堆镜像的地方,可以把镜像发布到仓库中,需要的时候直接拉下来</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Docker运行环境"><a href="#Docker运行环境" class="headerlink" title="Docker运行环境"></a>Docker运行环境</h2><blockquote>
<p>Docker是一个client-server结构的系统,Docker守护进程运行在主机上,然后通过socket连接从客户端访问,守护进程从客户端接收命令并管理运行在主机上的容器</p>
<p>容器,是一个运行时环境,就是前面说的集装箱</p>
</blockquote>
<h2 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a>Docker架构</h2><blockquote>
<p>Docker是一个 C&#x2F;S 模式的架构,后端是一个松耦合架构,众多模块各司其职</p>
</blockquote>
<ul>
<li>docker运行的基本流程<ul>
<li>用户使用Docker Client 与 Docker Daemon 建立通信,并发送请求给后者</li>
<li>Docker Daemon 作为Docker 架构中的主体部分,首先提供Docker Server的功能使其可以接受 Docker Client 的请求</li>
<li>Docker Engine执行Dcoker 内部的一系列工作,每一项工作都是以一个Job的形式的存在</li>
<li>Job的运行过程中,当需要容器镜像是,则从Docker Registry中下载镜像,并通过镜像管理驱动 Graph Driver将下载镜像以Graph的形式存储</li>
<li>当需要为Docker创建网络环境时,通过网络管理驱动Network Driver创建并配置Docker容器网络环境</li>
<li>当需要限制Docker容器运行资源或执行用户指令等操作时,则通过Exec Driver来完成</li>
<li>Libcontainer是一项独立的容器管理包,Network Driver 以及 Exec driver 都是通过Libcontainer来实现具体对容器进行的操作</li>
</ul>
</li>
</ul>
<h2 id="Dcoker启动原理"><a href="#Dcoker启动原理" class="headerlink" title="Dcoker启动原理"></a>Dcoker启动原理</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/docker%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86.jpg"
                     
                ></p>
<blockquote>
<p><strong>Docker为什么会比VM虚拟机快</strong></p>
</blockquote>
<ul>
<li><p>docker有着比虚拟机更少的抽象层</p>
<ul>
<li><blockquote>
<p>由于docker不需要Hypervisor(虚拟机)实现硬件资源虚拟化,运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>docker利用的是宿主机的内核,而不需要加载操作系统OS内核</p>
<ul>
<li><blockquote>
<p>当新建一个容器时,docker不需要和虚拟机一样重新加载一个操作系统内核。进而避免引寻、加载操作系统内核返回等比较费时费资源的过程,当新建一个虚拟机时,虚拟机软件需要加载OS,返回新建过程是分钟级别的。而docker由于直接利用宿主机的操作系统,则省略了返回过程,因此新建一个docker容器只需要几秒钟。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker使用中遇到的各种问题以及解决方案</title>
    <url>/GSSBlog/2023/10/30/0.2docker%E9%97%AE%E9%A2%98%E9%9B%86/</url>
    <content><![CDATA[<h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><blockquote>
<p>[root@CentOs7_001 ~]# docker start d040a1737203<br>Error response from daemon: driver failed programming external connectivity on endpoint mysql (565cca25921160ed2a13a2f2b1605138114e313ce2a684b309faf3ea830de202):  (iptables failed: iptables –wait -t nat -A DOCKER -p tcp -d 0&#x2F;0 –dport 3306 -j DNAT –to-destination 172.17.0.2:3306 ! -i docker0: iptables: No chain&#x2F;target&#x2F;match by that name.<br> (exit status 1))<br>Error: failed to start containers: d040a1737203</p>
</blockquote>
<ul>
<li>问题复现复述</li>
</ul>
<blockquote>
<p>docker运行一个镜像;然后把这个容器停掉</p>
<p>修改宿主机的原始防火墙状态(关闭)为打开状态</p>
<p>重启容器报错</p>
</blockquote>
<ul>
<li>解决方案</li>
</ul>
<blockquote>
<p>重启docker服务</p>
<p>重启docker服务及可重新生成自定义链DOCKER</p>
</blockquote>
<ul>
<li>原因</li>
</ul>
<blockquote>
<p>docker服务启动时定义的自定义链DOCKER，当 centos7 firewall 被清掉时，</p>
<p>firewall的底层是使用iptables进行数据过滤，建立在iptables之上，这可能会与 Docker 产生冲突。</p>
<p>当 firewalld 启动或者重启的时候，将会从 iptables 中移除 DOCKER 的规则，从而影响了 Docker 的正常工作。</p>
</blockquote>
<h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><blockquote>
<p>[root@CentOs7_001 ~]# netstat -tanlp<br>-bash: netstat: command not found</p>
</blockquote>
<ul>
<li>问题复现复述</li>
</ul>
<blockquote>
<p>使用 netstat -tanlp 查看进程使用报错</p>
</blockquote>
<ul>
<li>解决方案</li>
</ul>
<blockquote>
<p>更新yum工具包下的配置</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y net-tolls</span><br></pre></td></tr></table></figure></div>



<h2 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h2><blockquote>
<p>[root@CentOs7_001 log]# docker logs -f 7d3edae397c1<br>2023-05-29 15:26:52+00:00 [Note][Entrypoint]: Entrypoint script for MySQL Server 5.7.36-1debian10 started.<br>2023-05-29 15:26:52+00:00 [ERROR][Entrypoint]: mysqld failed while attempting to check config<br>​        command was: mysqld –verbose –help –log-bin-index&#x3D;&#x2F;tmp&#x2F;tmp.S3R6HCPiAQ<br>​        2023-05-29T15:26:52.338540Z 0 [ERROR] COLLATION ‘utf8_general_ci’ is not valid for CHARACTER SET ‘latin1’<br>2023-05-29T15:26:52.341808Z 0 [ERROR] Aborting</p>
</blockquote>
<ul>
<li>问题复现复述</li>
</ul>
<blockquote>
<p>启动mysql容器,启动配置如下 </p>
<p>docker run -d -p 3306:3306 –privileged&#x3D;true <br>-v &#x2F;mydata&#x2F;mysql&#x2F;log:&#x2F;var&#x2F;log&#x2F;mysql <br>-v &#x2F;mydata&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql <br>-v &#x2F;mydata&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;conf.d <br>-e MYSQL_ROOT_PASSWORD&#x3D;root <br>–name mysql mysql:5.7</p>
<p>挂载外部的配置</p>
<p>[root@CentOs7_001 conf]# cat my.cnf</p>
<p>[client]<br>default_character_set&#x3D;utf8</p>
<p>[mysqld]</p>
<p>Collation_server &#x3D; utf8_general_ci</p>
<p>character_set_server &#x3D; utf8</p>
</blockquote>
<ul>
<li>解决方案</li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 查看my.cnf的配置,修改配置</span></span><br><span class="line">[client]</span><br><span class="line">default_character_set=utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">character_set_server = utf8</span><br><span class="line">collation_server = utf8_general_ci</span><br><span class="line"></span><br><span class="line"><span class="comment">## 重启服务即可</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>原因</li>
</ul>
<blockquote>
<p>疑似:</p>
<p>上文配置中</p>
<p>[mysqld]</p>
<p>Collation_server &#x3D; utf8_general_ci</p>
<p>character_set_server &#x3D; utf8</p>
<p>字母大小写或者配置顺序的问题;后续可以多方面测试…得出最终结论</p>
</blockquote>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker入门</title>
    <url>/GSSBlog/2023/10/30/1.0docker%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h4 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a><strong><code>前提条件</code></strong></h4><blockquote>
<p>目前,ContOS仅发行版本中的内核支持Docker;Docker运行在CentOS 7 (64-bit)上</p>
<p>要求系统为 64 位,Linux系统内核版本为3.8以上</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 查看服务内核</span></span><br><span class="line"><span class="comment">### uname命令用于打印当前系统相关信息（内核版本号、硬件架构、主机名称和操作系统类型等）。</span></span><br><span class="line"></span><br><span class="line">[root@CentOS7_001 ~]<span class="comment"># cat /etc/redhat-release</span></span><br><span class="line">CentOS Linux release 7.9.2009 (Core)</span><br><span class="line">[root@CentOS7_001 ~]<span class="comment"># uname -r</span></span><br><span class="line">3.10.0-1160.el7.x86_64</span><br></pre></td></tr></table></figure></div>

<h2 id="CentOS7安装Docker"><a href="#CentOS7安装Docker" class="headerlink" title="CentOS7安装Docker"></a>CentOS7安装Docker</h2><blockquote>
<p>安装教程: <a class="link"   href="https://docs.docker.com/engine/install/centos/" >https://docs.docker.com/engine/install/centos/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<ul>
<li><p>1.确定CentOS7以上版本</p>
<ul>
<li><blockquote>
<pre><code class="sh">cat /etc/redhat-release
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 2.卸载旧版本</span><br><span class="line"></span><br><span class="line"> - &gt; ```sh</span><br><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure></div>
</code></pre>
</blockquote>
</li>
</ul>
</li>
<li><p>3.yum安装gcc相关</p>
<ul>
<li><p>确定能连通外网,可在线下载</p>
</li>
<li><blockquote>
<pre><code class="sh">yum install -y gcc

yum install -y gcc-c++
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 4.安装需要的软件包</span><br><span class="line"></span><br><span class="line"> - &gt; ```sh</span><br><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure></div>
</code></pre>
</blockquote>
</li>
</ul>
</li>
<li><p>5.设置setble镜像仓库</p>
<ul>
<li><p>注意</p>
<ul>
<li><blockquote>
<p>官网: yum-config-manager –add-repo <a class="link"   href="https://download.docker.com/linux/centos/docker-ce.repo" >https://download.docker.com/linux/centos/docker-ce.repo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>使用风险: 网络不通导致失败</p>
</blockquote>
</li>
<li><blockquote>
<p>推荐: · yum-config-manager –add-repo <a class="link"   href="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo" >http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>优势: 国内环境,网络快</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li><p>6.更新yum软件包索引</p>
<ul>
<li><blockquote>
<pre><code class="sh">yum makecache fast
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 7.安装Docker CE</span><br><span class="line"></span><br><span class="line"> - &gt; ```sh</span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></div>
</code></pre>
</blockquote>
</li>
</ul>
</li>
<li><p>8.启动Docker</p>
<ul>
<li><blockquote>
<pre><code class="sh">systemctl start docker
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 9.测试</span><br><span class="line"></span><br><span class="line"> - &gt; ```sh</span><br><span class="line">docker version</span><br><span class="line"></span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure></div>
</code></pre>
</blockquote>
</li>
</ul>
</li>
<li><p>10.配置阿里云加速</p>
<ul>
<li><blockquote>
<pre><code class="sh">sudo mkdir -p /etc/docker
sudo tee /etc/docker/daemon.json &lt;&lt;-&#39;EOF&#39;
&#123;
  &quot;registry-mirrors&quot;: [&quot;https://lljn1hsm.mirror.aliyuncs.com&quot;]
&#125;
EOF
sudo systemctl daemon-reload
sudo systemctl restart docker
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 11.卸载Docker</span><br><span class="line"></span><br><span class="line"> - &gt; ```sh</span><br><span class="line">systemctl stop docker</span><br><span class="line"></span><br><span class="line">sudo yum remove docker-ce docker-ce-cli containerd.io docker-ce-rootless-extras</span><br><span class="line"></span><br><span class="line">rm -rf /var/lib/docker</span><br><span class="line">rm -rf /var/lib/containerd</span><br></pre></td></tr></table></figure></div>
</code></pre>
</blockquote>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL查询优化</title>
    <url>/GSSBlog/2023/10/30/1.SQL%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h2 id="1-1添加索引"><a href="#1-1添加索引" class="headerlink" title="1.1添加索引"></a>1.1添加索引</h2><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>普通索引 添加INDEX</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> INDEX index_name ( <span class="keyword">column</span> )</span><br><span class="line"></span><br><span class="line">下面演示下给<span class="keyword">user</span>表的name字段添加一个索引</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>主键索引 添加<span class="keyword">PRIMARY</span> KEY</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY ( <span class="keyword">column</span> )</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>唯一索引 添加<span class="keyword">UNIQUE</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> ( <span class="keyword">column</span> )</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>全文索引 添加FULLTEXT</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> FULLTEXT ( <span class="keyword">column</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>如何添加多列索引</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> INDEX index_name ( column1, column2, column3 )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例子:</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> person <span class="keyword">ADD</span> INDEX id_index (person_id);</span><br></pre></td></tr></table></figure></div>

<h2 id="1-2删除索引"><a href="#1-2删除索引" class="headerlink" title="1.2删除索引"></a>1.2删除索引</h2><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">DROP</span> INDEX index_name;</span><br><span class="line"></span><br><span class="line">例子:</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> person <span class="keyword">DROP</span> INDEX id_index ;</span><br></pre></td></tr></table></figure></div>



<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">索引的性能:</span><br><span class="line">	主键索引比普通索引快</span><br><span class="line">	因为主键索引在B+树索引的叶子节点上存的是值,</span><br><span class="line">	而普通索引上存的是主键索引的值,拿到主键索引的值再查询</span><br><span class="line">	由于牵扯到回表的情况,索引性能比主键索引慢一点,相当于查询了两次</span><br><span class="line"></span><br><span class="line">范围查询的效果</span><br><span class="line">	查询一列原来没有索引的字段,再添加索引,前后对比</span><br><span class="line">	没有索引,查询耗时500ms左右</span><br><span class="line">	添加索引后,查询耗时17ms左右</span><br><span class="line">	性能提升很明显</span><br><span class="line"></span><br><span class="line">排序的索引效果</span><br><span class="line">	先排序一列原来没有索引的字段,再添加索引,前后对比</span><br><span class="line">	没有索引,查询耗时3s左右</span><br><span class="line">	因为排序这个动作,需要创建一个中间表去存放所有数据进行排序</span><br><span class="line">	添加索引后,查询耗时176ms左右</span><br><span class="line">	性能提升很明显</span><br><span class="line"></span><br><span class="line">索引很有效,但不能整张表都添加索引</span><br><span class="line">索引对插入操作和修改操作影响也很大</span><br><span class="line">因为插入一条数据,他会在每个索引节点上加入数据,会影响性能的开销</span><br><span class="line">所以,对于经常查询的字段可以添加索引</span><br></pre></td></tr></table></figure></div>

<h2 id="2-高性能索引策略"><a href="#2-高性能索引策略" class="headerlink" title="2.高性能索引策略"></a>2.高性能索引策略</h2><h3 id="1-独立的列"><a href="#1-独立的列" class="headerlink" title="1.独立的列"></a>1.独立的列</h3><p>​	如果查询中的列不是独立的,则mysql就不会使用索引</p>
<p>​	独立的含义是指索引列不能是表达式的一部分,也不能是函数的参数</p>
<h3 id="2-like查询不能以-开头"><a href="#2-like查询不能以-开头" class="headerlink" title="2.like查询不能以%开头"></a>2.like查询不能以%开头</h3><p>​	如果查询中包含like以%开头,则索引会失效</p>
<p>​	解决方法:</p>
<p>​		1.模糊查询使用es中间件</p>
<p>​		2.使用覆盖索引</p>
<pre><code>&gt;什么是覆盖索引?
</code></pre>
<p>MySQL官网，类似的说法出现在explain查询计划优化章节，即explain的输出结果Extra字段为Using index时，能够触发索引覆盖。</p>
<p>不管是SQL-Server官网，还是MySQL官网，都表达了：只需要在一棵索引树上就能获取SQL所需的所有列数据，无需回表，速度更快。</p>
<blockquote>
<p>如何实现索引覆盖?</p>
</blockquote>
<p>常见的方法是：将被查询的字段，建立到联合索引里去。</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span> (</span><br><span class="line"></span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line"></span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line"></span><br><span class="line">sex <span class="type">varchar</span>(<span class="number">5</span>),</span><br><span class="line"></span><br><span class="line">index(name)</span><br><span class="line"></span><br><span class="line">)engine<span class="operator">=</span>innodb;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询语句一</span></span><br><span class="line"><span class="keyword">select</span> id,name <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;demo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 能够命中name索引，索引叶子节点存储了主键id，通过name的索引树即可获取id和name，无需回表，符合索引覆盖，效率较高。</span></span><br><span class="line"></span><br><span class="line">Extra：<span class="keyword">Using</span> index。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询语句二</span></span><br><span class="line"><span class="keyword">select</span> id,name,sex<span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;demo&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 能够命中name索引，索引叶子节点存储了主键id，但sex字段必须回表查询才能获取到，不符合索引覆盖，需要再次通过id值扫码聚集索引获取sex字段，效率会降低。</span></span><br><span class="line"></span><br><span class="line">Extra：<span class="keyword">Using</span> index <span class="keyword">condition</span>。</span><br><span class="line"></span><br><span class="line">如果把(name)单列索引升级为联合索引(name, sex)就不同了。</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span> (</span><br><span class="line"></span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line"></span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line"></span><br><span class="line">sex <span class="type">varchar</span>(<span class="number">5</span>),</span><br><span class="line"></span><br><span class="line">index(name, sex)</span><br><span class="line"></span><br><span class="line">)engine<span class="operator">=</span>innodb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> id,name,sex<span class="operator">*</span> ... <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;demo&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 都能够命中索引覆盖，无需回表。</span></span><br><span class="line"></span><br><span class="line">Extra：<span class="keyword">Using</span> index。</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>哪些场景可以使用覆盖索引来优化sql?</p>
</blockquote>
<p>1.全表count查询优化</p>
<p>​	如果count查询一个不是索引的列,不能利用索引覆盖,开销很大,</p>
<p>​	添加索引后,就能够利用索引覆盖提效</p>
<p>2.列查询回表优化</p>
<p>​	如果查询多列,只有一个索引,也是不能利用索引覆盖</p>
<p>​	将单列的索引升级成联合索引,即可避免回表,提升性能</p>
<p>3.分页查询</p>
<p>​	也是将单列索引升级为联合索引,避免回表,提升性能</p>
<h3 id="3-查询类型是字符串的列"><a href="#3-查询类型是字符串的列" class="headerlink" title="3.查询类型是字符串的列"></a>3.查询类型是字符串的列</h3><p>​	列的类型是字符串,一定要在条件中将数据使用引号引用起来</p>
<p>​	不要让字段发生类型的转换,否则索引会失效</p>
<p>​	concut(‘1’’2’) 用concut字符串拼接不会使索引失效<br>​	因为,他会先进行拼接,在进行查询</p>
<h3 id="4-最左匹配原则"><a href="#4-最左匹配原则" class="headerlink" title="4.最左匹配原则"></a>4.最左匹配原则</h3><p>​	组合索引(联合索引):可以在两个字段上添加索引</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="string">&#x27;表名&#x27;</span> <span class="keyword">add</span> index <span class="string">&#x27;索引名&#x27;</span> (<span class="string">&#x27;字段名&#x27;</span>,<span class="string">&#x27;字段名&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<p>​	联合索引是有先后顺序的</p>
<p>​		mysql 底层 的优化器会对索引进行优化匹配,命中索引</p>
<p>​		即便顺序颠倒也能命中索引</p>
<p>​	联合索引什么时候不生效</p>
<p>​		(1)对一组联合索引,添加三个字段(name,age,address),三个字段按照name在前的依次顺序</p>
<p>​		不对name进行查询,只对age,address进行查询</p>
<p>​		此时,联合索引失效,无法命中,查询耗时较大</p>
<p>​		(2)对一组联合索引来说,如果遇到范围查询(&gt;、&lt;、between、like)就会停止匹配</p>
<p>​		同时, 对一组联合索引,有两个字段(a,b),如果左边的列是精确查找的，右边的列可以进行范围查找</p>
<p>​	解决方案:</p>
<p>​		添加多个组合索引,排除最左边的字段不命中,导致索引失效</p>
<h3 id="4-explain使用"><a href="#4-explain使用" class="headerlink" title="4.explain使用"></a>4.explain使用</h3><p>explain可以查询索引是否生效</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> address <span class="operator">=</span> <span class="string">&#x27;123&#x27;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>explain 只会测试索引性能,不会执行SQL语句</p>
</blockquote>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- table:显示这一行的数据是关于哪张表的</span></span><br><span class="line"><span class="comment">-- type:这是重要的列,显示连接使用了何种类型。从最好到最差的连接类型为const, eq-reg, ref, range.indexhe和ALL</span></span><br><span class="line"><span class="comment">-- possible-keys:显示可能应用在这张表中的索引。如果为空,没有可能的索引。可以为相关的域从WHERE语句中选择一个命适的语句</span></span><br><span class="line"><span class="comment">-- key:实际使用的索引。如果为NULL,则没有使用索引。很少的情况下, MYSQL会选择优化不足的索引。这种情况下,可以在SELECT语句中使用USE INDEX (indexname)来强制使用一个索引或者用IGNOREINDEX (indexname)来强制MYSQL忽略索引</span></span><br><span class="line"><span class="comment">-- key-_len:使用的索引的长度。在不损失精确性的情况下,长度越短越好</span></span><br><span class="line"><span class="comment">-- ref:显示索引的哪一列被使用了,如果可能的话,是一个常数</span></span><br><span class="line"><span class="comment">-- rows: MYSQL认为必须检查的用来返回请求数据的行数</span></span><br><span class="line"><span class="comment">-- Extra:关于MYSQL如何解析查询的额外信息。</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">type 以下排序从上到下，性能由坏到好</span><br><span class="line">a.ALL: <span class="keyword">Full</span> <span class="keyword">Table</span> Scan, MysQL将遍历全表以找到匹配的行</span><br><span class="line">b.index: <span class="keyword">Full</span> Index Scan, index与<span class="keyword">ALL</span>区别为index类型只遍历索引树</span><br><span class="line">c.range:索引范围扫描,对索引的扫描开始于某一点,返回匹配值域的行,常见于<span class="keyword">between</span>, <span class="operator">&lt;</span>、<span class="operator">&gt;</span>等的查询</span><br><span class="line">d.ref:非唯一性索引扫描,返回匹配某个单独值的所有行。常见于使用非唯一索引即唯一索引的非唯一前缀进行的查找</span><br><span class="line">e.eq_ref:唯一性索引扫描,对于每个索引键,表中只有一条记录与之匹配。常见于主键或唯一索引扫描</span><br><span class="line">f.const, <span class="keyword">system</span>:当MysQL对查询某部分进行优化,并转换为一个常量时,使用这些类型访问。如将主键置于<span class="keyword">where</span>列表中, MysQL就能将该查询转换为一个常量</span><br><span class="line">		</span><br><span class="line">g.NULL: MysQL在优化过程中分解语句,执行时甚至不用访问表或索引</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 所以由type可以进行分析,如果是ref, eq ref那么索引命中且性能较好。</span></span><br></pre></td></tr></table></figure></div>

































]]></content>
      <categories>
        <category>MySQL</category>
        <category>Introduction</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>GIT秘钥生成</title>
    <url>/GSSBlog/2023/10/30/1.git%E7%A7%98%E9%92%A5%E7%94%9F%E6%88%90/</url>
    <content><![CDATA[<blockquote>
<p><strong>命令简介</strong></p>
<p>ssh-keygen 是 OpenSSH 身份验证密钥实用工具。</p>
<p>ssh-keygen 用于 OpenSSH 身份验证密钥的生成、管理和转换，它支持 RSA 和 DSA 两种认证密钥。</p>
</blockquote>
<ul>
<li><p><strong>命令格式</strong></p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-keygen [OPTIONS] &lt;file&gt;...</span><br><span class="line"></span><br><span class="line">-b &lt;bits&gt;</span><br><span class="line">	指定密钥长度。</span><br><span class="line">-e</span><br><span class="line">	读取 OpenSSH 的私钥或者公钥文件。</span><br><span class="line">-C</span><br><span class="line">	添加注释。</span><br><span class="line">-f &lt;filename&gt;</span><br><span class="line">	指定用来保存密钥的文件名。</span><br><span class="line">-i</span><br><span class="line">	读取未加密的 ssh-v2 兼容的私钥/公钥文件，然后在标准输出设备上显示 openssh 兼容的私钥/公钥。</span><br><span class="line">-l</span><br><span class="line">	显示公钥文件的指纹数据。</span><br><span class="line">-N</span><br><span class="line">	提供一个新密语。</span><br><span class="line">-P &lt;passphrase&gt;</span><br><span class="line">	提供（旧）密语。</span><br><span class="line">-q</span><br><span class="line">	静默模式。</span><br><span class="line">-t</span><br><span class="line">	指定要创建的密钥类型。</span><br></pre></td></tr></table></figure></div>




</li>
<li><p><strong>查看秘钥</strong></p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 生成的秘钥键值对保存在</span></span><br><span class="line"><span class="comment">### C盘-&gt;用户-&gt;用户名-&gt;.ssh文件夹下</span></span><br></pre></td></tr></table></figure></div>




</li>
<li><p><strong>生成秘钥</strong></p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 格式 ssh-keygen -t rsa -b 2048 -f 秘钥文件名 -C &#x27;邮箱&#x27;</span></span><br><span class="line"></span><br><span class="line">ssh-keygen -t rsa -b 2048 -f cicd_igsshan_rsa -C <span class="string">&#x27;igsshan@163.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 执行过程中</span></span><br><span class="line"><span class="comment">### （Enter file in which to save the key )要求输入一个密语字符串(passphrase)、回车就行</span></span><br><span class="line"><span class="comment">### 确认密语字符串(passphrase)，依旧回车</span></span><br><span class="line"><span class="comment">### SSH Key 创建成功</span></span><br></pre></td></tr></table></figure></div>



</li>
<li><p>使用秘钥</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 打开 ****.pub文件,将整个内容拷贝粘贴到git中</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux网络配置</title>
    <url>/GSSBlog/2023/10/30/1.linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="1-配置网络"><a href="#1-配置网络" class="headerlink" title="1.配置网络"></a>1.配置网络</h2><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改网卡配置</span></span><br><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改文件内容</span></span><br><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=192.168.23.129</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.23.2</span><br><span class="line">DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=<span class="built_in">yes</span></span><br><span class="line">IPV6_AUTOCONF=<span class="built_in">yes</span></span><br><span class="line">IPV6_DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=2c2371f1-ef29-4514-a568-c4904bd11c82</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=<span class="literal">true</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 保存退出</span></span><br><span class="line">:wq!</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启网络</span></span><br><span class="line">service network restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试网络是否正常</span></span><br><span class="line">ping www.baidu.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看IP地址</span></span><br><span class="line">ip addr</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>解决centos7在Windows下ping不通的原因</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=192.168.23.129   --&gt;对应子网ip地址</span><br><span class="line">NETMASK=255.255.255.0	--&gt;子网掩码地址</span><br><span class="line">GATEWAY=192.168.73.2    --&gt;网关对应子网ip</span><br><span class="line">DNS1=192.168.73.2       --&gt;对应网关ip</span><br><span class="line">DNS2=114.14.114.114		--&gt;固定ip</span><br><span class="line">DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=<span class="built_in">yes</span></span><br><span class="line">IPV6_AUTOCONF=<span class="built_in">yes</span></span><br><span class="line">IPV6_DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=2c2371f1-ef29-4514-a568-c4904bd11c82</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=<span class="literal">true</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启网络</span></span><br><span class="line">service network restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># ping百度</span></span><br><span class="line">ping www.baidu.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询ip</span></span><br><span class="line">ifconfig</span><br></pre></td></tr></table></figure></div>

<h2 id="2-安装JDK"><a href="#2-安装JDK" class="headerlink" title="2.安装JDK"></a>2.安装JDK</h2><blockquote>
<p>一般在安装oracle的JDK之前,会先移除openJDK</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询jdk版本信息</span></span><br><span class="line">java -version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询所有包含java的文件</span></span><br><span class="line">rpm -qa | grep java</span><br><span class="line">-qa		使用询问模式，查询所有套件</span><br><span class="line">grep	查找文件里符合条件的字符串</span><br><span class="line">java	查找包含java字符串的文件</span><br><span class="line">注意:noarch文件可以不用删除</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除openJDK</span></span><br><span class="line">rpm -e --nodeps java-....</span><br><span class="line">-e			删除指定的套件</span><br><span class="line">--nodeps	不验证套件档的相互关联性</span><br><span class="line"><span class="comment"># 删除之后,再用 java -version 命令验证</span></span><br><span class="line"><span class="comment"># 如果删除失败,使用yum -y remove去删除他们</span></span><br></pre></td></tr></table></figure></div>

<h3 id="1-下载jdk"><a href="#1-下载jdk" class="headerlink" title="1.下载jdk"></a>1.下载jdk</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">在oracle官网上下载jdk linux版本 64位安装包</span><br></pre></td></tr></table></figure></div>

<h4 id="2-上传"><a href="#2-上传" class="headerlink" title="2.上传"></a>2.上传</h4><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">上传安装包到/opt/software目录下</span><br></pre></td></tr></table></figure></div>

<h4 id="3-解压"><a href="#3-解压" class="headerlink" title="3.解压"></a>3.解压</h4><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">解压安装包并移动到/opt/source/jdk目录下</span><br></pre></td></tr></table></figure></div>

<h4 id="4-配置环境变量"><a href="#4-配置环境变量" class="headerlink" title="4.配置环境变量"></a>4.配置环境变量</h4><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/app/jdk/jdk1.8.0_291</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib:<span class="variable">$CLASSPATH</span></span><br><span class="line"><span class="built_in">export</span> JAVA_PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$&#123;JRE_HOME&#125;</span>/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$&#123;JAVA_PATH&#125;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="5-查看"><a href="#5-查看" class="headerlink" title="5.查看"></a>5.查看</h4><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新配置</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看JAVA_HOME</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看PATH</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$path</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本信息</span></span><br><span class="line">java -version</span><br></pre></td></tr></table></figure></div>

<h2 id="3-yum相关命令"><a href="#3-yum相关命令" class="headerlink" title="3.yum相关命令"></a>3.yum相关命令</h2><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install package -y</span></span><br><span class="line">默认是安装来自仓库里的软件，指定的是软件名字。多个包空格隔开；-y （取消交互）</span><br><span class="line"></span><br><span class="line"><span class="comment"># yum install ./xxx.rpm</span></span><br><span class="line">或者</span><br><span class="line"><span class="comment"># yum localinstall ./xxx.rpm</span></span><br><span class="line">安装来自本地指定路径下的rpm包，而不是来自仓库</span><br><span class="line"></span><br><span class="line"><span class="comment"># yum remove 或者 erase package</span></span><br><span class="line">卸载软件包</span><br><span class="line"></span><br><span class="line"><span class="comment"># yum update</span></span><br><span class="line">更新仓库里所有比本机已经安装过的软件要的软件	</span><br><span class="line"></span><br><span class="line"><span class="comment"># yum update package</span></span><br><span class="line">指定升级的软件</span><br><span class="line"></span><br><span class="line"><span class="comment"># yum search mysql</span></span><br><span class="line">搜索出所有软件名字“mysql”关键字的软件</span><br><span class="line"></span><br><span class="line"><span class="comment"># yum provides  &quot;libaudiofile.so.0&quot;</span></span><br><span class="line">找出模块由哪些软件包提供</span><br><span class="line"></span><br><span class="line"><span class="comment"># yum clean all</span></span><br><span class="line">清空之前的yum列表缓存</span><br><span class="line"></span><br><span class="line"><span class="comment"># yum makecache</span></span><br><span class="line">创建新的缓存</span><br><span class="line"></span><br><span class="line"><span class="comment"># yum list</span></span><br><span class="line">列出仓库里的所有软件包</span><br><span class="line"></span><br><span class="line"><span class="comment"># yum repolist</span></span><br><span class="line">列出已配置的软件仓库</span><br><span class="line"></span><br><span class="line"><span class="comment"># yum list |grep 关键字</span></span><br><span class="line">代表已经安装成功</span><br><span class="line"></span><br><span class="line"><span class="comment"># yum list installed</span></span><br><span class="line">查看已安装的包</span><br><span class="line"></span><br><span class="line"><span class="comment"># yum grouplist</span></span><br><span class="line">查看包组</span><br><span class="line"></span><br><span class="line"><span class="comment"># yum groupinstall  &quot;包组&quot;</span></span><br><span class="line">安装包组</span><br><span class="line"></span><br><span class="line"><span class="comment"># yum groupremove &quot;包组&quot;</span></span><br><span class="line">移除包组</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看pcre包是否重复</span></span><br><span class="line">rpm -qa | grep pcre </span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除一个</span></span><br><span class="line">yum remove pcre-8.32-15.el7_2.1.i686</span><br></pre></td></tr></table></figure></div>

<h2 id="4-防火墙相关"><a href="#4-防火墙相关" class="headerlink" title="4.防火墙相关"></a>4.防火墙相关</h2><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 防火墙命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看防火墙状态:</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭防火墙命令：</span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启防火墙：</span></span><br><span class="line">systemctl start firewalld.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭开机自启动：</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启开机启动：</span></span><br><span class="line">systemctl <span class="built_in">enable</span> firewalld.service</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>解决:Unit firewalld.service could not be found 问题</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果提示: Unit firewalld.service could not be found .说明没有安装防火墙,需要安装</span></span><br><span class="line"></span><br><span class="line">yum install firewalld firewall-config</span><br></pre></td></tr></table></figure></div>

<p>注意: centos7下默认的防火墙是firewall,替代了之前的iptables,firewall有图形化管理界面和命令行管理两种方式.</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启,关闭,开启firewall.service服务</span></span><br><span class="line"></span><br><span class="line">service firewalld restart</span><br><span class="line">service firewalld start</span><br><span class="line">service firewalld stop</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加自定义端口</span></span><br><span class="line"><span class="comment"># 添加8080端口</span></span><br><span class="line">firewall-cmd --zone=public --permanent --add-port=8080/tcp</span><br><span class="line"></span><br><span class="line">注意:一定要刷新</span><br><span class="line"><span class="comment"># 刷新生效</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看firewall服务状态</span></span><br><span class="line">systemctl status firewalld.service</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl status firewalld.service</span></span><br><span class="line">● firewalld.service - firewalld - dynamic firewall daemon</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled)</span><br><span class="line">   Active: inactive (dead)</span><br><span class="line">     Docs: man:firewalld(1)</span><br><span class="line">     </span><br><span class="line"><span class="comment"># 查看firewall状态</span></span><br><span class="line">firewall-cmd --state</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># firewall-cmd --state</span></span><br><span class="line">not running</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看防火墙放行规则</span></span><br><span class="line">firewall-cmd --list-all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加服务</span></span><br><span class="line">firewall-cmd --permanent --zone=public --add-service=http</span><br><span class="line"></span><br><span class="line">firewall-cmd --state                           <span class="comment">#查看防火墙状态，是否是running</span></span><br><span class="line"> </span><br><span class="line">firewall-cmd --reload                          <span class="comment">#重新载入配置，比如添加规则之后，需要执行此命令</span></span><br><span class="line"> </span><br><span class="line">firewall-cmd --get-zones                       <span class="comment">#列出支持的zone</span></span><br><span class="line"> </span><br><span class="line">firewall-cmd --get-services                    <span class="comment">#列出支持的服务，在列表中的服务是放行的</span></span><br><span class="line"> </span><br><span class="line">firewall-cmd --query-service ftp               <span class="comment">#查看ftp服务是否支持，返回yes或者no</span></span><br><span class="line"> </span><br><span class="line">firewall-cmd --add-service=ftp                 <span class="comment">#临时开放ftp服务</span></span><br><span class="line"> </span><br><span class="line">firewall-cmd --add-service=ftp --permanent     <span class="comment">#永久开放ftp服务</span></span><br><span class="line"> </span><br><span class="line">firewall-cmd --remove-service=ftp --permanent  <span class="comment">#永久移除ftp服务</span></span><br><span class="line"> </span><br><span class="line">firewall-cmd --add-port=80/tcp --permanent     <span class="comment">#永久添加80端口 </span></span><br><span class="line"> </span><br><span class="line">firewall-cmd --remove-port=80/tcp --permanent  <span class="comment">#永久移除80端口</span></span><br><span class="line"> </span><br><span class="line">firewall-cmd --list-ports                      <span class="comment">#查看已经开放的端口</span></span><br><span class="line"> </span><br><span class="line">iptables -L -n                                 <span class="comment">#查看规则，这个命令是和iptables的相同的</span></span><br><span class="line"> </span><br><span class="line">man firewall-cmd                               <span class="comment">#查看帮助</span></span><br></pre></td></tr></table></figure></div>

<h2 id="5-查看pcre包是否重复"><a href="#5-查看pcre包是否重复" class="headerlink" title="5.查看pcre包是否重复"></a>5.查看pcre包是否重复</h2><div class="highlight-container" data-rel="Properties"><figure class="iseeu highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">rpm</span> <span class="string">-qa | grep pcre </span></span><br><span class="line"></span><br><span class="line"><span class="attr">移除一个</span></span><br><span class="line"><span class="attr">yum</span> <span class="string">remove pcre-8.32-15.el7_2.1.i686</span></span><br></pre></td></tr></table></figure></div>

<h2 id="6-报错解析"><a href="#6-报错解析" class="headerlink" title="6.报错解析"></a>6.报错解析</h2><h3 id="1-nginx403"><a href="#1-nginx403" class="headerlink" title="1.nginx403"></a>1.nginx403</h3><p><a class="link"   href="https://www.cnblogs.com/williamjie/p/9604594.html" >解决Nginx出现403 forbidden (13: Permission denied)报错的四种方法 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">缺少index.html或者index.php文件，就是配置文件中index index.html index.htm这行中的指定的文件。</span><br><span class="line"></span><br><span class="line">1.    server &#123;  </span><br><span class="line"></span><br><span class="line">2.      listen       80;  </span><br><span class="line"></span><br><span class="line">3.      server_name  localhost;  </span><br><span class="line"></span><br><span class="line">4.      index  index.php index.html;  </span><br><span class="line"></span><br><span class="line">5.      root  /data/www/;</span><br><span class="line"></span><br><span class="line">6.    &#125;</span><br><span class="line"></span><br><span class="line">如果在/data/www/下面没有index.php,index.html的时候，直接文件，会报403 forbidden。</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Dockerfile部署服务</title>
    <url>/GSSBlog/2023/10/30/10.docker%E5%8F%91%E5%B8%83%E6%9C%8D%E5%8A%A1%E9%80%9A%E8%BF%87Dockerfile%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<blockquote>
<p>部署一个标准的微服务镜像</p>
</blockquote>
<ul>
<li><p>将服务打成 jar 包</p>
</li>
<li><p>编写Dockerfile</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">### vim Dockerfile</span></span><br><span class="line"></span><br><span class="line">FROM java:8 <span class="comment"># 基础镜像使用java</span></span><br><span class="line"></span><br><span class="line">MAINTAINER igsshan <span class="comment"># 作者</span></span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">mkdir</span> -p /app/lib <span class="comment"># 运行RUN,创建一个文件夹</span></span><br><span class="line"></span><br><span class="line">WORKDIR /app <span class="comment"># 指定落脚点</span></span><br><span class="line"></span><br><span class="line">VOLUME /tmp <span class="comment"># volume指定临时文件目录为/tmp,在主机/var/lib/docker目录下创建一个临时文件并连接到容器的/tmp</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ADD docker_test_app.jar ./app.jar <span class="comment"># 添加jar包,到当前目录下并重命名为app.jar</span></span><br><span class="line"></span><br><span class="line">EXPOSE 8080 <span class="comment"># 暴露端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行jar包</span></span><br><span class="line">RUN bash -c <span class="string">&quot;touch /app/app.jar&quot;</span></span><br><span class="line">ENTRYPOINT [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app/app.jar&quot;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>注意：将打好的jar包和编写好的Dockerfile文件上传到同一个文件夹下,保持目录统一</code></li>
</ul>
</li>
<li><p>构建镜像</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">docker build -t my_app:0.0.1 .  <span class="comment">## 注意: 最后一个&quot;.&quot;不能遗漏</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>容器运行</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:8080 mu_app:0.0.1</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>访问测试</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务器</span></span><br><span class="line">curl 127.0.0.1:8080/test</span><br><span class="line"></span><br><span class="line"><span class="comment"># web</span></span><br><span class="line">127.0.0.1:8080/test</span><br></pre></td></tr></table></figure></div></li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>解决容器启动，内部无法使用`ip addr`和`ping`命令</title>
    <url>/GSSBlog/2023/10/30/11.1docker%E5%AE%B9%E5%99%A8%E6%B2%A1%E6%9C%89%E7%9B%B8%E5%BA%94%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS7_001 ~]<span class="comment"># </span></span><br><span class="line">[root@CentOS7_001 ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                   CREATED          STATUS          PORTS                                       NAMES</span><br><span class="line">c48b8c6bc4d2   wordpress      <span class="string">&quot;docker-entrypoint.s…&quot;</span>   12 minutes ago   Up 12 minutes   0.0.0.0:8089-&gt;80/tcp, :::8089-&gt;80/tcp       blog</span><br><span class="line">580cf83c51ab   mysql:5.7      <span class="string">&quot;docker-entrypoint.s…&quot;</span>   36 minutes ago   Up 36 minutes   3306/tcp, 33060/tcp                         db</span><br><span class="line">6d7685e0c6bc   zydtag:0.0.1   <span class="string">&quot;/bin/sh -c &#x27;java <span class="variable">$&#123;…&quot;   2 weeks ago      Up 10 seconds   0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp   zydtag</span></span></span><br><span class="line"><span class="variable"><span class="string">[root@CentOS7_001 ~]# </span></span></span><br><span class="line"><span class="variable"><span class="string">[root@CentOS7_001 ~]# </span></span></span><br><span class="line"><span class="variable"><span class="string">[root@CentOS7_001 ~]# docker exec -it db ping blog</span></span></span><br><span class="line"><span class="variable"><span class="string">OCI runtime exec failed: exec failed: unable to start container process: exec: &quot;ping&quot;: executable file not found in $PATH: unknown</span></span></span><br><span class="line"><span class="variable"><span class="string">[root@CentOS7_001 ~]# </span></span></span><br></pre></td></tr></table></figure></div>

<p><strong>报错原因</strong></p>
<blockquote>
<p>容器简易版,没有相应的命令</p>
</blockquote>
<p><strong>解决方案</strong></p>
<blockquote>
<p>安装相应的命令</p>
</blockquote>
<ul>
<li><p>进入容器中</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS7_001 ~]<span class="comment"># docker exec -it db /bin/bash</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>安装&#x2F;更新配置</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 更新 apt-get: apt-get update</span></span><br><span class="line"><span class="comment">### 安装 iproute2：apt install -y iproute2</span></span><br><span class="line"><span class="comment">### 安装 ping：apt-get install -y iputils-ping</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">###  详细指令自己实操....</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 安装后解决</span></span><br><span class="line">[root@CentOS7_001 zyd-tag]<span class="comment"># docker exec -it blog ping db</span></span><br><span class="line">PING mysql (172.17.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from mysql (172.17.0.2): icmp_seq=1 ttl=64 time=0.064 ms</span><br><span class="line">64 bytes from mysql (172.17.0.2): icmp_seq=2 ttl=64 time=0.052 ms</span><br><span class="line">64 bytes from mysql (172.17.0.2): icmp_seq=3 ttl=64 time=0.052 ms</span><br><span class="line">64 bytes from mysql (172.17.0.2): icmp_seq=4 ttl=64 time=0.065 ms</span><br><span class="line">--- mysql ping statistics ---</span><br><span class="line">4 packets transmitted, 4 received, 0% packet loss, time 3002ms</span><br><span class="line">rtt min/avg/max/mdev = 0.052/0.058/0.065/0.006 ms</span><br><span class="line">[root@CentOS7_001 zyd-tag]<span class="comment">#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker网络</title>
    <url>/GSSBlog/2023/10/30/11.docker%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<blockquote>
<p><code>官网</code>：<a class="link"   href="https://docs.docker.com/engine/reference/run/" >码头工人运行参考 |码头工人文档 (docker.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h2 id="docker网络介绍"><a href="#docker网络介绍" class="headerlink" title="docker网络介绍"></a>docker网络介绍</h2><ul>
<li><p><code>docker未启动时，默认网络情况</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/docker%E6%9C%AA%E5%90%AF%E5%8A%A8%E6%97%B6%E7%BD%91%E7%BB%9C%E7%8A%B6%E6%80%8101.png"
                     
                ></p>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">docker 未启动时,不包含docker0的虚拟网络</span><br><span class="line"></span><br><span class="line">lo: 本地网络(localhost)</span><br><span class="line"></span><br><span class="line">virbr0: 在CentOS7的安装过程中,如果有选择相关虚拟化的服务安装系统后,启动网卡时会发现有一个以网桥连接的私网地址的virbr0网卡(virbr0网卡:它还有一个固定的默认IP地址 192.168.122.1 ),是做虚拟机网桥使用的,其作用是为连接其上的虚拟网卡提供NAT访问外网的功能</span><br><span class="line"></span><br><span class="line">#: 在Linux安装,勾选安装系统时候附带了libvirt服务才会生成的一个东西,如果不需要可以直接将libvirt服务卸载; yum remove libvirt-libs.x86_64</span><br></pre></td></tr></table></figure></div>

</li>
<li><p><code>docker启动后，网络情况</code></p>
<p>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/docker%E5%90%AF%E5%8A%A8%E6%97%B6%E7%BD%91%E7%BB%9C%E7%8A%B6%E6%80%8101.png"
                     
                ></p>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">docker 启动后,会产生一个名为 docker0 的虚拟网桥</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="docker网络命令"><a href="#docker网络命令" class="headerlink" title="docker网络命令"></a>docker网络命令</h2><ul>
<li><p>全部命令</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@CentOS7_001 zyd]<span class="comment"># docker network --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker network COMMAND</span><br><span class="line"></span><br><span class="line">Manage networks</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  connect     Connect a container to a network</span><br><span class="line">  create      Create a network</span><br><span class="line">  disconnect  Disconnect a container from a network</span><br><span class="line">  inspect     Display detailed information on one or more networks</span><br><span class="line">  <span class="built_in">ls</span>          List networks</span><br><span class="line">  prune       Remove all unused networks</span><br><span class="line">  <span class="built_in">rm</span>          Remove one or more networks</span><br><span class="line"></span><br><span class="line">Run <span class="string">&#x27;docker network COMMAND --help&#x27;</span> <span class="keyword">for</span> more information on a <span class="built_in">command</span>.</span><br><span class="line">[root@CentOS7_001 zyd]<span class="comment">#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

</li>
<li><p>查看<code>docker</code>网络模式</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">## 查看docker网络模式命令</span></span><br><span class="line"></span><br><span class="line">docker network <span class="built_in">ls</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看<code>docker</code>网络源数据</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令结构</span></span><br><span class="line">docker network inspect [OPTIONS] NETWORK [NETWORK...]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@CentOS7_001 zyd]<span class="comment"># docker network inspect bridge</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;bridge&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;f5a026bc1a0286e3d6d8a5704cf25a60f7cd16e893a9d58f0b3b39a8d350aa28&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2023-07-03T09:44:52.274931144+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;bridge&quot;</span>,</span><br><span class="line">        <span class="string">&quot;EnableIPv6&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;IPAM&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Options&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;Config&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;Subnet&quot;</span>: <span class="string">&quot;172.17.0.0/16&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.17.0.1&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Internal&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Attachable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Ingress&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;ConfigFrom&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;ConfigOnly&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Containers&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.default_bridge&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.enable_icc&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.enable_ip_masquerade&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.host_binding_ipv4&quot;</span>: <span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.name&quot;</span>: <span class="string">&quot;docker0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.driver.mtu&quot;</span>: <span class="string">&quot;1500&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>创建<code>docker</code>网络</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令结构</span></span><br><span class="line">docker network create [OPTIONS] NETWORK</span><br><span class="line"></span><br><span class="line">docker network create my_network</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>删除<code>docker</code>网络</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令结构</span></span><br><span class="line">docker network <span class="built_in">rm</span> NETWORK [NETWORK...]</span><br><span class="line"></span><br><span class="line">docker network <span class="built_in">rm</span> my_network</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="docker网络作用"><a href="#docker网络作用" class="headerlink" title="docker网络作用"></a>docker网络作用</h2><blockquote>
<p>容器间的互联和通信以及端口映射</p>
<p>容器IP变动的时候可以通过服务名直接网络通信而不受到影响</p>
</blockquote>
<h2 id="docker网络模式"><a href="#docker网络模式" class="headerlink" title="docker网络模式"></a>docker网络模式</h2><h3 id="网络模式介绍"><a href="#网络模式介绍" class="headerlink" title="网络模式介绍"></a><strong>网络模式介绍</strong></h3><table>
<thead>
<tr>
<th>Network</th>
<th>Description</th>
<th>使用</th>
</tr>
</thead>
<tbody><tr>
<td><strong>none</strong></td>
<td>No networking in the container. <code>容器有独立的 Network namespaces ,但并没有对其进行任何网络设置,如分配  veth pair 和网桥连接, IP等</code></td>
<td>–network none</td>
</tr>
<tr>
<td><strong>bridge</strong> (default)</td>
<td>Connect the container to the bridge via veth interfaces. <code>为每一个容器分配、设置IP等,并将容器连接到一个 &#39;docker0&#39; 虚拟网桥,默认为该模式</code></td>
<td>–network bridge<br />默认使用docker0</td>
</tr>
<tr>
<td><strong>host</strong></td>
<td>Use the host’s network stack inside the container. <code>容器将不会虚拟出自己的网卡,配置自己的IP等,而是使用宿主机的IP和端口</code></td>
<td>–network host</td>
</tr>
<tr>
<td><strong>container</strong>:&lt;name|id&gt;</td>
<td>Use the network stack of another container, specified via its <em>name</em> or <em>id</em>. <code>新创建的容器不会创建自己的网卡和配置自己的IP,而是和一个指定的容器共享IP、端口范围等</code></td>
<td>–network container:NAME或容器ID指定</td>
</tr>
<tr>
<td><strong>NETWORK</strong></td>
<td>Connects the container to a user created network (using <code>docker network create</code> command) <code>将容器连接到用户创建的网络（使用命令）</code></td>
<td></td>
</tr>
</tbody></table>
<h3 id="容器实例内默认网络IP生产规则"><a href="#容器实例内默认网络IP生产规则" class="headerlink" title="容器实例内默认网络IP生产规则"></a>容器实例内默认网络IP生产规则</h3><p><strong>案例</strong></p>
<ul>
<li><p>成功创建两个<code>ubuntu</code>容器<code>u1</code>和<code>u2</code></p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">[root@CentOS7_001 ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED              STATUS         PORTS     NAMES</span><br><span class="line">dd1fcd31d420   ubuntu    <span class="string">&quot;/bin/bash&quot;</span>   About a minute ago   Up 5 seconds             u2</span><br><span class="line">1dbdb42b4518   ubuntu    <span class="string">&quot;/bin/bash&quot;</span>   8 minutes ago        Up 3 minutes             u1</span><br><span class="line">[root@CentOS7_001 ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看<code>u1</code>和<code>u2</code>内部network实例</p>
<blockquote>
<p>u1</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">[root@CentOS7_001 ~]<span class="comment"># docker inspect u1 |tail -n 20</span></span><br><span class="line">            <span class="string">&quot;Networks&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;bridge&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;IPAMConfig&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Links&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Aliases&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;NetworkID&quot;</span>: <span class="string">&quot;f5a026bc1a0286e3d6d8a5704cf25a60f7cd16e893a9d58f0b3b39a8d350aa28&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;ae82e5b9bc2c3b2d6d35fed23f836b712e1dc7a7f53ff6750279b9ea8273400a&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.17.0.1&quot;</span>, <span class="comment"># 固定网关,不会变化</span></span><br><span class="line">                    <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;172.17.0.2&quot;</span>, <span class="comment"># 容器ip</span></span><br><span class="line">                    <span class="string">&quot;IPPrefixLen&quot;</span>: 16,</span><br><span class="line">                    <span class="string">&quot;IPv6Gateway&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6Address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6PrefixLen&quot;</span>: 0,</span><br><span class="line">                    <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:11:00:02&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;DriverOpts&quot;</span>: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">[root@CentOS7_001 ~]<span class="comment">#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>u2</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@CentOS7_001 ~]<span class="comment"># docker inspect u2 |tail -n 20</span></span><br><span class="line">            <span class="string">&quot;Networks&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;bridge&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;IPAMConfig&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Links&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Aliases&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;NetworkID&quot;</span>: <span class="string">&quot;f5a026bc1a0286e3d6d8a5704cf25a60f7cd16e893a9d58f0b3b39a8d350aa28&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;072a0543108455076d68be272cd03d395ae8be6a7fde1dcac461e86416f61a50&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.17.0.1&quot;</span>, <span class="comment"># 固定网关</span></span><br><span class="line">                    <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;172.17.0.3&quot;</span>, <span class="comment"># 容器ip</span></span><br><span class="line">                    <span class="string">&quot;IPPrefixLen&quot;</span>: 16,</span><br><span class="line">                    <span class="string">&quot;IPv6Gateway&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6Address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6PrefixLen&quot;</span>: 0,</span><br><span class="line">                    <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:11:00:03&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;DriverOpts&quot;</span>: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">[root@CentOS7_001 ~]<span class="comment">#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>通过查看<code>u1</code>和<code>u2</code>容器实例对比，固定网关IP为<code>172.17.0.1</code>，容器IP自动递增</p>
</blockquote>
</li>
<li><p>测试,关闭<code>u2</code>,启动容器<code>u3</code>查看内部实例</p>
<blockquote>
<p>关闭<code>u2</code></p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@CentOS7_001 ~]<span class="comment"># docker stop u2</span></span><br><span class="line">u2</span><br><span class="line">[root@CentOS7_001 ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>启动<code>u3</code></p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">[root@CentOS7_001 ~]<span class="comment"># docker run -it --name u3 ubuntu /bin/bash</span></span><br><span class="line">root@97b2e870414a:/<span class="comment"># [root@CentOS7_001 ~]#</span></span><br><span class="line">[root@CentOS7_001 ~]<span class="comment">#</span></span><br><span class="line">[root@CentOS7_001 ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS         PORTS     NAMES</span><br><span class="line">97b2e870414a   ubuntu    <span class="string">&quot;/bin/bash&quot;</span>   10 seconds ago   Up 9 seconds             u3</span><br><span class="line">1dbdb42b4518   ubuntu    <span class="string">&quot;/bin/bash&quot;</span>   15 minutes ago   Up 9 minutes             u1</span><br><span class="line">[root@CentOS7_001 ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>查看<code>u3</code>容器实例</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@CentOS7_001 ~]<span class="comment"># docker inspect u3 |tail -n 20</span></span><br><span class="line">            <span class="string">&quot;Networks&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;bridge&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;IPAMConfig&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Links&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Aliases&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;NetworkID&quot;</span>: <span class="string">&quot;f5a026bc1a0286e3d6d8a5704cf25a60f7cd16e893a9d58f0b3b39a8d350aa28&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;a4c555dec467f15fc947eee14cfde60c4e4ea7e82dfbd7d48c4f538ceeb71ea2&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.17.0.1&quot;</span>, <span class="comment"># 固定网关</span></span><br><span class="line">                    <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;172.17.0.3&quot;</span>, <span class="comment"># 容器ip</span></span><br><span class="line">                    <span class="string">&quot;IPPrefixLen&quot;</span>: 16,</span><br><span class="line">                    <span class="string">&quot;IPv6Gateway&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6Address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6PrefixLen&quot;</span>: 0,</span><br><span class="line">                    <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:11:00:03&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;DriverOpts&quot;</span>: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">[root@CentOS7_001 ~]<span class="comment">#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a><strong>结论</strong></h4><blockquote>
<p>docker 内部的容器IP是会发生变化的</p>
</blockquote>
<h3 id="网络模式案例说明"><a href="#网络模式案例说明" class="headerlink" title="网络模式案例说明"></a>网络模式案例说明</h3><h4 id="bridge"><a href="#bridge" class="headerlink" title="bridge"></a><strong>bridge</strong></h4><blockquote>
<p>docker服务默认会创建一个<code>docker0</code>网桥（其上有一个docker0内部接口），该网桥网络的名称为docker0，它在内核层连通了其他的物理或虚拟网卡，这就将所有容器和本地主机都放到同一物理网络。docker默认指定了docker0接口的IP地址和子网掩码，让主机和容器之间可以通过网桥相互通信</p>
</blockquote>
<ul>
<li><p>查看 <code>bridge</code> 网络详细信息</p>
<blockquote>
<p>详细说明</p>
</blockquote>
<p>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/docker%E7%BD%91%E7%BB%9C-bridge%E7%BD%91%E7%BB%9C%E5%86%85%E9%83%A8%E8%AF%A6%E6%83%8501.jpg"
                     
                ></p>
<p>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/docker%E7%BD%91%E7%BB%9C-%E7%BD%91%E7%BB%9C%E8%AF%A6%E6%83%8501.jpg"
                     
                ></p>
<blockquote>
<p>详情版</p>
</blockquote>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/docker%E7%BD%91%E7%BB%9C-bridge%E7%BD%91%E7%BB%9C%E8%AF%A6%E6%83%85-%E6%A6%82%E8%A6%81%E7%89%8801.jpg"
                     
                ></p>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">1.Docker使用Linux桥接,在宿主机虚拟一个Docker容器网桥(docker0)，Docker启动一个容器时会根据Docker网桥的网段分配给容器一个ip地址，称为Container-IP，同时Docker网络是每个容器的默认网关。因为在同一宿主机内的容器都接入同一个网桥，这样容器之间就能通过容器的Container-IP通信。</span><br><span class="line"></span><br><span class="line">2.docker run 的时候，没有指定network的话默认使用的网桥模式就是bridge，使用的就是docker0.在宿主机ifconfig，就能看到docker0和自己create的network的 eht0，eht1，eht2...代表网卡一，网卡二，网卡三...，lo代表127.0.0.1,即localhost，inet addr 用来表示网卡的IP地址。</span><br><span class="line"></span><br><span class="line">3.网桥docker0创建一对对等虚拟设备接口，一个叫veth，另一个叫eht0，成对匹配。</span><br><span class="line">	3.1.整个宿主机的网桥模式都是docker0，类似一个交换机有一堆接口，每个接口都叫veth，在本地主机和容器内分别创建一个虚拟接口，并让他们彼此联通（这样一对接口叫veth pair）；</span><br><span class="line">	3.2.每个容器实例内部也有一块网卡，每个接口都叫eth0；</span><br><span class="line">	3.3.docker0上面的每个veth匹配某个容器实例内部的eth0，两两配对，一一匹配</span><br><span class="line">	</span><br><span class="line">通过上述，讲宿主机上的所有容器都连接到这个内部网络上，两个容器在同一个网络下，会从这个网关下各自拿到分配的IP，此时两个容器的网络是互通的。</span><br><span class="line"></span><br><span class="line">详细看下图</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/docker%E7%BD%91%E7%BB%9C-bridge%E7%BD%91%E7%BB%9C%E4%BA%92%E9%80%9A%E6%9E%B6%E6%9E%84%E5%9B%BE01.jpg"
                     
                ></p>
<p><strong>实例</strong></p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 启动两个容器</span></span><br><span class="line"></span><br><span class="line">[root@CentOs7_001 ~]<span class="comment"># docker run -d -p 8081:8080 --name tomcat81 billygoo/tomcat8-jdk8</span></span><br><span class="line">faa368fd7fc21a3e98cea3bf281d0698ac041a0fbdc7e2563c93132a36db3242</span><br><span class="line">[root@CentOs7_001 ~]<span class="comment"># docker run -d -p 8082:8080 --name tomcat82 billygoo/tomcat8-jdk8</span></span><br><span class="line">bbf99486996455ad7b50b4d8cde3ed1af6c66b50ff43a01c696c6137cbc67132</span><br><span class="line">[root@CentOs7_001 ~]<span class="comment">#</span></span><br><span class="line">[root@CentOs7_001 ~]<span class="comment">#</span></span><br><span class="line">[root@CentOs7_001 ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                   COMMAND             CREATED          STATUS          PORTS                                       NAMES</span><br><span class="line">bbf994869964   billygoo/tomcat8-jdk8   <span class="string">&quot;catalina.sh run&quot;</span>   7 seconds ago    Up 4 seconds    0.0.0.0:8082-&gt;8080/tcp, :::8082-&gt;8080/tcp   tomcat82</span><br><span class="line">faa368fd7fc2   billygoo/tomcat8-jdk8   <span class="string">&quot;catalina.sh run&quot;</span>   16 seconds ago   Up 13 seconds   0.0.0.0:8081-&gt;8080/tcp, :::8081-&gt;8080/tcp   tomcat81</span><br><span class="line">[root@CentOs7_001 ~]<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 查看此时网络状况</span></span><br><span class="line"></span><br><span class="line">[root@CentOs7_001 ~]<span class="comment"># ip addr | tail -n 8</span></span><br><span class="line">10: vethf976c54@if9: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default</span><br><span class="line">    <span class="built_in">link</span>/ether 22:45:d0:e1:9c:0b brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet6 fe80::2045:d0ff:fee1:9c0b/64 scope <span class="built_in">link</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">12: vethd6d8297@if11: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default</span><br><span class="line">    <span class="built_in">link</span>/ether ca:cb:0f:fb:c9:ba brd ff:ff:ff:ff:ff:ff link-netnsid 1</span><br><span class="line">    inet6 fe80::c8cb:fff:fefb:c9ba/64 scope <span class="built_in">link</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">[root@CentOs7_001 ~]<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 进入容器中,查看两个容器内部网络</span></span><br><span class="line"><span class="comment">#### tomcat81</span></span><br><span class="line">[root@CentOs7_001 ~]<span class="comment"># docker exec -it tomcat81 /bin/bash</span></span><br><span class="line">root@faa368fd7fc2:/usr/local/tomcat<span class="comment"># ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">9: eth0@if10: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">root@faa368fd7fc2:/usr/local/tomcat<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### tomcat82</span></span><br><span class="line"></span><br><span class="line">[root@CentOs7_001 ~]<span class="comment"># docker exec -it tomcat82 /bin/bash</span></span><br><span class="line">root@bbf994869964:/usr/local/tomcat<span class="comment"># ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">11: eth0@if12: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:ac:11:00:03 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.17.0.3/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">root@bbf994869964:/usr/local/tomcat<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 图示如下</span></span><br></pre></td></tr></table></figure></div>

<p><strong>bridge网络案例</strong><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/docker%E7%BD%91%E7%BB%9C-bridge%E6%A1%88%E4%BE%8B01.jpg"
                     
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/docker%E7%BD%91%E7%BB%9C-bridge%E6%A1%88%E4%BE%8B02.jpg"
                     
                ></p>
<h4 id="host"><a href="#host" class="headerlink" title="host"></a><strong>host</strong></h4><blockquote>
<p>直接使用宿主机的IP与外界进行通信，不再需要额外进行NAT转换</p>
</blockquote>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">容器将不会获得一个独立的Network Namespace，而是和宿主机公用一个Network Namespace。容器将不会虚拟出自己的网卡而是使用宿主机的IP和端口</span><br><span class="line"></span><br><span class="line">如下图</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/docker%E7%BD%91%E7%BB%9C-host%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%8601.jpg"
                     
                ></p>
<p><strong>实例</strong></p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 启动一个容器,使用host模式</span></span><br><span class="line"></span><br><span class="line">[root@CentOs7_001 ~]<span class="comment"># docker run -d -p 8083:8080 --net=host --name tomcat83 billygoo/tomcat8-jdk8</span></span><br><span class="line">WARNING: Published ports are discarded when using host network mode</span><br><span class="line">cba24b7557befd5e8243780ce13ba2052aa26d703849580d557eee732fbf0642</span><br><span class="line">[root@CentOs7_001 ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                   COMMAND             CREATED         STATUS         PORTS                                       NAMES</span><br><span class="line">cba24b7557be   billygoo/tomcat8-jdk8   <span class="string">&quot;catalina.sh run&quot;</span>   3 seconds ago   Up 2 seconds                                               tomcat83</span><br><span class="line">[root@CentOs7_001 ~]<span class="comment"># </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### WARNING: Published ports are discarded when using host network mode</span></span><br><span class="line"><span class="comment">#### 问题:</span></span><br><span class="line"><span class="comment">#### docker启动时遇到warning警告</span></span><br><span class="line"><span class="comment">#### 原因:</span></span><br><span class="line"><span class="comment">#### docker启动时,指定 --net=host 或者 -net=host,如果还指定了 -p 映射端口,这个时候就会有此警告;并且通过 -p 设置的参数将不会起到任何作用,端口号会以主机端口号为主,重复时则递增</span></span><br><span class="line"><span class="comment">#### 解决:</span></span><br><span class="line"><span class="comment">#### 解决的办法就是使用docker的其他网络模式,例如 -net=bridge 这样可以解决问题;或者直接无视</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 避免 warning 警告产生</span></span><br><span class="line"><span class="comment">#### 删除之前的tomcat83容器后重试</span></span><br><span class="line">[root@CentOs7_001 ~]<span class="comment"># docker run -d --net=host --name tomcat84  billygoo/tomcat8-jdk8</span></span><br><span class="line">d1fb6721b30145f01a78676aded8c200043a4479ebbfd494e631a53319789e57</span><br><span class="line">[root@CentOs7_001 ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                   COMMAND             CREATED         STATUS         PORTS                                       NAMES</span><br><span class="line">d1fb6721b301   billygoo/tomcat8-jdk8   <span class="string">&quot;catalina.sh run&quot;</span>   4 seconds ago   Up 2 seconds                                               tomcat84</span><br><span class="line">bbf994869964   billygoo/tomcat8-jdk8   <span class="string">&quot;catalina.sh run&quot;</span>   6 hours ago     Up 6 hours     0.0.0.0:8082-&gt;8080/tcp, :::8082-&gt;8080/tcp   tomcat82</span><br><span class="line">faa368fd7fc2   billygoo/tomcat8-jdk8   <span class="string">&quot;catalina.sh run&quot;</span>   6 hours ago     Up 6 hours     0.0.0.0:8081-&gt;8080/tcp, :::8081-&gt;8080/tcp   tomcat81</span><br><span class="line">[root@CentOs7_001 ~]<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###########################################################</span></span><br><span class="line"><span class="comment">### 对比与bridge模式的区别</span></span><br><span class="line"></span><br><span class="line">[root@CentOs7_001 ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                   COMMAND             CREATED         STATUS         PORTS                                       NAMES</span><br><span class="line">d1fb6721b301   billygoo/tomcat8-jdk8   <span class="string">&quot;catalina.sh run&quot;</span>   4 seconds ago   Up 2 seconds                                               tomcat84</span><br><span class="line">bbf994869964   billygoo/tomcat8-jdk8   <span class="string">&quot;catalina.sh run&quot;</span>   6 hours ago     Up 6 hours     0.0.0.0:8082-&gt;8080/tcp, :::8082-&gt;8080/tcp   tomcat82</span><br><span class="line">faa368fd7fc2   billygoo/tomcat8-jdk8   <span class="string">&quot;catalina.sh run&quot;</span>   6 hours ago     Up 6 hours     0.0.0.0:8081-&gt;8080/tcp, :::8081-&gt;8080/tcp   tomcat81</span><br><span class="line">[root@CentOs7_001 ~]<span class="comment"># docker stop bbf994869964 faa368fd7fc2</span></span><br><span class="line">bbf994869964</span><br><span class="line">faa368fd7fc2</span><br><span class="line">[root@CentOs7_001 ~]<span class="comment"># ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 52:54:00:4d:77:d3 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.0.2.15/24 brd 10.0.2.255 scope global noprefixroute dynamic eth0</span><br><span class="line">       valid_lft 63070sec preferred_lft 63070sec</span><br><span class="line">    inet6 fe80::5054:ff:fe4d:77d3/64 scope <span class="built_in">link</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 08:00:27:ac:f9:6b brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.33.101/24 brd 192.168.33.255 scope global noprefixroute eth1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::a00:27ff:feac:f96b/64 scope <span class="built_in">link</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default</span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:d5:77:0a:48 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::42:d5ff:fe77:a48/64 scope <span class="built_in">link</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">[root@CentOs7_001 ~]<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 进入到容器内部</span></span><br><span class="line">[root@CentOs7_001 ~]<span class="comment"># docker exec -it tomcat84 /bin/bash</span></span><br><span class="line">root@CentOs7_001:/usr/local/tomcat<span class="comment"># ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 52:54:00:4d:77:d3 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.0.2.15/24 brd 10.0.2.255 scope global noprefixroute dynamic eth0</span><br><span class="line">       valid_lft 63033sec preferred_lft 63033sec</span><br><span class="line">    inet6 fe80::5054:ff:fe4d:77d3/64 scope <span class="built_in">link</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 08:00:27:ac:f9:6b brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.33.101/24 brd 192.168.33.255 scope global noprefixroute eth1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::a00:27ff:feac:f96b/64 scope <span class="built_in">link</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default</span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:d5:77:0a:48 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::42:d5ff:fe77:a48/64 scope <span class="built_in">link</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">root@CentOs7_001:/usr/local/tomcat<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 查看容器内部网络情况</span></span><br><span class="line">[root@CentOs7_001 ~]<span class="comment"># docker inspect tomcat84 | tail -n 20</span></span><br><span class="line">            <span class="string">&quot;Networks&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;host&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;IPAMConfig&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Links&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Aliases&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;NetworkID&quot;</span>: <span class="string">&quot;71cbdee3627d592c4b7b4609b17241677f519c59222ba6709968b60fd0cade1f&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;444f8d7347dea030bf77256fa19dc195eda5c0f2407b2da8633465a6384b9d18&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPPrefixLen&quot;</span>: 0,</span><br><span class="line">                    <span class="string">&quot;IPv6Gateway&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6Address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6PrefixLen&quot;</span>: 0,</span><br><span class="line">                    <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;DriverOpts&quot;</span>: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">[root@CentOs7_001 ~]<span class="comment">#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>host网络案例</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/docker%E7%BD%91%E7%BB%9C-host%E6%A1%88%E4%BE%8B01.jpg"
                     
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/docker%E7%BD%91%E7%BB%9C-host%E6%A1%88%E4%BE%8B02.jpg"
                     
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/docker%E7%BD%91%E7%BB%9C-host%E6%A1%88%E4%BE%8B03.jpg"
                     
                ></p>
<blockquote>
<p>在使用host网络模式时,不需要设置 -p 的端口映射,如何访问容器?</p>
<p>http:宿主机IP:8080&#x2F;</p>
<p>可以直接使用<code>IP+默认端口号</code>,可以访问成功;因为此时容器的IP借用主机的,所以容器共享宿主机网络IP;这样的好处就是外部主机和容器可以直接通信</p>
</blockquote>
<h4 id="none"><a href="#none" class="headerlink" title="none"></a><strong>none</strong></h4><blockquote>
<p>在none模式下，并不为Docker容器进行网络配置</p>
<p>也就是说，这个Docker容器没有网卡、IP、路由等信息；只有一个lo需要我们自己为Docker容器添加网卡、配置IP等</p>
</blockquote>
<p><strong>禁用网络功能，只有lo表识（就是127.0.0.1表示本地回环）</strong></p>
<p><strong>案例</strong></p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 启动一个容器,使用none模式</span></span><br><span class="line"></span><br><span class="line">[root@CentOs7_001 ~]<span class="comment"># docker run -d --net=none --name tomcat85 billygoo/tomcat8-jdk8</span></span><br><span class="line">5bea8ea317d59d7723f0ec6bc4baaabee459c81cde607056160e5bfe7a44e04c</span><br><span class="line">[root@CentOs7_001 ~]<span class="comment">#</span></span><br><span class="line">[root@CentOs7_001 ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                   COMMAND             CREATED          STATUS          PORTS     NAMES</span><br><span class="line">5bea8ea317d5   billygoo/tomcat8-jdk8   <span class="string">&quot;catalina.sh run&quot;</span>   12 seconds ago   Up 11 seconds             tomcat85</span><br><span class="line">d1fb6721b301   billygoo/tomcat8-jdk8   <span class="string">&quot;catalina.sh run&quot;</span>   18 minutes ago   Up 18 minutes             tomcat84</span><br><span class="line">[root@CentOs7_001 ~]<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 容器内部网络情况</span></span><br><span class="line">[root@CentOs7_001 ~]<span class="comment">#</span></span><br><span class="line">[root@CentOs7_001 ~]<span class="comment"># docker inspect tomcat85 |tail -n 20</span></span><br><span class="line">            <span class="string">&quot;Networks&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;none&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;IPAMConfig&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Links&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Aliases&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;NetworkID&quot;</span>: <span class="string">&quot;020e19a8bdbe1fc5e7513f84fce8f6e2f2ce40bd3d3e7bce6de637bdcceec218&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;a90b5635332b784a5e756aac6d4c007c1237dad5877940aeef4cfacd6834c44f&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPPrefixLen&quot;</span>: 0,</span><br><span class="line">                    <span class="string">&quot;IPv6Gateway&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6Address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6PrefixLen&quot;</span>: 0,</span><br><span class="line">                    <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;DriverOpts&quot;</span>: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">[root@CentOs7_001 ~]<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 容器实例内部网络情况</span></span><br><span class="line">[root@CentOs7_001 ~]<span class="comment">#</span></span><br><span class="line">[root@CentOs7_001 ~]<span class="comment"># docker exec -it tomcat85 /bin/bash</span></span><br><span class="line">root@5bea8ea317d5:/usr/local/tomcat<span class="comment"># ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">root@5bea8ea317d5:/usr/local/tomcat<span class="comment">#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>none网络案例</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/docker%E7%BD%91%E7%BB%9C-none%E6%A1%88%E4%BE%8B01.jpg"
                     
                ></p>
<h4 id="container"><a href="#container" class="headerlink" title="container"></a><strong>container</strong></h4><blockquote>
<p>container网络模式</p>
<p>新建的容器和已经存在的一个容器共享一个网络ip配置而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的IP，而是和一个指定的容器共享IP，端口范围等。同样，两个容器除了网络方面，其他的如文件系统，进程列表等还是隔离的。</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/docker%E7%BD%91%E7%BB%9C-container%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%8601.jpg"
                     
                ></p>
<p><strong>演示案例</strong></p>
<blockquote>
<p>由于tomcat会公用同一个ip和同一个端口,导致端口冲突,不适合使用tomcat演示;</p>
<p>换个镜像演示</p>
</blockquote>
<blockquote>
<p>Alpine Linux是一款独立的,非商业的通用的Linux发行版,专为追求安全性,简单性和资源效率的用户而设计.因为它小,简单而且安全;所以作为基础镜像是非常好的一个选择.</p>
</blockquote>
<p><strong>案例</strong></p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 启动两个alpine容器</span></span><br><span class="line"><span class="comment">### alpine1</span></span><br><span class="line">[root@CentOs7_001 ~]<span class="comment"># docker run -it --name alpine1 alpine /bin/sh</span></span><br><span class="line">/ <span class="comment"># ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">9: eth0@if10: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue state UP</span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">/ <span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### alpine2</span></span><br><span class="line">[root@CentOs7_001 ~]<span class="comment"># docker run -it --network container:alpine1 --name alpine2 alpine /bin/sh</span></span><br><span class="line">/ <span class="comment"># ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">9: eth0@if10: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue state UP</span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">/ <span class="comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>网络案例</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/docker%E7%BD%91%E7%BB%9C-container%E6%A1%88%E4%BE%8B01.jpg"
                     
                ></p>
<blockquote>
<p>由于此时 alpine2依赖 alpine1的网络；如果此时关闭 alpine1;在观察alpine2</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 演示案例,关闭alpine1服务;观察alpine2容器网络</span></span><br><span class="line">[root@CentOs7_001 ~]<span class="comment">#</span></span><br><span class="line">[root@CentOs7_001 ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND     CREATED          STATUS          PORTS     NAMES</span><br><span class="line">230b90dfcb66   alpine    <span class="string">&quot;/bin/sh&quot;</span>   10 minutes ago   Up 10 minutes             alpine2</span><br><span class="line">a8a00f4e12c3   alpine    <span class="string">&quot;/bin/sh&quot;</span>   12 minutes ago   Up 11 minutes             alpine1</span><br><span class="line">[root@CentOs7_001 ~]<span class="comment">#</span></span><br><span class="line">[root@CentOs7_001 ~]<span class="comment"># docker stop alpine1</span></span><br><span class="line">alpine1</span><br><span class="line">[root@CentOs7_001 ~]<span class="comment">#</span></span><br><span class="line">[root@CentOs7_001 ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND     CREATED          STATUS          PORTS     NAMES</span><br><span class="line">230b90dfcb66   alpine    <span class="string">&quot;/bin/sh&quot;</span>   10 minutes ago   Up 10 minutes             alpine2</span><br><span class="line">[root@CentOs7_001 ~]<span class="comment">#</span></span><br><span class="line">[root@CentOs7_001 ~]<span class="comment">#</span></span><br><span class="line">[root@CentOs7_001 ~]<span class="comment"># docker exec -it alpine2 /bin/sh</span></span><br><span class="line">/ <span class="comment"># ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">/ <span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 随着alpine1关闭;alpine2网络通道也关闭了,只剩下lo模式</span></span><br></pre></td></tr></table></figure></div>



<h4 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a><strong>自定义网络</strong></h4><ul>
<li><strong>docker link 介绍</strong></li>
</ul>
<blockquote>
<p>容器互联</p>
<p>– link 可以通过容器名互相通信,容器间共享环境变量</p>
<p>– link 主要用来解决两个容器通过ip地址连接时<code>容器ip地址</code>会变的问题</p>
</blockquote>
<p><strong>–link案例</strong></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 先创建启动mysql容器</span></span><br><span class="line">docker run -dti --name db --restart=always -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=blog mysql:5.7</span><br><span class="line"><span class="comment"># -dti：指定容器运行在交互模式下，并将其连接到终端</span></span><br><span class="line"><span class="comment"># --name db：为容器指定名称 db，以便后续操作直接使用容器名</span></span><br><span class="line"><span class="comment"># --restart=always：指定容器在退出后总是自动重启</span></span><br><span class="line"><span class="comment"># -e MYSQL_ROOT_PASSWORD=root：设置mysql的root用户密码为root</span></span><br><span class="line"><span class="comment"># -e MYSQL_DATABASE=blog：创建一个名为blog的数据库</span></span><br></pre></td></tr></table></figure></div>



<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 创建启动源容器wordpress</span></span><br><span class="line"><span class="comment">### 使用--link</span></span><br><span class="line"><span class="comment">### docker run -dti --name 容器名 --restart=always -v 本地目录:容器内目录 -p 本地端口:容器端口 --link 数据库容器名:数据库容器别名 wordpress镜</span></span><br><span class="line">docker run -dti --name blog --restart=always -v /mydata/web:/var/www/html -p 8089:80 --<span class="built_in">link</span> db:mysql wordpress</span><br><span class="line"><span class="comment"># -dti：指定容器运行在交互模式下，并将其连接到终端</span></span><br><span class="line"><span class="comment"># --name blog：为容器指定名称 blog，以便直接使用容器名</span></span><br><span class="line"><span class="comment"># --restart=always：指定容器在退出后总是自动重启</span></span><br><span class="line"><span class="comment"># -v /mydata/web:/var/www/html：将宿主机上 /mydata/web 目录映射到容器中的 /var/www/html 目录，实现数据持久化</span></span><br><span class="line"><span class="comment"># -p 8089:80：将容器内部的80端口映射到宿主机上的8089端口，以便外部网络可以访问容器中的网站</span></span><br><span class="line"><span class="comment"># --link db:mysql：将容器与另一个名为 db 的容器连接起来，并设置别民为 mysql，以便在后续操作中引用该容器</span></span><br></pre></td></tr></table></figure></div>



<p><strong>验证:</strong> <strong>连通性验证</strong></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 启动的容器host</span></span><br><span class="line"></span><br><span class="line">[root@CentOS7_001 ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                   CREATED          STATUS          PORTS                                       NAMES</span><br><span class="line">c48b8c6bc4d2   wordpress      <span class="string">&quot;docker-entrypoint.s…&quot;</span>   12 minutes ago   Up 12 minutes   0.0.0.0:8089-&gt;80/tcp, :::8089-&gt;80/tcp       blog</span><br><span class="line">580cf83c51ab   mysql:5.7      <span class="string">&quot;docker-entrypoint.s…&quot;</span>   36 minutes ago   Up 36 minutes   3306/tcp, 33060/tcp                         db</span><br><span class="line">[root@CentOS7_001 ~]<span class="comment">#</span></span><br><span class="line">[root@CentOS7_001 ~]<span class="comment">#</span></span><br><span class="line">[root@CentOS7_001 ~]<span class="comment"># docker exec -it db cat /etc/hosts</span></span><br><span class="line">127.0.0.1       localhost</span><br><span class="line">::1     localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0 ip6-localnet</span><br><span class="line">ff00::0 ip6-mcastprefix</span><br><span class="line">ff02::1 ip6-allnodes</span><br><span class="line">ff02::2 ip6-allrouters</span><br><span class="line">172.17.0.2      580cf83c51ab</span><br><span class="line"></span><br><span class="line">[root@CentOS7_001 ~]<span class="comment">#</span></span><br><span class="line">[root@CentOS7_001 ~]<span class="comment">#</span></span><br><span class="line">[root@CentOS7_001 ~]<span class="comment"># docker exec -it blog cat /etc/hosts</span></span><br><span class="line">127.0.0.1       localhost</span><br><span class="line">::1     localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0 ip6-localnet</span><br><span class="line">ff00::0 ip6-mcastprefix</span><br><span class="line">ff02::1 ip6-allnodes</span><br><span class="line">ff02::2 ip6-allrouters</span><br><span class="line">172.17.0.2      mysql 580cf83c51ab db</span><br><span class="line">172.17.0.3      c48b8c6bc4d2</span><br><span class="line">[root@CentOS7_001 ~]<span class="comment">#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<p><strong>自定义网络案例</strong></p>
<ul>
<li>使用自定义网络之前</li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 启动两个tomcat容器</span></span><br><span class="line">docker run -dti --name tomcat1 -p 8081:8080 billygoo/tomcat8-jdk8</span><br><span class="line">docker run -dti --name tomcat2 -p 8082:8080 billygoo/tomcat8-jdk8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 运行结果</span></span><br><span class="line">[root@CentOS7_001 zyd-tag]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                   COMMAND                   CREATED          STATUS          PORTS                                       NAMES</span><br><span class="line">0708901345c3   billygoo/tomcat8-jdk8   <span class="string">&quot;catalina.sh run&quot;</span>         2 seconds ago    Up 1 second     0.0.0.0:8082-&gt;8080/tcp, :::8082-&gt;8080/tcp   tomcat2</span><br><span class="line">7988714376ad   billygoo/tomcat8-jdk8   <span class="string">&quot;catalina.sh run&quot;</span>         27 minutes ago   Up 27 minutes   0.0.0.0:8081-&gt;8080/tcp, :::8081-&gt;8080/tcp   tomcat1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看网络情况</span></span><br><span class="line">[root@CentOS7_001 zyd-tag]<span class="comment"># docker exec -it tomcat1 ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2935: eth0@if2936: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">[root@CentOS7_001 zyd-tag]<span class="comment">#</span></span><br><span class="line">[root@CentOS7_001 zyd-tag]<span class="comment">#</span></span><br><span class="line">[root@CentOS7_001 zyd-tag]<span class="comment"># docker exec -it tomcat2 ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3217: eth0@if3218: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:ac:11:00:03 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.17.0.3/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">[root@CentOS7_001 zyd-tag]<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 测试ip互通</span></span><br><span class="line">[root@CentOS7_001 zyd-tag]<span class="comment"># docker exec -it tomcat1 ping 172.17.0.3</span></span><br><span class="line">PING 172.17.0.3 (172.17.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.17.0.3: icmp_seq=1 ttl=64 time=0.064 ms</span><br><span class="line">64 bytes from 172.17.0.3: icmp_seq=2 ttl=64 time=0.052 ms</span><br><span class="line">64 bytes from 172.17.0.3: icmp_seq=3 ttl=64 time=0.054 ms</span><br><span class="line">64 bytes from 172.17.0.3: icmp_seq=4 ttl=64 time=0.056 ms</span><br><span class="line">--- 172.17.0.3 ping statistics ---</span><br><span class="line">4 packets transmitted, 4 received, 0% packet loss, time 3000ms</span><br><span class="line">rtt min/avg/max/mdev = 0.052/0.056/0.064/0.008 ms</span><br><span class="line">[root@CentOS7_001 zyd-tag]<span class="comment">#</span></span><br><span class="line">[root@CentOS7_001 zyd-tag]<span class="comment"># docker exec -it tomcat2 ping 172.17.0.2</span></span><br><span class="line">PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.057 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.050 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.069 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=4 ttl=64 time=0.055 ms</span><br><span class="line">--- 172.17.0.2 ping statistics ---</span><br><span class="line">4 packets transmitted, 4 received, 0% packet loss, time 3001ms</span><br><span class="line">rtt min/avg/max/mdev = 0.050/0.057/0.069/0.011 ms</span><br><span class="line">[root@CentOS7_001 zyd-tag]<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 测试容器名互通</span></span><br><span class="line">[root@CentOS7_001 zyd-tag]<span class="comment"># docker exec -it tomcat2 ping tomcat1</span></span><br><span class="line">ping: tomcat1: Name or service not known</span><br><span class="line">[root@CentOS7_001 zyd-tag]<span class="comment"># docker exec -it tomcat1 ping tomcat2</span></span><br><span class="line">ping: tomcat2: Name or service not known</span><br><span class="line">[root@CentOS7_001 zyd-tag]<span class="comment">#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<ul>
<li>使用自定义网络</li>
</ul>
<blockquote>
<p>自定义桥接网卡：自定义网络默认使用的是桥接网络<code>brideg</code></p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 新建自定义网络</span></span><br><span class="line">docker network create test_my_network</span><br><span class="line"><span class="comment">## 新建两个容器,使用自定义的网络</span></span><br><span class="line">docker run -dti --name tomcat1 -p 8083:8080 --net test_my_network billygoo/tomcat8-jdk8</span><br><span class="line">docker run -dti --name tomcat2 -p 8084:8080 --net test_my_network billygoo/tomcat8-jdk8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@CentOS7_001 ~]<span class="comment"># docker exec -it tomcat1 ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3312: eth0@if3313: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:ac:13:00:03 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.19.0.3/16 brd 172.19.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">[root@CentOS7_001 ~]<span class="comment">#</span></span><br><span class="line">[root@CentOS7_001 ~]<span class="comment">#</span></span><br><span class="line">[root@CentOS7_001 ~]<span class="comment"># docker exec -it tomcat2 ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3310: eth0@if3311: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:ac:13:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.19.0.2/16 brd 172.19.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">       </span><br><span class="line"><span class="comment">## 测试容器名互通</span></span><br><span class="line">[root@CentOS7_001 ~]<span class="comment">#</span></span><br><span class="line">[root@CentOS7_001 ~]<span class="comment"># docker exec -it tomcat1 ping tomcat2</span></span><br><span class="line">PING tomcat2 (172.19.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat2.test_my_network (172.19.0.2): icmp_seq=1 ttl=64 time=0.063 ms</span><br><span class="line">64 bytes from tomcat2.test_my_network (172.19.0.2): icmp_seq=2 ttl=64 time=0.054 ms</span><br><span class="line">64 bytes from tomcat2.test_my_network (172.19.0.2): icmp_seq=3 ttl=64 time=0.050 ms</span><br><span class="line">--- tomcat2 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 2000ms</span><br><span class="line">rtt min/avg/max/mdev = 0.050/0.055/0.063/0.010 ms</span><br><span class="line">[root@CentOS7_001 ~]<span class="comment">#</span></span><br><span class="line">[root@CentOS7_001 ~]<span class="comment"># docker exec -it tomcat2 ping tomcat1</span></span><br><span class="line">PING tomcat1 (172.19.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat1.test_my_network (172.19.0.3): icmp_seq=1 ttl=64 time=0.043 ms</span><br><span class="line">64 bytes from tomcat1.test_my_network (172.19.0.3): icmp_seq=2 ttl=64 time=0.061 ms</span><br><span class="line">64 bytes from tomcat1.test_my_network (172.19.0.3): icmp_seq=3 ttl=64 time=0.074 ms</span><br><span class="line">64 bytes from tomcat1.test_my_network (172.19.0.3): icmp_seq=4 ttl=64 time=0.054 ms</span><br><span class="line">--- tomcat1 ping statistics ---</span><br><span class="line">4 packets transmitted, 4 received, 0% packet loss, time 2999ms</span><br><span class="line">rtt min/avg/max/mdev = 0.043/0.058/0.074/0.011 ms</span><br><span class="line">[root@CentOS7_001 ~]<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看容器使用网络</span></span><br><span class="line">[root@CentOS7_001 ~]<span class="comment"># docker inspect tomcat1 |tail -n 22</span></span><br><span class="line">            <span class="string">&quot;Networks&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;test_my_network&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;IPAMConfig&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Links&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Aliases&quot;</span>: [</span><br><span class="line">                        <span class="string">&quot;2023330c8bc7&quot;</span></span><br><span class="line">                    ],</span><br><span class="line">                    <span class="string">&quot;NetworkID&quot;</span>: <span class="string">&quot;55af0827e416760bb36df2cf73ee4807651d08ed11f45bf2daf6564da13d2db2&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;cfaf00328fde61b11da0faeddde7faf4d3cd84a6f57546a44875123d6c924efe&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.19.0.1&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;172.19.0.3&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPPrefixLen&quot;</span>: 16,</span><br><span class="line">                    <span class="string">&quot;IPv6Gateway&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6Address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6PrefixLen&quot;</span>: 0,</span><br><span class="line">                    <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:13:00:03&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;DriverOpts&quot;</span>: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">[root@CentOS7_001 ~]<span class="comment">#</span></span><br><span class="line">[root@CentOS7_001 ~]<span class="comment">#</span></span><br><span class="line">[root@CentOS7_001 ~]<span class="comment"># docker inspect tomcat2 |tail -n 22</span></span><br><span class="line">            <span class="string">&quot;Networks&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;test_my_network&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;IPAMConfig&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Links&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Aliases&quot;</span>: [</span><br><span class="line">                        <span class="string">&quot;ac0155a6a48f&quot;</span></span><br><span class="line">                    ],</span><br><span class="line">                    <span class="string">&quot;NetworkID&quot;</span>: <span class="string">&quot;55af0827e416760bb36df2cf73ee4807651d08ed11f45bf2daf6564da13d2db2&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;ac26e9de09d09315133ccd034bc07af3b1091be78cdfe04cccc5d7acf52f465b&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.19.0.1&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;172.19.0.2&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPPrefixLen&quot;</span>: 16,</span><br><span class="line">                    <span class="string">&quot;IPv6Gateway&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6Address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6PrefixLen&quot;</span>: 0,</span><br><span class="line">                    <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:13:00:02&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;DriverOpts&quot;</span>: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">[root@CentOS7_001 ~]<span class="comment">#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<p><strong>结论</strong></p>
<blockquote>
<p>自定义网络本身就维护好了主机名和ip的对应关系（ip和域名都名能通）</p>
</blockquote>
<p><strong><code>贴一个架构图</code></strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/docker%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84%E5%9B%BE.png"
                     
                ></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-compose容器编排</title>
    <url>/GSSBlog/2023/10/30/12.docker-compose%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92/</url>
    <content><![CDATA[<blockquote>
<p><a class="link"   href="https://docs.docker.com/compose/compose-file/" >概述 |码头工人文档 (docker.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<blockquote>
<p>Compose是Docker公司推出的一个工具软件，可以管理多个docker容器组成一个应用。需要定义一个YAML格式的配置文件<code>docker-compose.yml</code>，写好多个容器之间的调用关系。然后，只需要一个命令，就能同时启动&#x2F;关闭这些容器。</p>
<p>是Docker官方的开源项目，负责实现对Docker容器集群的快速编排</p>
</blockquote>
<ul>
<li>主要作用</li>
</ul>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">docker建议我们每个容器中只运行一个服务，因为docker容器本身占用的资源极少，所以最好是将每个服务单独的分割开来。</span><br><span class="line">但是这样会有其他的问题？</span><br><span class="line">如果需要同时部署好多个服务，就需要每个服务单独写Dockerfile文件然后构建镜像，构建容器。这样会很繁琐。所以Docker官方提供了docker-compose多服务部署工具。</span><br><span class="line">例如：需要部署一个web微服务项目，除了web容器本身，还需要依赖中间件包括数据库服务，redis服务，注册中心nacos服务，甚至还包括负载均衡服务...等等</span><br><span class="line">Compose允许用户通过一个单独的docker-compose.yml模板文件（YAML格式）来定义一组相关联的应用容器为一个项目（project）。</span><br><span class="line">可以很容易地用一个配置文件定义一个多容器的应用，然后使用一条指令安装这个应用的所有依赖，完成构建。</span><br><span class="line">docker-compose解决了容器与容器之间如何管理编排的问题。</span><br></pre></td></tr></table></figure></div>



<ul>
<li><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a><strong>使用</strong></h2></li>
</ul>
<p><strong><code>安装</code></strong></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 链接 https://github.com/docker/compose/releases/download/1.29.2/docker-compose-Linux-x86_64</span></span><br><span class="line"></span><br><span class="line">curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br><span class="line"><span class="comment">### -S 显示错误</span></span><br><span class="line"><span class="comment">### -L 允许跳转;github下载使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 开放权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment">## 验证安装</span></span><br><span class="line">docker-compose --version</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@CentOS7_001 ~]<span class="comment"># uname --help</span></span><br><span class="line">用法：<span class="built_in">uname</span> [选项]...</span><br><span class="line">输出一组系统信息。如果不跟随选项，则视为只附加-s 选项。</span><br><span class="line"></span><br><span class="line">  -a, --all                     以如下次序输出所有信息。其中若-p 和</span><br><span class="line">                                -i 的探测结果不可知则被省略：</span><br><span class="line">  -s, --kernel-name             输出内核名称</span><br><span class="line">  -n, --nodename                输出网络节点上的主机名</span><br><span class="line">  -r, --kernel-release          输出内核发行号</span><br><span class="line">  -v, --kernel-version          输出内核版本</span><br><span class="line">  -m, --machine         输出主机的硬件架构名称</span><br><span class="line">  -p, --processor               输出处理器类型或<span class="string">&quot;unknown&quot;</span></span><br><span class="line">  -i, --hardware-platform       输出硬件平台或<span class="string">&quot;unknown&quot;</span></span><br><span class="line">  -o, --operating-system        输出操作系统名称</span><br><span class="line">      --<span class="built_in">help</span>            显示此帮助信息并退出</span><br><span class="line">      --version         显示版本信息并退出</span><br><span class="line"></span><br><span class="line">GNU coreutils online <span class="built_in">help</span>: &lt;http://www.gnu.org/software/coreutils/&gt;</span><br><span class="line">请向&lt;http://translationproject.org/team/zh_CN.html&gt; 报告<span class="built_in">uname</span> 的翻译错误</span><br><span class="line">要获取完整文档，请运行：info coreutils <span class="string">&#x27;uname invocation&#x27;</span></span><br><span class="line">[root@CentOS7_001 ~]<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@CentOS7_001 ~]<span class="comment"># docker-compose --version</span></span><br><span class="line">docker-compose version 1.29.2, build 5becea4c</span><br><span class="line">[root@CentOS7_001 ~]<span class="comment">#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<p><strong><code>卸载</code></strong></p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 使用github安装</span></span><br><span class="line"><span class="built_in">rm</span> -rf /use/local/bin/docker-compose</span><br></pre></td></tr></table></figure></div>



<ul>
<li><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a><strong>核心概念</strong></h2></li>
<li><h3 id="一个文件"><a href="#一个文件" class="headerlink" title="一个文件"></a>一个文件</h3><div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">docker-compose.yml</span><br></pre></td></tr></table></figure></div>
</li>
<li><h3 id="两个要素"><a href="#两个要素" class="headerlink" title="两个要素"></a>两个要素</h3><ul>
<li><p>服务（service）</p>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">一个个应用容器实例,比如web服务,mysql容器,nginx容器,redis容器...</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>工程（project）</p>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">由一组关联的应用容器组成一个完整业务单元,在docker-compose.yml文件中定义</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
<li><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a><strong>使用步骤</strong></h2></li>
</ul>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">1.编写Dockerfile文件定义各个微服务应用并构建出对应的镜像文件</span><br><span class="line">2.使用docker-compose.yml文件定义一个完整业务单元,安排好整体应用中的各个容器服务</span><br><span class="line">3.最后,执行docker-compose up 命令启动并运行整个应用程序,完成一键部署上线</span><br></pre></td></tr></table></figure></div>



<ul>
<li><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a><strong>常用命令</strong></h2></li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Compose常用命令</span><br><span class="line"></span><br><span class="line">docker-compose -h                           <span class="comment"># 查看帮助</span></span><br><span class="line"></span><br><span class="line">docker-compose up                           <span class="comment"># 启动所有docker-compose服务</span></span><br><span class="line"></span><br><span class="line">docker-compose up -d                        <span class="comment"># 启动所有docker-compose服务并后台运行</span></span><br><span class="line"></span><br><span class="line">docker-compose down                         <span class="comment"># 停止并删除容器、网络、卷、镜像。</span></span><br><span class="line"></span><br><span class="line">docker-compose <span class="built_in">exec</span>  yml里面的服务<span class="built_in">id</span>                 <span class="comment"># 进入容器实例内部  docker-compose exec docker-compose.yml文件中写的服务id /bin/bash</span></span><br><span class="line"></span><br><span class="line">docker-compose ps                      <span class="comment"># 展示当前docker-compose编排过的运行的所有容器</span></span><br><span class="line"></span><br><span class="line">docker-compose top                     <span class="comment"># 展示当前docker-compose编排过的容器进程</span></span><br><span class="line"></span><br><span class="line">docker-compose logs  yml里面的服务<span class="built_in">id</span>     <span class="comment"># 查看容器输出日志</span></span><br><span class="line"></span><br><span class="line">docker-compose config     <span class="comment"># 检查配置</span></span><br><span class="line"></span><br><span class="line">docker-compose config -q  <span class="comment"># 检查配置，有问题才有输出</span></span><br><span class="line"></span><br><span class="line">docker-compose restart   <span class="comment"># 重启服务</span></span><br><span class="line"></span><br><span class="line">docker-compose start     <span class="comment"># 启动服务</span></span><br><span class="line"></span><br><span class="line">docker-compose stop      <span class="comment"># 停止服务</span></span><br></pre></td></tr></table></figure></div>



<p><strong><code>官方案例</code></strong></p>
<blockquote>
<p>演示<code>python</code>案例，带你使用docker-compose</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 1.创建一个composetest演示文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> composetest</span><br><span class="line"><span class="built_in">cd</span> composetest</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">// <span class="number">2.</span>创建一个app.py文件</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">cache = redis.Redis(host=<span class="string">&#x27;redis&#x27;</span>, port=<span class="number">6379</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_hit_count</span>():</span><br><span class="line">    retries = <span class="number">5</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> cache.incr(<span class="string">&#x27;hits&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> redis.exceptions.ConnectionError <span class="keyword">as</span> exc:</span><br><span class="line">            <span class="keyword">if</span> retries == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">raise</span> exc</span><br><span class="line">            retries -= <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    count = get_hit_count()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World! I have been seen &#123;&#125; times.\n&#x27;</span>.<span class="built_in">format</span>(count)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">3.创建另外一个文件:requirements.txt,以便于下面的文件调用</span><br><span class="line"></span><br><span class="line">flask</span><br><span class="line">redis</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Dockerfile"><figure class="iseeu highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">##  4.创建Dockerfile文件</span></span><br><span class="line"><span class="comment"># syntax=docker/dockerfile:1</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span>-alpine</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /code</span></span><br><span class="line"><span class="keyword">ENV</span> FLASK_APP=app.py</span><br><span class="line"><span class="keyword">ENV</span> FLASK_RUN_HOST=<span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk add --no-cache gcc musl-dev linux-headers</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> requirements.txt requirements.txt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install -r requirements.txt</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">5000</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;flask&quot;</span>, <span class="string">&quot;run&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 Python 3.7 映像开始构建映像。</span></span><br><span class="line"><span class="comment"># 将工作目录设置为 。/code</span></span><br><span class="line"><span class="comment"># 设置命令使用的环境变量。flask</span></span><br><span class="line"><span class="comment"># 安装 gcc 和其他依赖项</span></span><br><span class="line"><span class="comment"># 复制并安装 Python 依赖项。requirements.txt</span></span><br><span class="line"><span class="comment"># 将元数据添加到映像以描述容器正在侦听端口 5000</span></span><br><span class="line"><span class="comment"># 将项目中的当前目录复制到映像中的工作目录。..</span></span><br><span class="line"><span class="comment"># 将容器的默认命令设置为 。flask run</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 5.编写docker-compose.yml文件</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8000:5000&quot;</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">  	<span class="attr">image:</span> <span class="string">&quot;reids:alpine&quot;</span></span><br><span class="line">  	</span><br><span class="line"><span class="comment">## 定义了两个服务: web 和 redis</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 6.使用命令docker-compose up 启动应用程序</span></span><br><span class="line"></span><br><span class="line">docker-compose up <span class="comment"># 前台启动</span></span><br><span class="line">docker-compose up -d <span class="comment"># 后台启动</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 7.验证服务</span></span><br><span class="line"><span class="comment">### 在浏览器中输入 http://localhost:8000/ 以查看正在运行的应用程序</span></span><br></pre></td></tr></table></figure></div>





<p><strong>其他Dockerfile案例</strong></p>
<div class="highlight-container" data-rel="Dockerfile"><figure class="iseeu highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 原始Dockerfile文件</span></span><br><span class="line"><span class="keyword">FROM</span> anapsix/alpine-java:<span class="number">8</span>_server-jre_unlimited</span><br><span class="line"></span><br><span class="line"><span class="keyword">MAINTAINER</span> igsshan@<span class="number">163</span>.com</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> -p /app/lib</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> ./admin.jar ./app.jar</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> ./lib/*.jar ./lib/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai JAVA_OPTS=<span class="string">&quot;-Xms128m -Xmx512m&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> java <span class="variable">$&#123;JAVA_OPTS&#125;</span> -Djava.security.egd=file:/dev/./urandom -jar app.jar</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Dockerfile"><figure class="iseeu highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 修改环境变量后的Dockerfile</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> admin:<span class="number">0.0</span>.<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai JAVA_OPTS=<span class="string">&quot;-Xms256m -Xmx1024m&quot;</span> <span class="comment">## 测试修改环境启动参数,也可以在实际应用中修改其他的环境变量参数;包括不限于数据库连接池,数据库连接地址,数据库账密、redis连接...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> java <span class="variable">$&#123;JAVA_OPTS&#125;</span> -Djava.security.egd=file:/dev/./urandom -jar app.jar</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<p><strong>docker-compose -h</strong></p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">[root@CentOS7_001 composetest]<span class="comment"># docker-compose -h</span></span><br><span class="line">Define and run multi-container applications with Docker.</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  docker-compose [-f &lt;arg&gt;...] [--profile &lt;name&gt;...] [options] [--] [COMMAND] [ARGS...]</span><br><span class="line">  docker-compose -h|--<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -f, --file FILE             Specify an alternate compose file</span><br><span class="line">                              (default: docker-compose.yml)</span><br><span class="line">  -p, --project-name NAME     Specify an alternate project name</span><br><span class="line">                              (default: directory name)</span><br><span class="line">  --profile NAME              Specify a profile to <span class="built_in">enable</span></span><br><span class="line">  -c, --context NAME          Specify a context name</span><br><span class="line">  --verbose                   Show more output</span><br><span class="line">  --log-level LEVEL           Set <span class="built_in">log</span> level (DEBUG, INFO, WARNING, ERROR, CRITICAL)</span><br><span class="line">  --ansi (never|always|auto)  Control when to <span class="built_in">print</span> ANSI control characters</span><br><span class="line">  --no-ansi                   Do not <span class="built_in">print</span> ANSI control characters (DEPRECATED)</span><br><span class="line">  -v, --version               Print version and <span class="built_in">exit</span></span><br><span class="line">  -H, --host HOST             Daemon socket to connect to</span><br><span class="line"></span><br><span class="line">  --tls                       Use TLS; implied by --tlsverify</span><br><span class="line">  --tlscacert CA_PATH         Trust certs signed only by this CA</span><br><span class="line">  --tlscert CLIENT_CERT_PATH  Path to TLS certificate file</span><br><span class="line">  --tlskey TLS_KEY_PATH       Path to TLS key file</span><br><span class="line">  --tlsverify                 Use TLS and verify the remote</span><br><span class="line">  --skip-hostname-check       Don<span class="string">&#x27;t check the daemon&#x27;</span>s hostname against the</span><br><span class="line">                              name specified <span class="keyword">in</span> the client certificate</span><br><span class="line">  --project-directory PATH    Specify an alternate working directory</span><br><span class="line">                              (default: the path of the Compose file)</span><br><span class="line">  --compatibility             If <span class="built_in">set</span>, Compose will attempt to convert keys</span><br><span class="line">                              <span class="keyword">in</span> v3 files to their non-Swarm equivalent (DEPRECATED)</span><br><span class="line">  --env-file PATH             Specify an alternate environment file</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  build              Build or rebuild services</span><br><span class="line">  config             Validate and view the Compose file</span><br><span class="line">  create             Create services</span><br><span class="line">  down               Stop and remove resources</span><br><span class="line">  events             Receive real time events from containers</span><br><span class="line">  <span class="built_in">exec</span>               Execute a <span class="built_in">command</span> <span class="keyword">in</span> a running container</span><br><span class="line">  <span class="built_in">help</span>               Get <span class="built_in">help</span> on a <span class="built_in">command</span></span><br><span class="line">  images             List images</span><br><span class="line">  <span class="built_in">kill</span>               Kill containers</span><br><span class="line">  logs               View output from containers</span><br><span class="line">  pause              Pause services</span><br><span class="line">  port               Print the public port <span class="keyword">for</span> a port binding</span><br><span class="line">  ps                 List containers</span><br><span class="line">  pull               Pull service images</span><br><span class="line">  push               Push service images</span><br><span class="line">  restart            Restart services</span><br><span class="line">  <span class="built_in">rm</span>                 Remove stopped containers</span><br><span class="line">  run                Run a one-off <span class="built_in">command</span></span><br><span class="line">  scale              Set number of containers <span class="keyword">for</span> a service</span><br><span class="line">  start              Start services</span><br><span class="line">  stop               Stop services</span><br><span class="line">  top                Display the running processes</span><br><span class="line">  unpause            Unpause services</span><br><span class="line">  up                 Create and start containers</span><br><span class="line">  version            Show version information and quit</span><br><span class="line">[root@CentOS7_001 composetest]<span class="comment"># docker-compose version</span></span><br><span class="line">docker-compose version 1.29.2, build 5becea4c</span><br><span class="line">docker-py version: 5.0.0</span><br><span class="line">CPython version: 3.7.10</span><br><span class="line">OpenSSL version: OpenSSL 1.1.0l  10 Sep 2019</span><br><span class="line">[root@CentOS7_001 composetest]<span class="comment">#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>





























]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker轻量级可视化工具Portainer</title>
    <url>/GSSBlog/2023/10/30/13.docker%E8%BD%BB%E9%87%8F%E7%BA%A7%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7Portainer/</url>
    <content><![CDATA[<blockquote>
<p>Portainer 是一款轻量级的应用，提供了图形化界面，方便管理Docker环境，包括单机环境和集群环境</p>
</blockquote>
<p><strong>官网</strong></p>
<blockquote>
<p><a class="link"   href="https://www.portainer.io/" >Portainer: Docker and Kubernetes Management Platform <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://docs.portainer.io/" >Welcome - Portainer Documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://docs.portainer.io/start/install/server/docker/linux" >在 Linux 上使用 Docker 安装 Portainer BE - Portainer 文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<p><strong><code>安装</code></strong></p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 使用官方案例安装</span></span><br><span class="line">docker run -d -p 8000:8000 -p 9000:9000 --name portainer     --restart=always     -v /var/run/docker.sock:/var/run/docker.sock     -v portainer_data:/data     portainer/portainer</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker重量级容器监控</title>
    <url>/GSSBlog/2023/10/30/14docker%E5%AE%B9%E5%99%A8%E7%9B%91%E6%8E%A7%E4%B9%8BCAdvisor+InfluxDB+Granfana/</url>
    <content><![CDATA[<h2 id="CAdvisor-InfluxDB-Granfana"><a href="#CAdvisor-InfluxDB-Granfana" class="headerlink" title="CAdvisor+InfluxDB+Granfana"></a>CAdvisor+InfluxDB+Granfana</h2><h3 id="原生命令"><a href="#原生命令" class="headerlink" title="原生命令"></a>原生命令</h3><blockquote>
<p>docker stats</p>
</blockquote>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">docker stats 可以很方便的查看当前宿主机上所有容器的CPU,内存以及网络流量等数据,</span><br><span class="line"></span><br><span class="line">但是有个弊端</span><br><span class="line"></span><br><span class="line">docker stats 统计结果只能是当前宿主机的全部容器,数据资料是实时的,没有地方存储,没有健康指标过线预警等功能</span><br></pre></td></tr></table></figure></div>



<h3 id="引入工具"><a href="#引入工具" class="headerlink" title="引入工具"></a>引入工具</h3><blockquote>
<p>CAdvisor 监控收集</p>
<p>InfluxDB 存储数据</p>
<p>Granfana 展示图表</p>
</blockquote>
<p><strong>CAdivsor</strong></p>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">CAdvisor是一个容器资源监控工具,包括容器的内存,CPU,网络IO,磁盘IO等监控.同时提供了一个web页面用于查看容器的实时运行状态.</span><br><span class="line">CAdvisor默认存储2分钟的数据,而且是针对单物理机的,不过,CAdvisor提供了很多数据集成接口,支持InfluxDB,Redis,Kafka,Elasticsearch等集成,可以加上对应的配置将监控数据发往集成的数据库存储起来.</span><br><span class="line"></span><br><span class="line">CAdvisor主要功能点:</span><br><span class="line">	1.展示Host和容器两个层次的监控数据</span><br><span class="line">	2.展示历史变化数据</span><br></pre></td></tr></table></figure></div>

<p><strong>InfluxDB</strong></p>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">InfluxDB是由GO语言编写的一个开源分布式时序,事件和指标数据库,无需外部依赖.</span><br><span class="line"></span><br><span class="line">CAdvisor默认只在本机保存最近2分钟的数据,为了持久化存储数据和统一收集展示监控数据,需要将数据存储到InfluxDB中.InfluxDB是一个时序数据库,专门用于存储时序相关数据,很适合存储CAdvisor的数据,而且,CAdvisor本身提供了InfluxDB的集成方法,在容器启动时指定配置即可.</span><br><span class="line"></span><br><span class="line">InfluxDB主要功能点:</span><br><span class="line">	1.基于时间序列,支持与时间有关的相关函数(比如最大,最小,求和等)</span><br><span class="line">	2.可度量性:可以实时对大量数据进行计算</span><br><span class="line">	3.基于事件:支持任意的事件数据</span><br></pre></td></tr></table></figure></div>

<p><strong>Granfana</strong></p>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">Granfana是一个开源的数据监控分析可视化平台,支持多种数据源配置(支持的数据源包括InfluxDB,MySQL,Elasticsearch,OpenTSDB,Graphite等)和丰富的插件及模板功能,支持图标权限控制和报警</span><br><span class="line"></span><br><span class="line">Granfana主要功能点:</span><br><span class="line">	1.灵活丰富的图形化选项</span><br><span class="line">	2.可以混合多种风格</span><br><span class="line">	3.支持白天和夜间模式</span><br><span class="line">	4.多个数据源</span><br></pre></td></tr></table></figure></div>



<p><strong><code>官方案例</code></strong></p>
<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">### docker-compose.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">grafana_data:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">influxdb:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">tutum/influxdb:0.9</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PRE_CREATE_DB=cadvisor</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8083:8083&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8086:8086&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/mydata/influxdb:/data</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">cadvisor:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">google/cadvisor</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">influxdb:influxsrv</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">-storage_driver=influxdb</span> <span class="string">-storage_driver_db=cadvisor</span> <span class="string">-storage_driver_host=influxsrv:8086</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/:/rootfs:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run:/var/run:rw</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/sys:/sys:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/lib/docker/:/var/lib/docker:ro</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">grafana:</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">&quot;104&quot;</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/grafana</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">influxdb:influxsrv</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3000:3000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">grafana_data:/var/lib/grafana</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">HTTP_USER=admin</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">HTTP_PASS=admin</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">INFLUXDB_HOST=influxsrv</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">INFLUXDB_PORT=8086</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">INFLUXDB_NAME=cadvisor</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">INFLUXDB_USER=root</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">INFLUXDB_PASS=root</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>





















]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL执行流程</title>
    <url>/GSSBlog/2023/10/30/2.Mysql%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="MySql基础架构"><a href="#MySql基础架构" class="headerlink" title="MySql基础架构"></a>MySql基础架构</h2><ul>
<li>连接器: 身份认证和权限相关(登录mysql的时候)</li>
<li>查询缓存: 执行查询语句的时候,会先查询缓存(Mysql 8.0版本后移除,因为这个功能不太实用)</li>
<li>分析器: 没有名字缓存的话,sql语句就会经过分析器,分析器说白了就是要先看你的sql语句要干啥,再检查你的sql是否正确</li>
<li>优化器: 按照mysql认为最优的方案去执行</li>
</ul>
<blockquote>
<p>MySql主要分为 Server 层和存储引擎层</p>
</blockquote>
<ul>
<li>server层: 主要包括连接器,查询缓存,分析器,优化器,执行器等.所有跨存储引擎的功能都在这一层实现,比如存储过程,触发器,视图,函数等,还有一个通用的日志模块binlog日志模块</li>
<li>存储引擎: 主要负责数据的存储和读取,采用可以替换的插件式架构,支持 InnoDB,MyISAM,Memory等多个存储引擎,其中InnoDB引擎有自有的日志模块 redolog模块. 现在最常用的存储引擎是InnoDB,它从MySql 5.5.5版本开始便作为默认存储引擎了</li>
</ul>
<h3 id="Server层基本组件介绍"><a href="#Server层基本组件介绍" class="headerlink" title="Server层基本组件介绍"></a>Server层基本组件介绍</h3><blockquote>
<h4 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h4></blockquote>
<p>主要负责用户登录数据库,进行用户的身份认证,包括校验账户密码,权限等操作.</p>
<p>如果用户账户密码已通过,连接器回到权限表中查询该用户的所有权限,之后在这个连接里权限逻辑判断都是会依赖此时读取到的权限数据,也就是说,后续只要这个连接不断开,即使管理员修改了该用户的权限,用户也不会受到影响</p>
<blockquote>
<h4 id="查询缓存-MySql-8-0版本后移除"><a href="#查询缓存-MySql-8-0版本后移除" class="headerlink" title="查询缓存(MySql 8.0版本后移除)"></a>查询缓存(MySql 8.0版本后移除)</h4></blockquote>
<p>连接建立后,执行查询语句的时候,会先查询缓存,MySql会先校验这个sql是否执行过,以key-value的形式缓存在内存中,key是查询预计,value是结果集,如果缓存key被命中,就会直接返回给客户端,如果没有命中,就会执行后续的操作,sql执行完后也会把结果缓存起来,方便下一次调用.当然,在执行缓存查询的时候还是会校验用户的权限,是否有该表的查询权限</p>
<p>MySQL 查询不建议使用缓存，因为查询缓存失效在实际业务场景中可能会非常频繁，假如你对一个表更新的话，这个表上的所有的查询缓存都会被清空。对于不经常更新的数据来说，使用缓存还是可以的。</p>
<p>所以，一般在大多数情况下我们都是不推荐去使用查询缓存的。</p>
<p>MySQL 8.0 版本后删除了缓存的功能，官方也是认为该功能在实际的应用场景比较少，所以干脆直接删掉了。</p>
<blockquote>
<h3 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h3></blockquote>
<p>MySql没有命中缓存,那么就会进入分析器,分析器主要用来分析SQL语句是来干什么的,分析器也会分为几步:</p>
<ol>
<li>词法分析,一条sql语句由多个字符串组成,首先要提取关键字,比如select,提出查询的表,提出字段名,提出查询条件等等,做完这些操作后,就会进入第二步</li>
<li>语法分析, 主要就是判断你输入的sql是否正确,是否符合MySql的语法</li>
</ol>
<p>完成这两步之后,MySql就准备开始执行了,但是如何执行,怎么执行是最好的结果呢,就需要优化器上场了</p>
<blockquote>
<h4 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h4></blockquote>
<p>优化器的作用就是它人为的最优的执行方案去执行,比如多个索引的时候该如何选择,多表查询的时候如何选择关联顺序等</p>
<blockquote>
<h4 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h4></blockquote>
<p>当选择了执行方案后,MySq就准备开始执行了,首先执行前会校验用户有没有权限,如果没有权限,就返回错误信息,如果有权限,就会去调用引擎的接口,返回接口执行的结果</p>
<h3 id="存储引擎层"><a href="#存储引擎层" class="headerlink" title="存储引擎层"></a>存储引擎层</h3><blockquote>
<p>主要负责数据的存储和提取，是基于插件的形式的架构，支持InnoDB，MyISAM等存储引擎；5.5.5后默认使用InnoDB作为默认的存储引擎。在创建表的时候不指定引擎，默认就是InnoDB，也可以通过<strong>engine&#x3D;memory</strong>来指定使用的存储引擎。</p>
</blockquote>
<blockquote>
<h4 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h4></blockquote>
<p>MySQL5.5.5版本后的默认存储引擎，具体特点如下：</p>
<ul>
<li>支持事务，在可重复读和读提交隔离级别下通过MVCC一致性视图解决了不可重复读问题，通过间隙锁解决了幻读的问题。</li>
<li>默认支持行锁，更小的锁力度支持更大的并发</li>
<li>InnoDB使用B+Tree来作为索引的数据结构，查询效率高，并在基础B+Tree上进行了优化，叶子节点通过指针相连接，提高范围查询效率</li>
<li>数据与主键索引放在一起，叶子节点会冗余非叶子节点的数据，在叶子节点上存储主键对应的整行数据</li>
</ul>
<blockquote>
<h4 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h4></blockquote>
<p>MySQL5.1版本前默认的存储引擎，具体特点如下：</p>
<ul>
<li>不支持事务，不具有ACID特性</li>
<li>update时通过表锁保证数据的安全性（写操作会阻塞 读和写，读操作不会阻塞读）</li>
<li>读数据速度快，占用资源更少，并且会记录表中记录行数</li>
<li>不支持外键约束</li>
</ul>
<h2 id="语句分析"><a href="#语句分析" class="headerlink" title="语句分析"></a>语句分析</h2><p>sql语句主要分两种.一种是查询,一种是更新(新增,编辑,删除)</p>
<blockquote>
<p>查询语句</p>
</blockquote>
<ul>
<li><p>对于查询语句,它的执行流程如下 </p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student A <span class="keyword">where</span> A.age<span class="operator">=</span><span class="string">&#x27;18&#x27;</span> <span class="keyword">and</span> A.name<span class="operator">=</span><span class="string">&#x27;张三&#x27;</span>;</span><br></pre></td></tr></table></figure></div>



<ul>
<li><p>先检查该语句是否有权限,如果没有权限,直接返回错误信息,如果有权限,在MySql8.0版本之前,会先检查缓存,以这条sql语句为key在内存中查询是否有结果,如果有直接返回,如果没有,则执行下一步</p>
</li>
<li><p>通过分析器进行词法分析,提取sql语句的关键元素,比如提取上面这个语句是select查询语句,提取需要查询的表名为 student,需要查询所有的列,然后会判断这个sql语句是否有语法错误,比如关键字是否正确等等,如果检查没有问题执行下一步</p>
</li>
<li><p>接下来就是优化器精选确定执行方案,上面的SQL语句,可以有两种执行方案,</p>
<ul>
<li>a.先查询student表中name为”张三”的学生,然后判断age是否为”18”</li>
<li>b.先找出student表中age为”18”的学生,再查询name是”张三”的学生</li>
</ul>
<p>那么优化器根据自己的优化算法进行选择执行效率最好的一个方案,那么确定了执行计划后就准备开始执行了</p>
</li>
<li><p>进行权限校验,如果没有权限就会返回错误信息,如果有权限就会调用数据库引擎接口,返回引擎的执行结果</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>更新语句</p>
</blockquote>
<ul>
<li><p>对于更新语句,他的执行流程如下</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> student A <span class="keyword">set</span> A.age<span class="operator">=</span><span class="string">&#x27;19&#x27;</span> <span class="keyword">where</span> A.name<span class="operator">=</span><span class="string">&#x27; 张三 &#x27;</span>;</span><br></pre></td></tr></table></figure></div>

<p>其实,更新语句也基本是按照查询语句的流程走,只不过在执行更新的时候哟啊记录日志,这就会引入日志模块了,MySql自带的日志模块是binlog(归档日志),所有的存储引擎都可以使用,我们常用的InnoDB引擎还自带了一个日志模块redolog(重做日志),我们就以InnoDB模式在探讨一下这个SQL语句的执行流程.流程如下</p>
<ul>
<li>先查询张三这一条数据,如果有缓存,也是会用到缓存</li>
<li>然后拿到查询的语句,把age值改为19,然后调用引擎API接口,写入这一条数据,InnoDB引擎把数据保存在内存中,同时记录到redo log,此时redo log进入prepare状态,然后告诉执行,执行完成了,随时可以提交</li>
<li>执行器收到通知后记录到binlog,然后调用引擎接口,提交redo log为提交状态</li>
<li>更新完成</li>
</ul>
<blockquote>
<p>为什么要用两个日志模块,用一个不可以嘛?</p>
</blockquote>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">这是因为最开始 MySQL 并没有 InnoDB 引擎（InnoDB 引擎是其他公司以插件形式插入 MySQL 的），MySQL 自带的引擎是 MyISAM，但是我们知道 redo log 是 InnoDB 引擎特有的，其他存储引擎都没有，这就导致会没有 crash-safe 的能力(crash-safe 的能力即使数据库发生异常重启，之前提交的记录都不会丢失)，binlog 日志只能用来归档。</span><br><span class="line"></span><br><span class="line">&gt; 先写 redo log 直接提交，然后写 binlog，假设写完 redo log 后，机器挂了，binlog 日志没有被写入，那么机器重启后，这台机器会通过 redo log 恢复数据，但是这个时候 bingog 并没有记录该数据，后续进行机器备份的时候，就会丢失这一条数据，同时主从同步也会丢失这一条数据。</span><br><span class="line"></span><br><span class="line">&gt; 先写 binlog，然后写 redo log，假设写完了 binlog，机器异常重启了，由于没有 redo log，本机是无法恢复这一条记录的，但是 binlog 又有记录，那么和上面同样的道理，就会产生数据不一致的情况。</span><br><span class="line"></span><br><span class="line">如果采用 redo log 两阶段提交的方式就不一样了，写完 binglog 后，然后再提交 redo log 就会防止出现上述的问题，从而保证了数据的一致性。那么问题来了，有没有一个极端的情况呢？假设 redo log 处于预提交状态，binglog 也已经写完了，这个时候发生了异常重启会怎么样呢？ 这个就要依赖于 MySQL 的处理机制了，MySQL 的处理过程如下：</span><br><span class="line">1.判断 redo log 是否完整，如果判断是完整的，就立即提交。</span><br><span class="line">2.如果 redo log 只是预提交但不是 commit 状态，这个时候就会去判断 binlog 是否完整，如果完整就提交 redo log, 不完整就回滚事务。</span><br></pre></td></tr></table></figure></div></li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
        <category>Introduction</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux配置JDK</title>
    <url>/GSSBlog/2023/10/30/2.linux%E4%B8%8B%E5%AE%89%E8%A3%85jdk/</url>
    <content><![CDATA[<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">在oracle官网上下载jdk linux版本 64位安装包</span><br></pre></td></tr></table></figure></div>

<h4 id="2-上传安装包到-opt-software目录下"><a href="#2-上传安装包到-opt-software目录下" class="headerlink" title="2.上传安装包到&#x2F;opt&#x2F;software目录下"></a>2.上传安装包到&#x2F;opt&#x2F;software目录下</h4><h4 id="3-解压安装包并移动到-opt-app-jdk目录下"><a href="#3-解压安装包并移动到-opt-app-jdk目录下" class="headerlink" title="3.解压安装包并移动到&#x2F;opt&#x2F;app&#x2F;jdk目录下"></a>3.解压安装包并移动到&#x2F;opt&#x2F;app&#x2F;jdk目录下</h4><h4 id="4-配置环境变量"><a href="#4-配置环境变量" class="headerlink" title="4.配置环境变量"></a>4.配置环境变量</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/opt/app/jdk/jdk1.8.0_291</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib:$CLASSPATH</span><br><span class="line">export JAVA_PATH=$&#123;JAVA_HOME&#125;/bin:$&#123;JRE_HOME&#125;/bin</span><br><span class="line">export PATH=$PATH:$&#123;JAVA_PATH&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="5-更新配置"><a href="#5-更新配置" class="headerlink" title="5.更新配置"></a>5.更新配置</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></div>

<h4 id="6-查看JAVA-HOME"><a href="#6-查看JAVA-HOME" class="headerlink" title="6.查看JAVA_HOME"></a>6.查看JAVA_HOME</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo $JAVA_HOME</span><br></pre></td></tr></table></figure></div>

<h5 id="7-查看PATH"><a href="#7-查看PATH" class="headerlink" title="7.查看PATH"></a>7.查看PATH</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo #PATH</span><br></pre></td></tr></table></figure></div>

<h4 id="8-测试"><a href="#8-测试" class="headerlink" title="8.测试"></a>8.测试</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker镜像</title>
    <url>/GSSBlog/2023/10/30/3.0docker%E9%95%9C%E5%83%8F%E5%88%86%E5%B1%82%E5%92%8Ccommit/</url>
    <content><![CDATA[<h2 id="dcoker镜像分层"><a href="#dcoker镜像分层" class="headerlink" title="dcoker镜像分层"></a>dcoker镜像分层</h2><blockquote>
<p>什么是镜像</p>
</blockquote>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">镜像,是一种轻量级,可执行的独立软件包,它包含运行某个软件所需的所有内容。我们把应用程序和配置依赖打包好形成一个可交付的运行环境（包括代码，运行时需要的库，环境变量和配置文件等），这个打包好的运行环境就是image镜像文件</span><br><span class="line"></span><br><span class="line">只有通过这个镜像文件才能生成Docker容器实例（类似Java中new出来一个对象）</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>分层的镜像</p>
</blockquote>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">pull一个镜像，在下载过程中，可以看到docker的镜像是在一层一层的下载</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>UnionFS（联合文件系统）</p>
</blockquote>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">UnionFS（联合文件系统）：Union文件系统是一种分层，轻量级并且高性的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下（unite several directories into a single virtual filesystem）。Union文件系统是Docker镜像的基础。</span><br><span class="line">镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像</span><br><span class="line"></span><br><span class="line">特性：一次可以同时加载多个文件系统，但从外面看来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>Docker镜像加载原理</p>
</blockquote>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">docker镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS</span><br><span class="line"></span><br><span class="line">bootfs（boot file system）主要包含bootloader和kernel，bootloader主要是引导加载kernel，Linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层是引导文件系统bootfs。这一层与我们典型的Linux/Unix系统是一样的，包含boot记载器和内核。当boot加载完成之后整个内核都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</span><br><span class="line"></span><br><span class="line">rootfs（root file system），在bootfs之上，包含的就是典型的Linux系统中的 /dev，/proc，/bin，/etc等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，CentOS等等</span><br><span class="line"></span><br><span class="line">对于一个精简的OS，rootfs可以很小，只需要包含最基本的命令，工具和程序库就可以了，因为底层直接用host的kernel，自己只需要提供rootfs就行了。由此可见，对于不同的Linux发行版，bootfs基本是一致的，rootfs会有差别，因此不同的发行版可以公用bootfs。</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>为什么docker镜像要采用这种分层结构呢?</p>
</blockquote>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">镜像分层的最大一个好处就是共享资源，方便复制迁移，就是为了复用。</span><br><span class="line"></span><br><span class="line">比如说，有多个镜像都从相同的base镜像构建而来，那么docker host 只需在磁盘上保存一份base镜像；同时内存中也只需加载一份base镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享</span><br></pre></td></tr></table></figure></div>

<p><strong>Docker镜像层都是只读的，容器层是可写的；当容器启动时，一个新的可写层被加载到镜像的顶部，这一层通常被称为“容器层”，“容器层”之下的都叫“镜像层”</strong></p>
<p><strong>所有对容器的改动，无论添加，删除，还是修改文件都只会发生在容器层中。只有容器层是可写的，容器层下面的所有镜像层都是只读的</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/docker%E9%95%9C%E5%83%8F%E5%88%86%E5%B1%82%E5%8E%9F%E7%90%86.jpg"
                     
                ></p>
<h2 id="docker镜像commit"><a href="#docker镜像commit" class="headerlink" title="docker镜像commit"></a>docker镜像commit</h2><blockquote>
<p>docker commit 提交容器副本使之成为一个新的镜像</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">docker commit [options] container [repository[:TAG]]</span><br><span class="line">OPTIONS:</span><br><span class="line">-m : Commit message</span><br><span class="line">-a : Author</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ul>
<li>案例：演示Ubuntu安装vim</li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 从hub上下载ubuntu镜像到本地并成功运行</span></span><br><span class="line">[root@CentOs7_001 ~]<span class="comment"># docker pull ubuntu</span></span><br><span class="line"></span><br><span class="line">[root@CentOs7_001 ~]<span class="comment"># docker run -it ba6acccedd29 /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 原始的默认ubuntu镜像是不带vim命令的</span></span><br><span class="line">root@41b2236cc927:/<span class="comment"># vim a.txt</span></span><br><span class="line">bash: vim: <span class="built_in">command</span> not found</span><br><span class="line"></span><br><span class="line"><span class="comment">## 安装vim(需要服务器可以联网)</span></span><br><span class="line"><span class="comment">### 使用命令</span></span><br><span class="line">apt-get update <span class="comment"># 更新包管理工具</span></span><br><span class="line">apt-get install -y vim <span class="comment"># 安装vim</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 安装,使用后;commit新镜像</span></span><br><span class="line">[root@CentOs7_001 ubuntu]<span class="comment"># docker commit -m=&quot;add a vim cmd&quot; -a=&quot;igsshan&quot; 41b2236cc927 igsshan/ubuntu:0.0.2</span></span><br><span class="line"></span><br><span class="line">[root@CentOs7_001 ubuntu]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY           TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">igsshan/ubuntu       0.0.2     2a0da7b9e07a   5 seconds ago   184MB</span><br><span class="line">igsshan/ubuntu       0.0.1     df481e243482   6 hours ago     72.8MB</span><br><span class="line">ubuntu               latest    ba6acccedd29   19 months ago   72.8MB</span><br><span class="line"></span><br><span class="line">[root@CentOs7_001 ubuntu]<span class="comment"># docker run -it 2a0da7b9e07a /bin/bash</span></span><br><span class="line">root@52ce2750292b:/<span class="comment"># vim a.txt</span></span><br><span class="line">root@52ce2750292b:/<span class="comment"># cat a.txt</span></span><br><span class="line">this is ubuntu system ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">update file now ...</span><br><span class="line"></span><br><span class="line">[root@CentOs7_001 ubuntu]<span class="comment"># docker run -it ba6acccedd29 /bin/bash</span></span><br><span class="line">root@30e055106c2b:/<span class="comment"># vim a.txt</span></span><br><span class="line">bash: vim: <span class="built_in">command</span> not found</span><br><span class="line"><span class="comment">### 原始镜像重启新的容器,vim还是没有的</span></span><br><span class="line"><span class="comment">### 自己commit构建的镜像,新增加了vim功能,可以成功使用</span></span><br></pre></td></tr></table></figure></div>

<p><strong><code>总结</code></strong></p>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">Docker中的镜像分层，支持通过扩展现有镜像，创建新的镜像。类似于Java继承于一个base基础类，自己再按需扩展</span><br><span class="line">新镜像就是从base镜像一层一层叠加生成的，每安装一个软件，就在现有镜像的基础上增加一层</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/docker%E9%95%9C%E5%83%8F%E5%88%86%E5%B1%82%E6%80%BB%E7%BB%93.jpg"
                     
                ></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Vagrant网络配置</title>
    <url>/GSSBlog/2023/10/30/3.vagrant-configure/</url>
    <content><![CDATA[<blockquote>
<p>修改网络 连接外网</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入到文件配置目录</span></span><br><span class="line"><span class="built_in">cd</span> /etc/sysconfig/network-scripts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 ip 在那个网卡</span></span><br><span class="line">ip addr </span><br><span class="line">结果: </span><br><span class="line">eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 08:00:27:10:b5:a2 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.56.101/24 brd 192.168.56.255 scope global noprefixroute eth1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::a00:27ff:fe10:b5a2/64 scope <span class="built_in">link</span> </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改eth1 网卡文件</span></span><br><span class="line">vi ifcfg-eth1</span><br><span class="line">修改内容:</span><br><span class="line">GETWAY=192.168.56.1</span><br><span class="line">DNS1=114.114.114.114</span><br><span class="line">DNS2=8.8.8.8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存重启</span></span><br><span class="line">esc</span><br><span class="line">:wq</span><br><span class="line">service network restart</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>设置虚拟机 yum源</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 备份 yum源</span></span><br><span class="line"><span class="built_in">mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用新 yum 源</span></span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.163.com/.help/CentOS7-Base-163.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成缓存</span></span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>使用 yum 源</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 wget</span></span><br><span class="line">yum install -y wget</span><br><span class="line"><span class="comment"># -y 就是全是确认</span></span><br></pre></td></tr></table></figure></div>

<h2 id="vagrantbox安装centos7镜像-配置虚拟网络"><a href="#vagrantbox安装centos7镜像-配置虚拟网络" class="headerlink" title="vagrantbox安装centos7镜像,配置虚拟网络"></a>vagrantbox安装centos7镜像,配置虚拟网络</h2><h3 id="virtualbox下载源"><a href="#virtualbox下载源" class="headerlink" title="virtualbox下载源"></a>virtualbox下载源</h3><blockquote>
<p><a class="link"   href="https://www.virtualbox.org/wiki/Downloads" >https://www.virtualbox.org/wiki/Downloads <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h3 id="centos7下载源"><a href="#centos7下载源" class="headerlink" title="centos7下载源"></a>centos7下载源</h3><blockquote>
<p>linux源: <a class="link"   href="http://isoredirect.centos.org/centos/7/isos/x86_64/" >http://isoredirect.centos.org/centos/7/isos/x86_64/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>阿里服务源: <a class="link"   href="http://mirrors.aliyun.com/centos/7/isos/x86_64/" >http://mirrors.aliyun.com/centos/7/isos/x86_64/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h3 id="安装centos7"><a href="#安装centos7" class="headerlink" title="安装centos7"></a>安装centos7</h3><ul>
<li><p>配置网络</p>
<ul>
<li><h5 id="配置NAT网络"><a href="#配置NAT网络" class="headerlink" title="配置NAT网络"></a>配置NAT网络</h5><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/sysconfig/network-scripts/</span><br><span class="line">vi ifcfg-enp0s3</span><br><span class="line"><span class="comment"># 将ONBOOT=no改为yes，再添加BOOTPROTO=dhcp(没有该项的话)，</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存退出，重启网络</span></span><br><span class="line">service network restart</span><br><span class="line"><span class="comment">#ping百度</span></span><br><span class="line">ping www.baidu.com</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
</li>
<li><h5 id="配置host-only网络"><a href="#配置host-only网络" class="headerlink" title="配置host-only网络"></a>配置host-only网络</h5><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">vi ifcfg-enp0s8</span><br><span class="line"><span class="comment">#修改BOOTPROTO=static,ONBOOT=yes.</span></span><br><span class="line"><span class="comment">#添加NETMASK=255.255.255.0。</span></span><br><span class="line"><span class="comment">#修改HWADR为host-only网卡的MAC地址。</span></span><br><span class="line"><span class="comment">#添加IPADDR，（192.168.56.x）x可以自己指定，用于主机连接虚拟机使用。</span></span><br><span class="line"><span class="comment">#修改UUID（只要不和一张网卡一样就行）。</span></span><br><span class="line">service network restart</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Vagrant</category>
      </categories>
      <tags>
        <tag>Vagrant</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker镜像发布</title>
    <url>/GSSBlog/2023/10/30/4.0docker%E9%95%9C%E5%83%8F%E5%8F%91%E5%B8%83/</url>
    <content><![CDATA[<blockquote>
<p>本地镜像发布流程</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/docker%E9%95%9C%E5%83%8F%E5%8F%91%E5%B8%83%E6%B5%81%E7%A8%8B.jpg"
                     
                ></p>
<h2 id="docker镜像生成"><a href="#docker镜像生成" class="headerlink" title="docker镜像生成"></a>docker镜像生成</h2><ul>
<li>docker commit 提交一个镜像(<a href="/2023/10/19/3-0docker%E9%95%9C%E5%83%8F%E5%88%86%E5%B1%82%E5%92%8Ccommit/index.html">看上一节</a>)</li>
<li>dockerFile 构建新的镜像(<a href="/2023/10/19/10-docker%E5%8F%91%E5%B8%83%E6%9C%8D%E5%8A%A1%E9%80%9A%E8%BF%87Dockerfile%E9%83%A8%E7%BD%B2/index.html">后续更新</a>)</li>
</ul>
<h2 id="阿里云公有云仓库"><a href="#阿里云公有云仓库" class="headerlink" title="阿里云公有云仓库"></a>阿里云公有云仓库</h2><h3 id="docker镜像推送到阿里云"><a href="#docker镜像推送到阿里云" class="headerlink" title="docker镜像推送到阿里云"></a>docker镜像推送到阿里云</h3><ul>
<li><strong>案例</strong>：演示制作的本地ubuntu镜像推送到阿里云</li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 素材原型</span></span><br><span class="line">[root@CentOs7_001 ubuntu]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY           TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">igsshan/ubuntu       0.0.2     2a0da7b9e07a   41 minutes ago   184MB</span><br><span class="line">igsshan/ubuntu       0.0.1     df481e243482   7 hours ago      72.8MB</span><br><span class="line">ubuntu               latest    ba6acccedd29   19 months ago    72.8MB</span><br><span class="line"></span><br><span class="line"><span class="comment">## 配置阿里云平台</span></span><br><span class="line"><span class="comment">### 配置流程</span></span><br><span class="line">01.登录阿里云平台(https://www.aliyun.com) ---&gt; 02.选择&lt;控制台&gt; ---&gt; 03.选择&lt;镜像容器服务&gt; ---&gt; 04.点击&lt;实例列表&gt; ---&gt; 05.点击&lt;个人实例&gt; ---&gt; 06.点击&lt;仓库管理-命名空间&gt; ---&gt; 07.创建新的命名空间&lt;最好选择公开&gt; ---&gt; 08.点击&lt;镜像仓库&gt; ---&gt; 09.创建新的镜像仓库挂载在刚刚新建的命名空间下&lt;最好选择公开&gt; ---&gt; 10.完成</span><br><span class="line"><span class="comment">#### 配置完成后生成脚本可以一键使用;包含登录阿里云,构建tag,推送镜像和拉取镜像</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 将镜像推送到阿里云</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 登录阿里云</span></span><br><span class="line">[root@CentOs7_001 ubuntu]<span class="comment"># docker login --username=我叫龚小山 registry.cn-hangzhou.aliyuncs.com</span></span><br><span class="line">Password:</span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/<span class="comment">#credentials-store</span></span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br><span class="line"></span><br><span class="line"><span class="comment">### 通过docker tag 命令重构镜像</span></span><br><span class="line">[root@CentOs7_001 ubuntu]<span class="comment"># docker tag 2a0da7b9e07a registry.cn-hangzhou.aliyuncs.com/igsshansz/iubuntu:0.0.2</span></span><br><span class="line">[root@CentOs7_001 ubuntu]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY                                            TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">igsshan/ubuntu                                        0.0.2     2a0da7b9e07a   54 minutes ago   184MB</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/igsshansz/iubuntu   0.0.2     2a0da7b9e07a   54 minutes ago   184MB</span><br><span class="line">igsshan/ubuntu                                        0.0.1     df481e243482   7 hours ago      72.8MB</span><br><span class="line">ubuntu                                                latest    ba6acccedd29   19 months ago    72.8MB</span><br><span class="line"></span><br><span class="line"><span class="comment">### 推送重构的镜像到阿里云</span></span><br><span class="line">[root@CentOs7_001 ubuntu]<span class="comment"># docker push registry.cn-hangzhou.aliyuncs.com/igsshansz/iubuntu:0.0.2</span></span><br><span class="line">The push refers to repository [registry.cn-hangzhou.aliyuncs.com/igsshansz/iubuntu]</span><br><span class="line">6b6477d03f57: Pushed</span><br><span class="line">9f54eef41275: Pushed</span><br><span class="line">0.0.2: digest: sha256:4761058acfbdebfc82344482062035188e3cd904740e546a6be96f5181957b95 size: 741</span><br><span class="line">[root@CentOs7_001 ubuntu]<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>





<h3 id="docker镜像拉取到本地"><a href="#docker镜像拉取到本地" class="headerlink" title="docker镜像拉取到本地"></a>docker镜像拉取到本地</h3><blockquote>
<p>使用脚本命令快捷拉取到本地</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 脚本</span></span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/igsshansz/iubuntu:[镜像版本号]</span><br><span class="line"></span><br><span class="line"><span class="comment">## 实例</span></span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/igsshansz/iubuntu:0.0.2</span><br></pre></td></tr></table></figure></div>



<h2 id="dockerRegistry私有云仓库"><a href="#dockerRegistry私有云仓库" class="headerlink" title="dockerRegistry私有云仓库"></a>dockerRegistry私有云仓库</h2><blockquote>
<p> 官方Docker Hub地址：<a class="link"   href="https://hub.docker.com/%EF%BC%8C%E4%B8%AD%E5%9B%BD%E5%A4%A7%E9%99%86%E8%AE%BF%E9%97%AE%E5%A4%AA%E6%85%A2%E4%BA%86%E4%B8%94%E5%87%86%E5%A4%87%E8%A2%AB%E9%98%BF%E9%87%8C%E4%BA%91%E5%8F%96%E4%BB%A3%E7%9A%84%E8%B6%8B%E5%8A%BF%EF%BC%8C%E4%B8%8D%E5%A4%AA%E4%B8%BB%E6%B5%81%E3%80%82" >https://hub.docker.com/，中国大陆访问太慢了且准备被阿里云取代的趋势，不太主流。 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p> Dockerhub、阿里云这样的公共镜像仓库可能不太方便，涉及机密的公司不可能提供镜像给公网，所以需要创建一个本地私人仓库供给团队使用，基于公司内部项目构建镜像。</p>
<p> Docker Registry是官方提供的工具，可以用于构建私有镜像仓库</p>
</blockquote>
<ul>
<li><strong>案例</strong>：演示制作本地ubuntu镜像推送到私有云</li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 素材原型</span></span><br><span class="line">[root@CentOs7_001 ubuntu]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY           TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">igsshan/ubuntu       0.0.2     2a0da7b9e07a   41 minutes ago   184MB</span><br><span class="line">igsshan/ubuntu       0.0.1     df481e243482   7 hours ago      72.8MB</span><br><span class="line">ubuntu               latest    ba6acccedd29   19 months ago    72.8MB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 拉取registry镜像</span></span><br><span class="line">docker pull registry</span><br><span class="line"></span><br><span class="line"><span class="comment">## 启动registry镜像</span></span><br><span class="line">docker run -d -p 5000:5000 --name=<span class="string">&quot;registry&quot;</span> -v /mydata/docker/registry.:/tmp/registry --privileged=<span class="literal">true</span> registry</span><br><span class="line">-d : 后台启动</span><br><span class="line">-p : 端口映射</span><br><span class="line">-v : 容器卷挂载到本地</span><br><span class="line"></span><br><span class="line"><span class="comment">### 启动命令</span></span><br><span class="line">[root@CentOs7_001 registry]<span class="comment"># docker run -d -p 5000:5000 --name=&quot;registry&quot; -v /mydata/docker/registry/:/tmp/registry --privileged=true registry</span></span><br><span class="line">ec2ec8e4ef07cbe0af3ce3d81b517790ec04091c2ec6d9b7c1f154bc5a7f7427</span><br><span class="line">[root@CentOs7_001 registry]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                COMMAND                  CREATED         STATUS         PORTS                                       NAMES</span><br><span class="line">ec2ec8e4ef07   registry             <span class="string">&quot;/entrypoint.sh /etc…&quot;</span>   5 seconds ago   Up 3 seconds   0.0.0.0:5000-&gt;5000/tcp, :::5000-&gt;5000/tcp   registry</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看私服上有什么镜像</span></span><br><span class="line">curl -X GET http://192.168.33.101:5000/v2/_catalog</span><br><span class="line">[root@CentOs7_001 registry]<span class="comment"># curl -X GET HTTP://192.168.33.101:5000/v2/_catalog</span></span><br><span class="line">&#123;<span class="string">&quot;repositories&quot;</span>:[]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 修改配置文件使之支持http</span></span><br><span class="line"></span><br><span class="line">[root@CentOs7_001 registry]<span class="comment"># cat /etc/docker/daemon.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://lljn1hsm.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">[root@CentOs7_001 registry]<span class="comment"># vi /etc/docker/daemon.json</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://lljn1hsm.mirror.aliyuncs.com&quot;</span>],</span><br><span class="line">  <span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;192.168.33.101:5000&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">### 注意: 修改配置后重启docker使之生效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 制作镜像</span></span><br><span class="line"><span class="comment">### 制作可以使用ifconfig网络配置的本地镜像</span></span><br><span class="line"><span class="comment">#### 启动一个容器</span></span><br><span class="line">docker run -it nbuntu /bin/bash</span><br><span class="line"><span class="comment">#### 进入容器中,使用ifconfig命令</span></span><br><span class="line">root@5e28e2566dfe:/<span class="comment"># ifconfig</span></span><br><span class="line">bash: ipconfig: <span class="built_in">command</span> not found</span><br><span class="line"><span class="comment">#### 更新包管理工具</span></span><br><span class="line">apt-get update</span><br><span class="line"><span class="comment">#### 下载net-tools工具</span></span><br><span class="line">apt-get install -y net-tools</span><br><span class="line"><span class="comment">#### 验证下载是否成功</span></span><br><span class="line">root@5e28e2566dfe:/<span class="comment"># ifconfig</span></span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.0.3  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class="line">        ether 02:42:ac:11:00:03  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 4396  bytes 27015468 (27.0 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 2826  bytes 157654 (157.6 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"><span class="comment">#### 退出容器,commit镜像</span></span><br><span class="line">[root@CentOs7_001 registry]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                COMMAND                  CREATED         STATUS          PORTS                                       NAMES</span><br><span class="line">5e28e2566dfe   ubuntu               <span class="string">&quot;/bin/bash&quot;</span>              2 minutes ago   Up 2 minutes                                                gifted_varahamihira</span><br><span class="line">ec2ec8e4ef07   registry             <span class="string">&quot;/entrypoint.sh /etc…&quot;</span>   4 minutes ago   Up 4 minutes    0.0.0.0:5000-&gt;5000/tcp, :::5000-&gt;5000/tcp   registry</span><br><span class="line">[root@CentOs7_001 registry]<span class="comment"># docker commit -m=&quot;add net-tools command&quot; -a=&quot;igsshan&quot; 5e28e2566dfe igsshan/ubuntu:0.0.3</span></span><br><span class="line">sha256:b5f53944390b484b1d0ac66344329873b870b18c7194b9df3423fceb44781625</span><br><span class="line"><span class="comment">#### 制作tag</span></span><br><span class="line">[root@CentOs7_001 registry]<span class="comment"># docker tag b5f53944390b 192.168.33.101:5000/ubuntu:0.0.3</span></span><br><span class="line">[root@CentOs7_001 registry]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY                                            TAG       IMAGE ID       CREATED              SIZE</span><br><span class="line">192.168.33.101:5000/ubuntu                            0.0.3     b5f53944390b   About a minute ago   117MB</span><br><span class="line">igsshan/ubuntu                                        0.0.3     b5f53944390b   About a minute ago   117MB</span><br><span class="line"><span class="comment">#### 推送到私服</span></span><br><span class="line">[root@CentOs7_001 registry]<span class="comment"># docker push 192.168.33.101:5000/ubuntu:0.0.3</span></span><br><span class="line">The push refers to repository [192.168.33.101:5000/ubuntu]</span><br><span class="line">149dc2112ad9: Pushed</span><br><span class="line">9f54eef41275: Pushed</span><br><span class="line">0.0.3: digest: sha256:e880d5223e052ede7b5dbd6d76b364188d87080321275d7a9e7bf61a820340b2 size: 741</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 查看私服内容</span></span><br><span class="line">[root@CentOs7_001 registry]<span class="comment"># curl -X GET http://192.168.33.101:5000/v2/_catalog</span></span><br><span class="line">&#123;<span class="string">&quot;repositories&quot;</span>:[<span class="string">&quot;ubuntu&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#### pull到本地</span></span><br><span class="line">[root@CentOs7_001 registry]<span class="comment"># docker pull 192.168.33.101:5000/ubuntu:0.0.3</span></span><br><span class="line">0.0.3: Pulling from ubuntu</span><br><span class="line">7b1a6ab2e44d: Already exists</span><br><span class="line">f746d0431684: Pull complete</span><br><span class="line">Digest: sha256:e880d5223e052ede7b5dbd6d76b364188d87080321275d7a9e7bf61a820340b2</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> 192.168.33.101:5000/ubuntu:0.0.3</span><br><span class="line">192.168.33.101:5000/ubuntu:0.0.3</span><br><span class="line">[root@CentOs7_001 registry]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY                                            TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">192.168.33.101:5000/ubuntu                            0.0.3     b5f53944390b   19 minutes ago   117MB</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 启动容器,查看差异</span></span><br><span class="line">[root@CentOs7_001 registry]<span class="comment"># docker run -it b5f53944390b /bin/bash</span></span><br><span class="line">root@26a58e5a4fff:/<span class="comment">#</span></span><br><span class="line">root@26a58e5a4fff:/<span class="comment"># ifconfig</span></span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.0.4  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class="line">        ether 02:42:ac:11:00:04  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 8  bytes 656 (656.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>如果不修改配置文件,默认不支持http的,推送镜像到私服报错&lt;Error response from daemon: Get “<a class="link"   href="https://192.168.33.101:5000/v2/" >https://192.168.33.101:5000/v2/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>“: http: server gave HTTP response to HTTPS client&gt;</strong></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx入门介绍</title>
    <url>/GSSBlog/2023/10/30/4.nginx%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<blockquote>
<p>Nginx是一款高性能的http 服务器&#x2F;反向代理服务器及电子邮件（IMAP&#x2F;POP3）代理服务器。由俄罗斯的程序设计师Igor Sysoev所开发，官方测试nginx能够支撑5万并发链接(tomcat 500)，并且cpu、内存等资源消耗却非常低，运行非常稳定。</p>
</blockquote>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>　　&gt;1、http服务器。Nginx是一个http服务可以独立提供http服务。可以做网页静态服务器。</p>
<blockquote>
<p>2、虚拟主机。可以实现在一台服务器虚拟出多个网站。例如个人网站使用的虚拟主机。</p>
</blockquote>
<p>　　&gt;3、反向代理，负载均衡。当网站的访问量达到一定程度后，单台服务器不能满足用户的请求时，需要用多台服务器集群可以使用nginx做反向代理。并且多台服务器可以平均分担负载，不会因为某台服务器负载高宕机而某台服务器闲置的情况。</p>
<h3 id="什么是反向代理"><a href="#什么是反向代理" class="headerlink" title="什么是反向代理"></a>什么是反向代理</h3><p>正向代理</p>
<p>​		正向代理类似一个跳板机，代理访问外部资源。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://img2018.cnblogs.com/i-beta/1689498/201912/1689498-20191220162728412-1034366094.png"
                      alt="img"
                ></p>
<p>反向代理（Reverse Proxy）</p>
<p>​		实际运行方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://img2018.cnblogs.com/i-beta/1689498/201912/1689498-20191220162807128-1607860317.png"
                      alt="img"
                ></p>
<h2 id="Nginx基本配置与参数说明"><a href="#Nginx基本配置与参数说明" class="headerlink" title="Nginx基本配置与参数说明"></a>Nginx基本配置与参数说明</h2><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#运行用户</span><br><span class="line">user nobody;</span><br><span class="line">#启动进程,通常设置成和cpu的数量相等</span><br><span class="line">worker_processes  1;</span><br><span class="line"> </span><br><span class="line">#全局错误日志及PID文件</span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"> </span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"> </span><br><span class="line">#工作模式及连接数上限</span><br><span class="line">events &#123;</span><br><span class="line">    #epoll是多路复用IO(I/O Multiplexing)中的一种方式,</span><br><span class="line">    #仅用于linux2.6以上内核,可以大大提高nginx的性能</span><br><span class="line">    use   epoll; </span><br><span class="line"> </span><br><span class="line">    #单个后台worker process进程的最大并发链接数    </span><br><span class="line">    worker_connections  1024;</span><br><span class="line"> </span><br><span class="line">    # 并发总数是 worker_processes 和 worker_connections 的乘积</span><br><span class="line">    # 即 max_clients = worker_processes * worker_connections</span><br><span class="line">    # 在设置了反向代理的情况下，max_clients = worker_processes * worker_connections / 4  为什么</span><br><span class="line">    # 为什么上面反向代理要除以4，应该说是一个经验值</span><br><span class="line">    # 根据以上条件，正常情况下的Nginx Server可以应付的最大连接数为：4 * 8000 = 32000</span><br><span class="line">    # worker_connections 值的设置跟物理内存大小有关</span><br><span class="line">    # 因为并发受IO约束，max_clients的值须小于系统可以打开的最大文件数</span><br><span class="line">    # 而系统可以打开的最大文件数和内存大小成正比，一般1GB内存的机器上可以打开的文件数大约是10万左右</span><br><span class="line">    # 我们来看看360M内存的VPS可以打开的文件句柄数是多少：</span><br><span class="line">    # $ cat /proc/sys/fs/file-max</span><br><span class="line">    # 输出 34336</span><br><span class="line">    # 32000 &lt; 34336，即并发连接总数小于系统可以打开的文件句柄总数，这样就在操作系统可以承受的范围之内</span><br><span class="line">    # 所以，worker_connections 的值需根据 worker_processes 进程数目和系统可以打开的最大文件总数进行适当地进行设置</span><br><span class="line">    # 使得并发总数小于操作系统可以打开的最大文件数目</span><br><span class="line">    # 其实质也就是根据主机的物理CPU和内存进行配置</span><br><span class="line">    # 当然，理论上的并发总数可能会和实际有所偏差，因为主机还有其他的工作进程需要消耗系统资源。</span><br><span class="line">    # ulimit -SHn 65535</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">http &#123;</span><br><span class="line">    #设定mime类型,类型由mime.type文件定义</span><br><span class="line">    include    mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    #设定日志格式</span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"> </span><br><span class="line">    access_log  logs/access.log  main;</span><br><span class="line"> </span><br><span class="line">    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，</span><br><span class="line">    #对于普通应用，必须设为 on,</span><br><span class="line">    #如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，</span><br><span class="line">    #以平衡磁盘与网络I/O处理速度，降低系统的uptime.</span><br><span class="line">    sendfile     on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"> </span><br><span class="line">    #连接超时时间</span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    tcp_nodelay     on;</span><br><span class="line"> </span><br><span class="line">    #开启gzip压缩</span><br><span class="line">    gzip  on;</span><br><span class="line">    gzip_disable &quot;MSIE [1-6].&quot;;</span><br><span class="line"> </span><br><span class="line">    #设定请求缓冲</span><br><span class="line">    client_header_buffer_size    128k;</span><br><span class="line">    large_client_header_buffers  4 128k;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    #设定虚拟主机配置</span><br><span class="line">    server &#123;</span><br><span class="line">        #侦听80端口</span><br><span class="line">        listen    80;</span><br><span class="line">        #定义使用 www.nginx.cn访问</span><br><span class="line">        server_name  www.nginx.cn;</span><br><span class="line"> </span><br><span class="line">        #定义服务器的默认网站根目录位置</span><br><span class="line">        root html;</span><br><span class="line"> </span><br><span class="line">        #设定本虚拟主机的访问日志</span><br><span class="line">        access_log  logs/nginx.access.log  main;</span><br><span class="line"> </span><br><span class="line">        #默认请求</span><br><span class="line">        location / &#123;</span><br><span class="line">            </span><br><span class="line">            #定义首页索引文件的名称</span><br><span class="line">            index index.php index.html index.htm;   </span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        # 定义错误提示页面</span><br><span class="line">        error_page   500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        #静态文件，nginx自己处理</span><br><span class="line">        location ~ ^/(images|javascript|js|css|flash|media|static)/ &#123;</span><br><span class="line">            </span><br><span class="line">            #过期30天，静态文件不怎么更新，过期可以设大一点，</span><br><span class="line">            #如果频繁更新，则可以设置得小一点。</span><br><span class="line">            expires 30d;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        #PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置.</span><br><span class="line">        location ~ .php$ &#123;</span><br><span class="line">            fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">            fastcgi_index index.php;</span><br><span class="line">            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">            include fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        #禁止访问 .htxxx 文件</span><br><span class="line">            location ~ /.ht &#123;</span><br><span class="line">            deny all;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker容器数据卷</title>
    <url>/GSSBlog/2023/10/30/5.0docker%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/</url>
    <content><![CDATA[<p><strong>docker容器数据卷是什么</strong></p>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">卷,就是目录或者文件,存在于一个或多个容器中,由docker挂载到容器,但不属于联合文件系统,因此能够绕过Union File System提供一些用于持续或共享数据的特性</span><br><span class="line"></span><br><span class="line">卷的设计目的就是数据的持久化,完全独立于容器的生命周期,因此docker不会在容器删除时删除其挂载的数据卷</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><strong>docker容器卷</strong>有点类似于Redis里面的rdb和aof文件;将docker容器内的数据保存进宿主机的磁盘中</p>
</blockquote>
<ul>
<li><strong>运行一个带有容器卷村粗功能的容器实例</strong></li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -it --privileged=<span class="literal">true</span> -v /宿主机绝对路径目录:/容器内目录 镜像名</span><br></pre></td></tr></table></figure></div>



<p><strong>–privileged&#x3D;true</strong></p>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">docker挂载主机目录访问如果出现&quot;cannot open directory.:Permission denied&quot;</span><br><span class="line">解决方法: 在挂载目录后多加一个 --privileged=true 参数即可</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果是CentOS7安全模块会比之前系统版本更强,不安全的会先禁止,所以目录挂载的情况被默认为不安全的行为,在SELinux里面挂载目录被禁止掉了,如果要开启,我们一般使用&quot;--privileged=true&quot;命令,扩大容器的权限解决挂载目录没有权限的问题,也即使用该参数;container内的root拥有真正的root权限,否则,container内的root只是外部的一个普通用户权限</span><br></pre></td></tr></table></figure></div>



<p><strong>docker容器数据卷能干什么</strong></p>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">将应用与运行的环境打包镜像,run后形成容器实例运行,但是我们对数据的要求希望是持久化的</span><br><span class="line"></span><br><span class="line">Docker容器产生的数据,如果不备份,那么当容器实例删除后,容器内的数据自然也就没有了;为了能保存在docker容器中的数据,我们使用卷</span><br><span class="line"></span><br><span class="line">特点:</span><br><span class="line">1. 数据卷可在容器之间共享或重用数据</span><br><span class="line">2. 卷中的更改可以直接实时生效,快捷-方便</span><br><span class="line">3. 数据卷中的更改不会包含在镜像的更新中</span><br><span class="line">4. 数据卷的生命周期一直持续到没有容器使用它为止</span><br></pre></td></tr></table></figure></div>



<ul>
<li><strong>案例</strong></li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 宿主&amp;容器之间映射添加数据容器卷</span></span><br><span class="line"><span class="comment">### 公式</span></span><br><span class="line">docker run -it --privileged=<span class="literal">true</span> -v /宿主机绝对路径目录:/容器内目录 镜像名</span><br><span class="line"></span><br><span class="line">docker run -it --name myu3 --privileged=<span class="literal">true</span> -v /mydata/docker/ubuntu/hostData/:/tmp/ubuntuData ubuntu /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看容器是否挂载成功</span></span><br><span class="line">docker inspect 容器ID</span><br><span class="line"></span><br><span class="line"> <span class="string">&quot;Mounts&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/mydata/docker/ubuntu/hostData&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;/tmp/ubuntuData&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;rprivate&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h2 id="容器数据卷读写规则映射添加"><a href="#容器数据卷读写规则映射添加" class="headerlink" title="容器数据卷读写规则映射添加"></a>容器数据卷读写规则映射添加</h2><ul>
<li><strong><code>读写</code></strong> : rw</li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 启动命令</span></span><br><span class="line">docker run -it --privileged=<span class="literal">true</span> -v /mydocker/u/:/tmp:rw ubuntu</span><br><span class="line"></span><br><span class="line">rw = <span class="built_in">read</span> + write</span><br></pre></td></tr></table></figure></div>



<ul>
<li><strong><code>只读</code></strong> : ro</li>
</ul>
<blockquote>
<p>容器实例内部被限制,只能读取,不能写入</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 启动命令</span></span><br><span class="line">docker run -it --privileged=<span class="literal">true</span> -v /mydocker/u:/tmp:ro ubuntu</span><br><span class="line"></span><br><span class="line">ro = <span class="built_in">read</span> + only</span><br><span class="line"></span><br><span class="line"><span class="comment">### 此时容器只能读取不能写,如果宿主机写入内容,可以同步给容器内,容器可以读取到</span></span><br></pre></td></tr></table></figure></div>



<h2 id="容器数据卷的继承和共享"><a href="#容器数据卷的继承和共享" class="headerlink" title="容器数据卷的继承和共享"></a>容器数据卷的继承和共享</h2><ul>
<li><strong>案例</strong> : 实现多容器的数据卷继承和共享</li>
</ul>
<p><strong>容器一</strong> : 完成和宿主机的映射</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -it --privileged=<span class="literal">true</span> -v /mydocker/u:/tmp --name=<span class="string">&quot;u1&quot;</span> ubuntu</span><br></pre></td></tr></table></figure></div>



<p><strong>容器二</strong> : 继承容器1的卷规则</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 公式</span></span><br><span class="line">docker run -it --privileged=<span class="literal">true</span> --volumes-from 父类 --name u2 ubuntu</span><br><span class="line"></span><br><span class="line"><span class="comment">## 启动命令</span></span><br><span class="line">docker run -it --privileged=<span class="literal">true</span> --volumes-from u1 --name u2 ubuntu</span><br></pre></td></tr></table></figure></div>



<p><strong>案例结果</strong></p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 容器启动</span></span><br><span class="line"></span><br><span class="line">[root@CentOS7_001 hostData]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE          COMMAND       CREATED              STATUS              PORTS     NAMES</span><br><span class="line">91f5fd074ff4   ubuntu         <span class="string">&quot;/bin/bash&quot;</span>   About a minute ago   Up About a minute             u2</span><br><span class="line">3be843732232   ba6acccedd29   <span class="string">&quot;/bin/bash&quot;</span>   About an hour ago    Up About an hour              u1</span><br><span class="line">[root@CentOS7_001 hostData]<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## u1容器内</span></span><br><span class="line">root@3be843732232:/<span class="comment"># cd /tmp/ubuntuData/</span></span><br><span class="line">root@3be843732232:/tmp/ubuntuData<span class="comment"># ll</span></span><br><span class="line">total 0</span><br><span class="line">root@3be843732232:/tmp/ubuntuData<span class="comment"># touch containerIn.txt</span></span><br><span class="line">root@3be843732232:/tmp/ubuntuData<span class="comment"># ll</span></span><br><span class="line">total 4</span><br><span class="line">drwxr-xr-x. 2 root root 50 May 29 02:37 ./</span><br><span class="line">drwxrwxrwt. 1 root root 24 May 29 02:34 ../</span><br><span class="line">-rw-r--r--. 1 root root  0 May 29 02:36 containerIn.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## u2容器内</span></span><br><span class="line">root@91f5fd074ff4:/<span class="comment"># cd /tmp/ubuntuData/</span></span><br><span class="line">root@91f5fd074ff4:/tmp/ubuntuData<span class="comment"># ll</span></span><br><span class="line">total 4</span><br><span class="line">drwxr-xr-x. 2 root root 50 May 29 02:37 ./</span><br><span class="line">drwxrwxrwt. 1 root root 24 May 29 03:36 ../</span><br><span class="line">-rw-r--r--. 1 root root  0 May 29 02:36 containerIn.txt</span><br><span class="line">root@91f5fd074ff4:/tmp/ubuntuData<span class="comment"># touch u2.txt</span></span><br><span class="line">root@91f5fd074ff4:/tmp/ubuntuData<span class="comment"># ll</span></span><br><span class="line">total 4</span><br><span class="line">drwxr-xr-x. 2 root root 64 May 29 03:36 ./</span><br><span class="line">drwxrwxrwt. 1 root root 24 May 29 03:36 ../</span><br><span class="line">-rw-r--r--. 1 root root  0 May 29 02:36 containerIn.txt</span><br><span class="line">-rw-r--r--. 1 root root  0 May 29 03:36 u2.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 宿主机外</span></span><br><span class="line">[root@CentOS7_001 ~]<span class="comment"># cd /mydata/docker/ubuntu/hostData/</span></span><br><span class="line">[root@CentOS7_001 hostData]<span class="comment"># ll</span></span><br><span class="line">总用量 4</span><br><span class="line">-rw-r--r--. 1 root root  0 5月  29 10:36 containerIn.txt</span><br><span class="line">-rw-r--r--. 1 root root  0 5月  29 11:36 u2.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>







]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx入门实战</title>
    <url>/GSSBlog/2023/10/30/5.1.nginx%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="linux下以jar包安装nginx"><a href="#linux下以jar包安装nginx" class="headerlink" title="linux下以jar包安装nginx"></a>linux下以jar包安装nginx</h2><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装之前检查是否有安装过</span></span><br><span class="line">nginx find-name nginx 1</span><br><span class="line"></span><br><span class="line">find -name nginx</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看nginx进程</span></span><br><span class="line">ps -C nginx -o pid</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 下载安装包(最好在自己自定义的文件夹下下载压缩包)</span></span><br><span class="line">wget http://nginx.org/download/nginx-1.20.2.tar.gz</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 安装nginx所有依赖</span></span><br><span class="line">yum -y install gcc pcre-devel zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 安装nginx</span></span><br><span class="line"><span class="comment">#解压</span></span><br><span class="line">tar -zxvf nginx-1.20.2.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#进入NG目录</span></span><br><span class="line"><span class="built_in">cd</span> ./nginx-1.20.2</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置</span></span><br><span class="line">./configure --prefix=/usr/local/nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#编译</span></span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动</span></span><br><span class="line">/usr/local/nginx/sbin/nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#重新加载配置</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -s stop</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>服务启动</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/nginx/sbin/</span><br><span class="line">./nginx </span><br><span class="line">./nginx -s stop</span><br><span class="line">./nginx -s quit</span><br><span class="line">./nginx -s reload</span><br><span class="line"></span><br><span class="line">./nginx -c /opt/app/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>停止进程</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看nginx进程</span></span><br><span class="line">ps -C nginx -o pid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止进程</span></span><br><span class="line"><span class="built_in">kill</span> -QUIT 主进程号</span><br><span class="line"></span><br><span class="line"><span class="comment"># 快速停止</span></span><br><span class="line"><span class="built_in">kill</span> -TERM 主进程号</span><br><span class="line"></span><br><span class="line"><span class="comment">#强制停止</span></span><br><span class="line"><span class="built_in">kill</span> -9 nginx</span><br></pre></td></tr></table></figure></div>



<h2 id="linux下以docker方式安装nginx"><a href="#linux下以docker方式安装nginx" class="headerlink" title="linux下以docker方式安装nginx"></a>linux下以docker方式安装nginx</h2><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 下载镜像</span></span><br><span class="line">docker pull redis <span class="comment">#下载最新 redis =&gt; redis:latest</span></span><br><span class="line">docker pull redis:6.2.4 <span class="comment"># 下载指定版本</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 启动镜像</span></span><br><span class="line">docker run --name=mynginx \</span><br><span class="line">-d --restart=always \</span><br><span class="line">-p 88:80 \</span><br><span class="line">-v /data/html:/usr/share/nginx/html:ro \</span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># -v 挂载外部数据,修改页面只需要在主机的 /data/html下即可</span></span><br><span class="line"><span class="comment"># ro :只读</span></span><br><span class="line"><span class="comment"># rw :读写</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>实战部署-&gt;复制nginx容器配置到本地文件夹</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 实战部署</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动一个nginx服务</span></span><br><span class="line">docker run -p 80:80 --name nginx -d nginx:1.10  <span class="comment"># 如果没有会自动下载</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制nginx容器配置到本地文件夹/mydata/nginx</span></span><br><span class="line">docker container <span class="built_in">cp</span> nginx:/etc/nginx .  <span class="comment"># 注意后面有一个点 (.) 不要遗忘</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改文件名称：</span></span><br><span class="line"><span class="built_in">mv</span> nginx conf   <span class="comment"># 把这个 conf 移动到/mydata/nginx 下 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 终止原容器：</span></span><br><span class="line">docker stop nginx </span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行命令删除原容器：</span></span><br><span class="line">docker <span class="built_in">rm</span> <span class="variable">$ContainerId</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载外部配置文件启动nginx服务</span></span><br><span class="line">docker run -p 80:80 --name nginx -v /mydata/nginx/html:/usr/share/nginx/html -v /mydata/nginx/logs:/var/log/nginx -v /mydata/nginx/conf:/etc/nginx -d nginx:1.10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开放防火墙端口后测试访问</span></span><br><span class="line">http:localhost:80</span><br></pre></td></tr></table></figure></div>





<h2 id="Nginx搭建域名访问-反向代理配置"><a href="#Nginx搭建域名访问-反向代理配置" class="headerlink" title="Nginx搭建域名访问(反向代理配置)"></a>Nginx搭建域名访问(反向代理配置)</h2><blockquote>
<p>nginx官网</p>
<p><a class="link"   href="https://nginx.org/en/docs/" >https://nginx.org/en/docs/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<ul>
<li><p>配置本地hosts映射地址</p>
<blockquote>
<p>windows本机hosts文件(C:\Windows\System32\drivers\etc\hosts)</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">192.168.56.101(ip)  igsshan.com(域名)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>修改nginx文件</p>
<blockquote>
<p>nginx.conf文件</p>
</blockquote>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">listen 80;</span><br><span class="line">server_name igsshan.com;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">	proxy_pass http://192.168.56.101:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>docker启动nginx</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">docker restart nginx</span><br></pre></td></tr></table></figure></div></li>
</ul>
<p>让nginx为我们代理,所有来之 igsshan.com 的请求,都代理转发到 192.168.56.101:8080 这个服务地址</p>
<h2 id="Nginx搭建域名访问-负载均衡到网关"><a href="#Nginx搭建域名访问-负载均衡到网关" class="headerlink" title="Nginx搭建域名访问(负载均衡到网关)"></a>Nginx搭建域名访问(负载均衡到网关)</h2><blockquote>
<p>由nginx反向代理单独的一个服务,在微服务架构下,这个服务配置了集群,反向代理就会很复杂了.</p>
<p>这次,配置网关负载均衡到各个服务</p>
</blockquote>
<ul>
<li><p>修改nginx文件</p>
<blockquote>
<p>nginx.conf</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加入upstream栏,配置上游服务器</span></span><br><span class="line">  upstream myapp1 &#123;</span><br><span class="line">        least_conn;</span><br><span class="line">        server srv1.example.com;</span><br><span class="line">        server srv2.example.com;</span><br><span class="line">        server srv3.example.com;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 以上是案例</span></span><br><span class="line"><span class="comment"># 结合案例配置一个自己的</span></span><br><span class="line">  upstream igsshan &#123;</span><br><span class="line">        server 192.168.56.1:88;</span><br><span class="line">        server srv2.example.com;</span><br><span class="line">        server srv3.example.com;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>修改location块</p>
</blockquote>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">	proxy_set_header Host $host</span><br><span class="line">	proxy_pass http://igsshan</span><br><span class="line">&#125;</span><br><span class="line"># 在进行网关转发的时候,会丢失很多东西,这里都丢失请求host,需要我们自己加上,带到网关中</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>配置网关路由</p>
</blockquote>
<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">mall_host_route</span></span><br><span class="line">  <span class="attr">uri:</span> <span class="string">lb://product</span></span><br><span class="line">  <span class="attr">predicates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Host=**.igsshan.mall.com,igsshan.mall.com</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>docker启动nginx</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">docker restart nginx</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="Nginx实现动静分离-Nginx加载静态资源包括js-css等"><a href="#Nginx实现动静分离-Nginx加载静态资源包括js-css等" class="headerlink" title="Nginx实现动静分离(Nginx加载静态资源包括js,css等)"></a>Nginx实现动静分离(Nginx加载静态资源包括js,css等)</h2><blockquote>
<p>nginx配置加载静态资源 css&#x2F;js 样式</p>
</blockquote>
<ul>
<li><p>首先,将静态资源等文件,在外部挂载的&#x2F;nginx&#x2F;html 文件夹下创建一个static文件夹,存储静态资源文件</p>
</li>
<li><p>修改nginx配置</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /static/&#123;</span><br><span class="line">    root /user/share/nginx/html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置首页index.html资源请求路径</p>
</li>
<li><p>重启 nginx 服务</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx入门实战配置自定义启动</title>
    <url>/GSSBlog/2023/10/30/5.2.nginx%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<blockquote>
<p>自定义一个nginx启动,重启.停止的脚本</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新增一个文件 在主服务文件中</span></span><br><span class="line">vi /etc/init.d/igsshan_nginx</span><br><span class="line"><span class="comment">## igsshan_nginx 是自定义文件</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>编写 igsshan_nginx 文件</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh</span></span><br><span class="line"><span class="comment"># Default-Start:     2 3 4 5</span></span><br><span class="line"><span class="comment"># Default-Stop:      0 1 6</span></span><br><span class="line"><span class="comment"># Short-Description: starts the nginx web server</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line">DESC=<span class="string">&quot;nginx daemon&quot;</span></span><br><span class="line">NAME=nginx</span><br><span class="line">DAEMON=/usr/local/nginx/sbin/<span class="variable">$NAME</span></span><br><span class="line">CONFIGFILE=/usr/local/nginx/conf/<span class="variable">$NAME</span>.conf</span><br><span class="line">PIDFILE=/usr/local/nginx/logs/<span class="variable">$NAME</span>.pid</span><br><span class="line">SCRIPTNAME=/etc/init.d/<span class="variable">$NAME</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line">[ -x <span class="string">&quot;<span class="variable">$DAEMON</span>&quot;</span> ] || <span class="built_in">exit</span> 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">do_start</span></span>() &#123;</span><br><span class="line"> <span class="variable">$DAEMON</span> -c <span class="variable">$CONFIGFILE</span> || <span class="built_in">echo</span> -n <span class="string">&quot;nginx already running&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">do_stop</span></span>() &#123;</span><br><span class="line"> <span class="built_in">kill</span> -INT `<span class="built_in">cat</span> <span class="variable">$PIDFILE</span>` || <span class="built_in">echo</span> -n <span class="string">&quot;nginx not running&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="title">do_reload</span></span>() &#123;</span><br><span class="line"> <span class="built_in">kill</span> -HUP `<span class="built_in">cat</span> <span class="variable">$PIDFILE</span>` || <span class="built_in">echo</span> -n <span class="string">&quot;nginx can&#x27;t reload&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line"> start)</span><br><span class="line"> <span class="built_in">echo</span> -n <span class="string">&quot;Starting <span class="variable">$DESC</span>: <span class="variable">$NAME</span>&quot;</span></span><br><span class="line"> do_start</span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;.&quot;</span></span><br><span class="line"> ;;</span><br><span class="line"> stop)</span><br><span class="line"> <span class="built_in">echo</span> -n <span class="string">&quot;Stopping <span class="variable">$DESC</span>: <span class="variable">$NAME</span>&quot;</span></span><br><span class="line"> do_stop</span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;.&quot;</span></span><br><span class="line"> ;;</span><br><span class="line"> reload|graceful)</span><br><span class="line"> <span class="built_in">echo</span> -n <span class="string">&quot;Reloading <span class="variable">$DESC</span> configuration...&quot;</span></span><br><span class="line"> do_reload</span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;.&quot;</span></span><br><span class="line"> ;;</span><br><span class="line"> restart)</span><br><span class="line"> <span class="built_in">echo</span> -n <span class="string">&quot;Restarting <span class="variable">$DESC</span>: <span class="variable">$NAME</span>&quot;</span></span><br><span class="line"> do_stop</span><br><span class="line"> do_start</span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;.&quot;</span></span><br><span class="line"> ;;</span><br><span class="line"> *)</span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Usage: <span class="variable">$SCRIPTNAME</span> &#123;start|stop|reload|restart&#125;&quot;</span> &gt;&amp;2</span><br><span class="line"> <span class="built_in">exit</span> 3</span><br><span class="line"> ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">exit</span> 0</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>给文件添加执行权限</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加可执行权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x /etc/init.d/igsshan_nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">## chmod +x 文件名（包括扩展后缀）</span></span><br><span class="line"><span class="comment">## chmod +x 赋予用户文件的执行权限</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 绿色文件： 可执行文件，可执行的程序  </span></span><br><span class="line"><span class="comment">### 红色文件：压缩文件或者包文件</span></span><br><span class="line"><span class="comment">### 蓝色文件：目录</span></span><br><span class="line"><span class="comment">### 白色文件：一般性文件，如文本文件，配置文件，源码文件等 </span></span><br><span class="line"><span class="comment">### 浅蓝色文件：链接文件，主要是使用ln命令建立的文件</span></span><br><span class="line"><span class="comment">### 红色闪烁：表示链接的文件有问题</span></span><br><span class="line"><span class="comment">### 黄色：表示设备文件</span></span><br><span class="line"><span class="comment">### 灰色：表示其他文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#### chmod +x以及chmod u+x</span></span><br><span class="line"><span class="comment">##### u 代表用户.</span></span><br><span class="line"><span class="comment">##### g 代表用户组.</span></span><br><span class="line"><span class="comment">##### o 代表其他.</span></span><br><span class="line"><span class="comment">##### a 代表所有</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>自定义文件的使用</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动nginx</span></span><br><span class="line">/etc/init.d/igsshan_nginx start </span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止nginx</span></span><br><span class="line">/etc/init.d/igsshan_nginx stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启nginx</span></span><br><span class="line">/etc/init.d/igsshan_nginx restart</span><br></pre></td></tr></table></figure></div>

<ul>
<li>扩展: 配置开机自启</li>
</ul>
<blockquote>
<p>如果需要开机启动服务,保存好 <code>/etc/init.d/igsshan_nginx</code> 文件后,执行以下命令</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">chkconfig --add igsshan_nginx</span><br><span class="line"></span><br><span class="line">chkconfig --level igsshan_nginx 2345 on</span><br><span class="line"></span><br><span class="line"><span class="comment"># chkconfig是检查，设置系统的各种服务。</span></span><br><span class="line"><span class="comment">## 语　法：chkconfig [--add][--del][--list][系统服务] 或 chkconfig [--level &lt;等级代号&gt;][系统服务][on/off/reset]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## chkconfig命令主要用来更新（启动或停止）和查询系统服务的运行级信息。谨记chkconfig不是立即自动禁止或激活一个服务，它只是简单的改变了符号连接。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 用法</span></span><br><span class="line">chkconfig --list [name]</span><br><span class="line">chkconfig --add name</span><br><span class="line">chkconfig --del name</span><br><span class="line">chkconfig [--level levels] name &lt;on|off|reset&gt;</span><br><span class="line">chkconfig [--level levels] name</span><br><span class="line"></span><br><span class="line"><span class="comment">#### chkconfig 没有参数运行时，显示用法。如果在服务名后面指定了on，off或者reset，那么chkconfig 会改变指定服务的启动信息。on和off分别指服务被启动和停止，reset指重置服务的启动信息，无论有问题的初始化脚本指定了什么。on和off开关，系统默认只对运行级2，3，4，5有效，但是reset可以对所有运行级有效。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##### --level&lt;等级代号&gt;　指定读系统服务要在哪一个执行等级中开启或关闭。</span></span><br><span class="line"><span class="comment">###### 等级0表示：表示关机</span></span><br><span class="line"><span class="comment">###### 等级1表示：单用户模式</span></span><br><span class="line"><span class="comment">###### 等级2表示：无网络连接的多用户命令行模式</span></span><br><span class="line"><span class="comment">###### 等级3表示：有网络连接的多用户命令行模式</span></span><br><span class="line"><span class="comment">###### 等级4表示：不可用</span></span><br><span class="line"><span class="comment">###### 等级5表示：带图形界面的多用户模式</span></span><br><span class="line"><span class="comment">###### 等级6表示：重新启动</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####### chkconfig --list ：显示所有运行级系统服务的运行状态信息（on或off）。如果指定了name，那么只显示指定的服务在不同运行级的状态。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####### chkconfig --add name：增加一项新的服务。chkconfig确保每个运行级有一项启动(S)或者杀死(K)入口。如有缺少，则会从缺省的init脚本自动建立。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####### chkconfig --del name：删除所指定的系统服务，不再由chkconfig指令管理，并同时在系统启动的叙述文件内删除相关数据。</span></span><br></pre></td></tr></table></figure></div>



]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装FastDFS</title>
    <url>/GSSBlog/2023/10/30/6.fastdfs%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="1-拉取镜像"><a href="#1-拉取镜像" class="headerlink" title="1 拉取镜像"></a>1 拉取镜像</h3><div class="highlight-container" data-rel="Properties"><figure class="iseeu highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">pull morunchang/fastdfs</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>使用 docker images查看是否成功</p>
</blockquote>
<h3 id="2-运行tracker"><a href="#2-运行tracker" class="headerlink" title="2 运行tracker"></a>2 运行tracker</h3><div class="highlight-container" data-rel="Properties"><figure class="iseeu highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">run -d --name tracker --net=host morunchang/fastdfs sh tracker.sh</span></span><br></pre></td></tr></table></figure></div>

<h3 id="3-运行storage"><a href="#3-运行storage" class="headerlink" title="3 运行storage"></a>3 运行storage</h3><div class="highlight-container" data-rel="Properties"><figure class="iseeu highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">run -d --name storage --net=host -e TRACKER_IP=&lt;your tracker server address&gt;:22122 -e GROUP_NAME=&lt;group name&gt; morunchang/fastdfs sh storage.sh</span></span><br><span class="line"></span><br><span class="line"><span class="attr">例子：</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">run -d --name storage --net=host -e TRACKER_IP=192.168.6.129:22122 -e GROUP_NAME=group1 morunchang/fastdfs sh storage.sh</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>使用的网络模式是–net&#x3D;host, <your tracker server address> 替换为你机器的Ip即可  </li>
<li><group name> 是组名，即storage的组  </li>
<li>如果想要增加新的storage服务器，再次运行该命令，注意更换 新组名</li>
</ul>
<h3 id="4-修改nginx的配置"><a href="#4-修改nginx的配置" class="headerlink" title="4 修改nginx的配置"></a>4 修改nginx的配置</h3><p>进入storage的容器内部，修改nginx.conf</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入到storage容器内部</span></span><br><span class="line">docker <span class="built_in">exec</span> -it storage  /bin/bash</span><br></pre></td></tr></table></figure></div>

<p>进入到容器内部后</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1 通过命令来查询Nginx的安装位置</span></span><br><span class="line">root@iZ8vb6w2xyjemtqcxtmaj4Z:/<span class="comment"># whereis nginx</span></span><br><span class="line">nginx: /etc/nginx</span><br><span class="line"><span class="comment">#2 查看当前Nginx的进程</span></span><br><span class="line">root@iZ8vb6w2xyjemtqcxtmaj4Z:/<span class="comment"># ps aux | grep nginx</span></span><br><span class="line">root        16  0.0  0.0  32480  1480 ?        Ss   13:18   0:00 nginx: master process /etc/nginx/sbin/nginx</span><br><span class="line">nobody     100  0.0  0.0  33036  2116 ?        S    14:15   0:00 nginx: worker process</span><br><span class="line">root       118  0.0  0.0  11272   728 pts/1    S+   14:54   0:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure></div>

<p>添加以下内容</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#3 修改Nginx的配置文件</span></span><br><span class="line">vi /etc/nginx/conf/nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#4 修改Nginx配置内容</span></span><br><span class="line"> server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        </span><br><span class="line">        location ~ /M00 &#123;</span><br><span class="line">        		<span class="comment"># storage 实际存储图片的位置</span></span><br><span class="line">            root /data/fast_data/data;</span><br><span class="line">            ngx_fastdfs_module;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#5 进入到Nginx sbin目录从新加载Nginx配置文件</span></span><br><span class="line"><span class="built_in">cd</span> /etc/nginx/sbin</span><br><span class="line"><span class="comment"># 重新加载配置文件</span></span><br><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>storage存储的位置&#x2F;data&#x2F;fast_data&#x2F;data</p>
</blockquote>
<h3 id="5-设置开机启动容器"><a href="#5-设置开机启动容器" class="headerlink" title="5 设置开机启动容器"></a>5 设置开机启动容器</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">docker update --restart=always  tracker</span><br><span class="line">docker update --restart=always  storage</span><br></pre></td></tr></table></figure></div>

<p>如果更新不成功，查看是否是下面错误</p>
<p><em>IPv4 forwarding is disabled. Networking will not work</em></p>
<p>解决：<a class="link"   href="https://www.cnblogs.com/python-wen/p/11224828.html" >https://www.cnblogs.com/python-wen/p/11224828.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="SpringBoot整合fastDFS"><a href="#SpringBoot整合fastDFS" class="headerlink" title="SpringBoot整合fastDFS"></a>SpringBoot整合fastDFS</h2><ul>
<li>引入依赖</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.tobato/fastdfs-client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.tobato<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastdfs-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.27.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ul>
<li>配置地址</li>
</ul>
<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">fdfs:</span></span><br><span class="line">  <span class="comment"># 连接超时时间</span></span><br><span class="line">  <span class="attr">connect-timeout:</span> <span class="number">1000</span></span><br><span class="line">  <span class="comment"># 读取时间</span></span><br><span class="line">  <span class="attr">so-timeout:</span> <span class="number">3000</span></span><br><span class="line">  <span class="comment"># tracker服务配置地址列表</span></span><br><span class="line">  <span class="attr">thumb-image:</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">60</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">60</span></span><br><span class="line">  <span class="attr">tracker-list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.101</span><span class="string">:22122</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">http://192.168.56.101:8080/</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>配置类</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> igsshan</span></span><br><span class="line"><span class="comment"> * 导入FastDFS-Client组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(FdfsClientConfig.class)</span></span><br><span class="line"><span class="meta">@EnableMBeanExport(registration = RegistrationPolicy.IGNORE_EXISTING)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FdfsConfiguration</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>构建工具类</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> igsshan</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastDFSClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FastFileStorageClient storageClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadFile</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">StorePath</span> <span class="variable">storePath</span> <span class="operator">=</span></span><br><span class="line">                storageClient.uploadFile((InputStream) file.getInputStream()</span><br><span class="line">                        , file.getSize()</span><br><span class="line">                        , FilenameUtils.getExtension(file.getOriginalFilename())</span><br><span class="line">                        , <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> storePath.getFullPath();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除(批量)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delFile</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        storageClient.deleteFile(filePath);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除(批量)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delFiles</span><span class="params">(List&lt;String&gt; filePaths)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (String filePath : filePaths) &#123;</span><br><span class="line">            storageClient.deleteFile(filePath);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下载</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> groupName groupName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] download(String groupName, String path) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">ins</span> <span class="operator">=</span> storageClient.downloadFile(groupName, path, ins1 -&gt; &#123;</span><br><span class="line">            <span class="comment">// 将此ins返回给上面的ins</span></span><br><span class="line">            <span class="keyword">return</span> ins1;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">rc</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((rc = ins.read(buff, <span class="number">0</span>, <span class="number">100</span>)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            byteArrayOutputStream.write(buff, <span class="number">0</span>, rc);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> byteArrayOutputStream.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>Demo</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FastDFSClient fastDFSClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;fast.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">fileUpload</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;----------上传图片开始------------&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> ((<span class="literal">null</span> == file || file.isEmpty() || file.getSize() == <span class="number">0</span> ||</span><br><span class="line">                StringUtils.isBlank(file.getOriginalFilename()))) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseBusinessException</span>(<span class="string">&quot;5001&quot;</span>,<span class="string">&quot;文件信息不完整&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">uploadFile</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            uploadFile = fastDFSClient.uploadFile(file);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">imageUrl</span> <span class="operator">=</span> url + uploadFile;</span><br><span class="line">        log.info(<span class="string">&quot;----------上传图片完成;预览链接------------: &#123;&#125;&quot;</span>,imageUrl);</span><br><span class="line">        <span class="keyword">return</span> R.ok().put(<span class="string">&quot;data&quot;</span>, imageUrl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>FastDFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx入门实战加载静态资源</title>
    <url>/GSSBlog/2023/10/30/5.3.nginx%E4%BB%A3%E7%90%86%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<h2 id="加载静态图片"><a href="#加载静态图片" class="headerlink" title="加载静态图片"></a>加载静态图片</h2><blockquote>
<p>编辑 <code>nginx.conf</code></p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"> server &#123;</span><br><span class="line">      listen       80;</span><br><span class="line">      server_name  localhost;</span><br><span class="line"></span><br><span class="line">location /image &#123;</span><br><span class="line">	root /mydata/nginx/dist;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /my_image &#123;</span><br><span class="line">	<span class="built_in">alias</span>  /mydata/nginx/dist/picture/;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>访问: <code>http://127.0.0.1/image/test.jpg</code></p>
<p>就会加载<code>/mydata/nginx/dist/picture/image/test.jpg</code>这张图</p>
</blockquote>
<blockquote>
<p><strong><code>加载静态文件的两种方式</code></strong></p>
</blockquote>
<ul>
<li>root</li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">root加载原理：url拼接root中的目录加载资源</span><br><span class="line">step1 <span class="comment"># 拿到url中的 image/test.jpg</span></span><br><span class="line">step2 <span class="comment"># 用root中的mydata/nginx/dist/picture/ + image/test.jpg</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>alias</li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span>加载原理: 把location中出现在<span class="built_in">alias</span>中的字符串去掉 ，拼接到<span class="built_in">alias</span>中</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux中set命令</title>
    <url>/GSSBlog/2023/10/30/7.linux%E4%B8%ADset%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="常用set命令属性"><a href="#常用set命令属性" class="headerlink" title="常用set命令属性"></a>常用set命令属性</h2><blockquote>
<p><code>set -o</code> 查看所有属性</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">[root@CentOs7_001 ~]<span class="comment"># set -o</span></span><br><span class="line">allexport       off</span><br><span class="line">braceexpand     on</span><br><span class="line">emacs           on</span><br><span class="line">errexit         off</span><br><span class="line">errtrace        off</span><br><span class="line">functrace       off</span><br><span class="line">hashall         on</span><br><span class="line">histexpand      on</span><br><span class="line"><span class="built_in">history</span>         on</span><br><span class="line">ignoreeof       off</span><br><span class="line">interactive-comments    on</span><br><span class="line">keyword         off</span><br><span class="line">monitor         on</span><br><span class="line">noclobber       off</span><br><span class="line">noexec          off</span><br><span class="line"><span class="built_in">noglob</span>          off</span><br><span class="line">nolog           off</span><br><span class="line">notify          off</span><br><span class="line">nounset         off</span><br><span class="line">onecmd          off</span><br><span class="line">physical        off</span><br><span class="line">pipefail        off</span><br><span class="line">posix           off</span><br><span class="line">privileged      off</span><br><span class="line">verbose         off</span><br><span class="line">vi              off</span><br><span class="line">xtrace          off</span><br><span class="line"></span><br><span class="line"><span class="comment">## 解析</span></span><br><span class="line"> -a：标示已修改的变量，以供输出至环境变量。 </span><br><span class="line"> -b：使被中止的后台程序立刻回报执行状态。 </span><br><span class="line"> -C：转向所产生的文件无法覆盖已存在的文件。 </span><br><span class="line"> -d：Shell预设会用杂凑表记忆使用过的指令，以加速指令的执行。使用-d参数可取消。 </span><br><span class="line"> -e：若指令传回值不等于0，则立即退出shell。 </span><br><span class="line"> -f：取消使用通配符。 </span><br><span class="line"> -h：自动记录函数的所在位置。 </span><br><span class="line"> -H Shell：可利用<span class="string">&quot;!&quot;</span>加&lt;指令编号&gt;的方式来执行<span class="built_in">history</span>中记录的指令。 </span><br><span class="line"> -k：指令所给的参数都会被视为此指令的环境变量。 </span><br><span class="line"> -l：记录<span class="keyword">for</span>循环的变量名称。 </span><br><span class="line"> -m：使用监视模式。 </span><br><span class="line"> -n：只读取指令，而不实际执行。 </span><br><span class="line"> -p：启动优先顺序模式。 </span><br><span class="line"> -P：启动-P参数后，执行指令时，会以实际的文件或目录来取代符号连接。 </span><br><span class="line"> -t：执行完随后的指令，即退出shell。 </span><br><span class="line"> -u：当执行时使用到未定义过的变量，则显示错误信息。 </span><br><span class="line"> -v：显示shell所读取的输入值。 </span><br><span class="line"> -x：执行指令后，会先显示该指令及所下的参数。</span><br></pre></td></tr></table></figure></div>

<h3 id="set-e"><a href="#set-e" class="headerlink" title="set -e"></a>set -e</h3><blockquote>
<p><strong><code>说明</code></strong></p>
</blockquote>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">&quot;Exit immediately if a simple command exits with a non-zero status.&quot;</span><br><span class="line">也就是说，在&quot;set -e&quot;之后出现的代码，一旦出现了返回值非零，整个脚本就会立即退出。</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><strong><code>示例</code></strong></p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"><span class="built_in">ls</span> a.txt | <span class="built_in">echo</span> <span class="string">&quot;hi&quot;</span> &gt;/dev/null</span><br><span class="line"><span class="built_in">echo</span> $?</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;test error&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><strong><code>结果</code></strong></p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">[root@CentOs7_001 test-shell]<span class="comment"># bash test01</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span>: cannot access a.txt: No such file or directory</span><br><span class="line">0</span><br><span class="line"><span class="built_in">test</span> error</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><code>结论</code></p>
</blockquote>
<blockquote>
<p>没有a.txt文件，但是ls a.txt | echo “hi” &gt;&#x2F;dev&#x2F;null的返回码是0，因为set -e只捕获最后一个管道命令的返回值,从而导致遇错不退出脚本，依然执行后面的echo “test”</p>
</blockquote>
<h3 id="set-o-pipefail"><a href="#set-o-pipefail" class="headerlink" title="set -o pipefail"></a>set -o pipefail</h3><blockquote>
<p><strong><code>说明</code></strong></p>
</blockquote>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">&quot;If set, the return value of a pipeline is the value of the last (rightmost) command to exit with a  non-zero  status,or zero if all commands in the pipeline exit successfully.  This option is disabled by default.&quot;</span><br><span class="line"></span><br><span class="line">设置了这个选项以后，包含管道命令的语句的返回值，会变成最后一个返回非零的管道命令的返回值</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><strong><code>示例</code></strong></p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -o pipefail</span><br><span class="line"><span class="built_in">ls</span> a.txt | <span class="built_in">echo</span> <span class="string">&quot;hi&quot;</span> &gt;/dev/null</span><br><span class="line">[[ $? -ne 0 ]] &amp;&amp; <span class="built_in">exit</span> 1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;test&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><strong><code>结果</code></strong></p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@CentOs7_001 test-shell]<span class="comment"># bash test02</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span>: cannot access a.txt: No such file or directory</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><code>结论</code></p>
</blockquote>
<blockquote>
<p>set -o pipefail是去捕获最后一个返回非零的管道命令的返回值，也就是ls a.txt的返回值；<br>没有a.txt文件，返回值为非0，因此[[ $? -ne 0 ]]条件成立，脚本退出，不执行echo “test”</p>
</blockquote>
<h3 id="set-h"><a href="#set-h" class="headerlink" title="set +h"></a>set +h</h3><blockquote>
<p><code>hashall</code>可以让Bash记录执行过得命令路径,并保存到一个内存的<code>hash表</code>中,当再次执行相同命令时就不需要再通过PATH变量查找该命令的路径，这样可以提高效率。</p>
<p>但有时，程序的路径发生了变化，因为有Hash记录的存在反而会导致命令执行失败</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># hash</span></span><br><span class="line">命中    命令</span><br><span class="line">   7    /usr/bin/openssl</span><br><span class="line">   1    /usr/bin/date</span><br><span class="line">   1    /usr/bin/tr</span><br><span class="line">   1    /usr/bin/uuidgen</span><br><span class="line">   1    /usr/bin/strings</span><br><span class="line">   4    /usr/bin/md5sum</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>如果将md5sum命令移动到&#x2F;usr&#x2F;local&#x2F;bin&#x2F;目录，此时系统依然根据Hash表记录的位置执行命令，就无法找到md5sum命令</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mv /usr/bin/md5sum /usr/local/bin/</span></span><br><span class="line">[root@localhost ~]<span class="comment"># md5sum</span></span><br><span class="line">-bash: /usr/bin/md5sum: 没有那个文件或目录</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>可以使用<code>hash -d</code>删除某个记录信息，或者使用<code>hash -r</code>清空整个Hash表，再或者使用<code>set+h</code>禁用hash表来解决这个问题</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># set +h		#禁用hash表</span></span><br><span class="line">[root@localhost ~]<span class="comment"># hash</span></span><br><span class="line">-bash: <span class="built_in">hash</span>: 哈希已禁用</span><br><span class="line">[root@localhost ~]<span class="comment"># md5sum /etc/passwd		#命令可以正常使用</span></span><br><span class="line">6322f6fcbc6e157963f5aa74f9e35039  /etc/passwd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># set -h		#启用hash表</span></span><br></pre></td></tr></table></figure></div>

<h3 id="set-u"><a href="#set-u" class="headerlink" title="set -u"></a>set -u</h3><blockquote>
<p>开启<code>nounset</code>属性可以有效防止变量未定义的错误</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -u</span><br><span class="line">useradd <span class="variable">$1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>执行结果: <strong>没有给$1赋值，会报错</strong></p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@CentOs7_001 test-shell]<span class="comment"># bash test03</span></span><br><span class="line">test03: line 4: <span class="variable">$1</span>: unbound variable</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="set-x"><a href="#set-x" class="headerlink" title="set -x"></a>set -x</h3><blockquote>
<p>打开脚本调试功能，也可以通过bash -x ***.sh打开</p>
<p>如果输出结果以双加号(++)开头则表示命令在子Shell中执行</p>
</blockquote>
<h3 id="set-n"><a href="#set-n" class="headerlink" title="set -n"></a>set -n</h3><blockquote>
<p>检查shell语法,但不会执行,等同于 <code>bash -n xxx.sh</code></p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker部署常规服务</title>
    <url>/GSSBlog/2023/10/30/6.0docker%E9%83%A8%E7%BD%B2%E7%AE%80%E5%8D%95%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="docker部署tomcat"><a href="#docker部署tomcat" class="headerlink" title="docker部署tomcat"></a>docker部署tomcat</h2><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 查找镜像</span></span><br><span class="line">docker search --<span class="built_in">limit</span> 5 tomcat</span><br><span class="line"></span><br><span class="line"><span class="comment">## 拉取镜像</span></span><br><span class="line">docker pull tomcat</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看镜像</span></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line"><span class="comment">## 运行镜像</span></span><br><span class="line">docker run -it -p 8080:8080 tomcat</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>访问ip:host 页面返回404</strong></p>
<ul>
<li>处理一 : 查看防火墙</li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 查看防火墙状态</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment">## 防火墙</span></span><br><span class="line">systemctl start firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看防火墙放行规则</span></span><br><span class="line">firewall-cmd --list-ports</span><br><span class="line"></span><br><span class="line"><span class="comment">## 增加端口放行</span></span><br><span class="line">firewall-cmd --zone=public --permanent --add-port=8080/tcp</span><br><span class="line"><span class="comment">## 刷新规则(必须刷新,否则不生效)</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<ul>
<li>处理二 : 版本问题</li>
</ul>
<blockquote>
<p>由于版本问题,latest版本的资源包不在webapps包下,需要手动修改</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 查看启动的tomcat容器</span></span><br><span class="line">docker ps | grep tomcat</span><br><span class="line"></span><br><span class="line"><span class="comment">## 进入容器内部</span></span><br><span class="line">docker <span class="built_in">exec</span> -it tomcat /bin/bash</span><br><span class="line">[root@CentOs7_001 ~]<span class="comment"># docker exec -it tomcat /bin/bash</span></span><br><span class="line">root@f2d21a4b433b:/usr/local/tomcat<span class="comment"># ls -l</span></span><br><span class="line">total 132</span><br><span class="line">-rw-r--r--. 1 root root 18994 Dec  2  2021 BUILDING.txt</span><br><span class="line">-rw-r--r--. 1 root root  6210 Dec  2  2021 CONTRIBUTING.md</span><br><span class="line">-rw-r--r--. 1 root root 60269 Dec  2  2021 LICENSE</span><br><span class="line">-rw-r--r--. 1 root root  2333 Dec  2  2021 NOTICE</span><br><span class="line">-rw-r--r--. 1 root root  3378 Dec  2  2021 README.md</span><br><span class="line">-rw-r--r--. 1 root root  6905 Dec  2  2021 RELEASE-NOTES</span><br><span class="line">-rw-r--r--. 1 root root 16517 Dec  2  2021 RUNNING.txt</span><br><span class="line">drwxr-xr-x. 2 root root  4096 Dec 22  2021 bin</span><br><span class="line">drwxr-xr-x. 1 root root    22 May 29 14:14 conf</span><br><span class="line">drwxr-xr-x. 2 root root  4096 Dec 22  2021 lib</span><br><span class="line">drwxrwxrwx. 1 root root    80 May 29 14:14 logs</span><br><span class="line">drwxr-xr-x. 2 root root   159 Dec 22  2021 native-jni-lib</span><br><span class="line">drwxrwxrwx. 2 root root    30 Dec 22  2021 temp</span><br><span class="line">drwxr-xr-x. 2 root root     6 Dec 22  2021 webapps <span class="comment">## 包下是空的(删除掉,把下面的改成&#x27;webapps&#x27;)</span></span><br><span class="line">drwxr-xr-x. 7 root root    81 Dec  2  2021 webapps.dist <span class="comment">## 资源都在这个下面</span></span><br><span class="line">drwxrwxrwx. 2 root root     6 Dec  2  2021 work</span><br><span class="line">root@f2d21a4b433b:/usr/local/tomcat<span class="comment"># rm -r webapps</span></span><br><span class="line">root@f2d21a4b433b:/usr/local/tomcat<span class="comment"># ls -l</span></span><br><span class="line">total 132</span><br><span class="line">-rw-r--r--. 1 root root 18994 Dec  2  2021 BUILDING.txt</span><br><span class="line">-rw-r--r--. 1 root root  6210 Dec  2  2021 CONTRIBUTING.md</span><br><span class="line">-rw-r--r--. 1 root root 60269 Dec  2  2021 LICENSE</span><br><span class="line">-rw-r--r--. 1 root root  2333 Dec  2  2021 NOTICE</span><br><span class="line">-rw-r--r--. 1 root root  3378 Dec  2  2021 README.md</span><br><span class="line">-rw-r--r--. 1 root root  6905 Dec  2  2021 RELEASE-NOTES</span><br><span class="line">-rw-r--r--. 1 root root 16517 Dec  2  2021 RUNNING.txt</span><br><span class="line">drwxr-xr-x. 2 root root  4096 Dec 22  2021 bin</span><br><span class="line">drwxr-xr-x. 1 root root    22 May 29 14:14 conf</span><br><span class="line">drwxr-xr-x. 2 root root  4096 Dec 22  2021 lib</span><br><span class="line">drwxrwxrwx. 1 root root    80 May 29 14:14 logs</span><br><span class="line">drwxr-xr-x. 2 root root   159 Dec 22  2021 native-jni-lib</span><br><span class="line">drwxrwxrwx. 2 root root    30 Dec 22  2021 temp</span><br><span class="line">drwxr-xr-x. 7 root root    81 Dec  2  2021 webapps.dist</span><br><span class="line">drwxrwxrwx. 2 root root     6 Dec  2  2021 work</span><br><span class="line">root@f2d21a4b433b:/usr/local/tomcat<span class="comment"># mv webapps.dist webapps</span></span><br><span class="line">root@f2d21a4b433b:/usr/local/tomcat<span class="comment"># ls -l</span></span><br><span class="line">total 132</span><br><span class="line">-rw-r--r--. 1 root root 18994 Dec  2  2021 BUILDING.txt</span><br><span class="line">-rw-r--r--. 1 root root  6210 Dec  2  2021 CONTRIBUTING.md</span><br><span class="line">-rw-r--r--. 1 root root 60269 Dec  2  2021 LICENSE</span><br><span class="line">-rw-r--r--. 1 root root  2333 Dec  2  2021 NOTICE</span><br><span class="line">-rw-r--r--. 1 root root  3378 Dec  2  2021 README.md</span><br><span class="line">-rw-r--r--. 1 root root  6905 Dec  2  2021 RELEASE-NOTES</span><br><span class="line">-rw-r--r--. 1 root root 16517 Dec  2  2021 RUNNING.txt</span><br><span class="line">drwxr-xr-x. 2 root root  4096 Dec 22  2021 bin</span><br><span class="line">drwxr-xr-x. 1 root root    22 May 29 14:14 conf</span><br><span class="line">drwxr-xr-x. 2 root root  4096 Dec 22  2021 lib</span><br><span class="line">drwxrwxrwx. 1 root root    80 May 29 14:14 logs</span><br><span class="line">drwxr-xr-x. 2 root root   159 Dec 22  2021 native-jni-lib</span><br><span class="line">drwxrwxrwx. 2 root root    30 Dec 22  2021 temp</span><br><span class="line">drwxr-xr-x. 7 root root    81 Dec  2  2021 webapps</span><br><span class="line">drwxrwxrwx. 2 root root     6 Dec  2  2021 work</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<p><strong>免修版本说明</strong></p>
<blockquote>
<p>使用以下的版本,可以不需要调整tomcat的文件包</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 查找镜像</span></span><br><span class="line">[root@CentOs7_001 ~]<span class="comment"># docker search billygoo/tomcat8-jdk8</span></span><br><span class="line">NAME                    DESCRIPTION                               STARS     OFFICIAL   AUTOMATED</span><br><span class="line">billygoo/tomcat8-jdk8   Install openjdk8 using tomcat:8.0-jre8.   3                    [OK]</span><br><span class="line"></span><br><span class="line"><span class="comment">## 拉取镜像</span></span><br><span class="line">docker pull billygoo/tomcat8-jdk8</span><br><span class="line"></span><br><span class="line"><span class="comment">## 运行镜像</span></span><br><span class="line">docker run -d -p 8080:8080 --name tomcat8 billygoo/tomcat8-jdk8</span><br></pre></td></tr></table></figure></div>

<h3 id="访问tomcat—-http-ip-host"><a href="#访问tomcat—-http-ip-host" class="headerlink" title="访问tomcat—&gt; http://ip:host"></a>访问tomcat—&gt; <a href="http://ip:host">http://ip:host</a></h3><blockquote>
<p>示例: <a class="link"   href="http://192.168.33.101:8080/" >http://192.168.33.101:8080 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h2 id="docker部署mysql"><a href="#docker部署mysql" class="headerlink" title="docker部署mysql"></a>docker部署mysql</h2><p><strong><code>简易版</code></strong></p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 查找镜像</span></span><br><span class="line">docker search --<span class="built_in">limit</span> 5 mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">## 拉取镜像</span></span><br><span class="line">docker pull mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看镜像</span></span><br><span class="line">docker images mysql5.7</span><br><span class="line"></span><br><span class="line"><span class="comment">## 运行镜像</span></span><br><span class="line">docker run -d -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=root mysql:5.7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@CentOs7_001 ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                COMMAND                  CREATED        STATUS              PORTS                                                  NAMES</span><br><span class="line">d040a1737203   mysql:5.7            <span class="string">&quot;docker-entrypoint.s…&quot;</span>   7 months ago   Up 2 seconds        0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   mysql</span><br><span class="line"></span><br><span class="line">[root@CentOs7_001 ~]<span class="comment"># docker exec -it d040a1737203 /bin/bash</span></span><br><span class="line">root@d040a1737203:/<span class="comment"># mysql -uroot -p</span></span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection <span class="built_in">id</span> is 3</span><br><span class="line">Server version: 5.7.36 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2021, Oracle and/or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 进入容器下,查看原始字符集</span></span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like <span class="string">&#x27;character%&#x27;</span>;</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| Variable_name            | Value                      |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| character_set_client     | latin1                     |</span><br><span class="line">| character_set_connection | latin1                     |</span><br><span class="line">| character_set_database   | latin1                     |</span><br><span class="line">| character_set_filesystem | binary                     |</span><br><span class="line">| character_set_results    | latin1                     |</span><br><span class="line">| character_set_server     | latin1                     |</span><br><span class="line">| character_set_system     | utf8                       |</span><br><span class="line">| character_sets_dir       | /usr/share/mysql/charsets/ |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">8 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<p><strong><code>实战部署</code></strong></p>
<blockquote>
<p>简易版部署,会发现很多问题</p>
<p>比如: 字符集是latin1字符,数据卷没有使用….</p>
</blockquote>
<p><strong><code>本地my.cnf配置</code></strong></p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">default_character_set=utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">character_set_server = utf8</span><br><span class="line">collation_server = utf8_general_ci</span><br></pre></td></tr></table></figure></div>





<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## docker 启动命令</span></span><br><span class="line">docker run -d -p 3306:3306 --privileged=<span class="literal">true</span> \</span><br><span class="line">-v /mydata/mysql/log:/var/log/mysql \</span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">--name mysql mysql:5.7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@CentOs7_001 conf]<span class="comment"># docker run -d -p 3306:3306 --privileged=true \</span></span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /mydata/mysql/log:/var/log/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">--name mysql mysql:5.7</span><br><span class="line">5db8432a05c5155a349ab6cba63c2a09b02d8ca2168543eb70acfed8dd5cd1bd</span><br><span class="line">[root@CentOs7_001 ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE       COMMAND                  CREATED         STATUS         PORTS                                                  NAMES</span><br><span class="line">5db8432a05c5   mysql:5.7   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   4 seconds ago   Up 3 seconds   0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   mysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 进入宿主机挂载的mysql配置文件夹下</span></span><br><span class="line">[root@CentOs7_001 ~]<span class="comment"># cd /mydata/mysql/conf/</span></span><br><span class="line">[root@CentOs7_001 conf]<span class="comment"># pwd</span></span><br><span class="line">/mydata/mysql/conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建配置文件</span></span><br><span class="line">[root@CentOs7_001 conf]<span class="comment"># touch my.cnf</span></span><br><span class="line">[root@CentOs7_001 conf]<span class="comment"># vi my.cnf</span></span><br><span class="line">[root@CentOs7_001 conf]<span class="comment"># cat my.cnf</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">default_character_set=utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">character_set_server = utf8</span><br><span class="line">collation_server = utf8_general_ci</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 重启mysql容器</span></span><br></pre></td></tr></table></figure></div>



<p><strong>数据持久化</strong></p>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">经过&quot;实战版mysql部署&quot;;将容器内的配置,数据源,日志等挂载在宿主机外部</span><br><span class="line">如果;把此时的容器停掉,删除</span><br><span class="line">再重新部署一个容器;同样是挂载在之前的配置文件下,文件是否存在?</span><br><span class="line"></span><br><span class="line">结局必然: 还是存在的</span><br></pre></td></tr></table></figure></div>



<h2 id="docker部署redis"><a href="#docker部署redis" class="headerlink" title="docker部署redis"></a>docker部署redis</h2><ul>
<li><p><strong>redis.conf</strong> (见文末)</p>
</li>
<li><p><strong><code>简易版部署</code></strong></p>
</li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 拉取镜像</span></span><br><span class="line">docker pull redis:6.0.8</span><br><span class="line"></span><br><span class="line"><span class="comment">## 启动镜像</span></span><br><span class="line">docker run -d -p 6379:6379 --privileged=<span class="literal">true</span> \</span><br><span class="line">-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-v /mydata/redis/data/:/data \</span><br><span class="line">--name redis \</span><br><span class="line">redis:6.0.8 \</span><br><span class="line">redis-server /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">## 验证本地配置</span></span><br><span class="line"><span class="comment">### 修改连接的database数量</span></span><br><span class="line">(原) database=15</span><br><span class="line">(修改后) database=10</span><br><span class="line"></span><br><span class="line"><span class="comment">### 验证</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="keyword">select</span> 10</span><br><span class="line">(error) ERR DB index is out of range</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>





<p>(reids.conf配置)</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Redis configuration file example.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Note that in order to read the configuration file, Redis must be</span><br><span class="line"></span><br><span class="line"># started with the file path as first argument:</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># ./redis-server /path/to/redis.conf</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Note on units: when memory size is needed, it is possible to specify</span><br><span class="line"></span><br><span class="line"># it in the usual form of 1k 5GB 4M and so forth:</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># 1k =&gt; 1000 bytes</span><br><span class="line"></span><br><span class="line"># 1kb =&gt; 1024 bytes</span><br><span class="line"></span><br><span class="line"># 1m =&gt; 1000000 bytes</span><br><span class="line"></span><br><span class="line"># 1mb =&gt; 1024*1024 bytes</span><br><span class="line"></span><br><span class="line"># 1g =&gt; 1000000000 bytes</span><br><span class="line"></span><br><span class="line"># 1gb =&gt; 1024*1024*1024 bytes</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># units are case insensitive so 1GB 1Gb 1gB are all the same.</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">################################## INCLUDES ###################################</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Include one or more other config files here.  This is useful if you</span><br><span class="line"></span><br><span class="line"># have a standard template that goes to all Redis servers but also need</span><br><span class="line"></span><br><span class="line"># to customize a few per-server settings.  Include files can include</span><br><span class="line"></span><br><span class="line"># other files, so use this wisely.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Notice option &quot;include&quot; won&#x27;t be rewritten by command &quot;CONFIG REWRITE&quot;</span><br><span class="line"></span><br><span class="line"># from admin or Redis Sentinel. Since Redis always uses the last processed</span><br><span class="line"></span><br><span class="line"># line as value of a configuration directive, you&#x27;d better put includes</span><br><span class="line"></span><br><span class="line"># at the beginning of this file to avoid overwriting config change at runtime.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># If instead you are interested in using includes to override configuration</span><br><span class="line"></span><br><span class="line"># options, it is better to use include as the last line.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># include /path/to/local.conf</span><br><span class="line"></span><br><span class="line"># include /path/to/other.conf</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">################################## MODULES #####################################</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Load modules at startup. If the server is not able to load modules</span><br><span class="line"></span><br><span class="line"># it will abort. It is possible to use multiple loadmodule directives.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># loadmodule /path/to/my_module.so</span><br><span class="line"></span><br><span class="line"># loadmodule /path/to/other_module.so</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">################################## NETWORK #####################################</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># By default, if no &quot;bind&quot; configuration directive is specified, Redis listens</span><br><span class="line"></span><br><span class="line"># for connections from all the network interfaces available on the server.</span><br><span class="line"></span><br><span class="line"># It is possible to listen to just one or multiple selected interfaces using</span><br><span class="line"></span><br><span class="line"># the &quot;bind&quot; configuration directive, followed by one or more IP addresses.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Examples:</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># bind 192.168.1.100 10.0.0.1</span><br><span class="line"></span><br><span class="line"># bind 127.0.0.1 ::1</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the</span><br><span class="line"></span><br><span class="line"># internet, binding to all the interfaces is dangerous and will expose the</span><br><span class="line"></span><br><span class="line"># instance to everybody on the internet. So by default we uncomment the</span><br><span class="line"></span><br><span class="line"># following bind directive, that will force Redis to listen only into</span><br><span class="line"></span><br><span class="line"># the IPv4 loopback interface address (this means Redis will be able to</span><br><span class="line"></span><br><span class="line"># accept connections only from clients running into the same computer it</span><br><span class="line"></span><br><span class="line"># is running).</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES</span><br><span class="line"></span><br><span class="line"># JUST COMMENT THE FOLLOWING LINE.</span><br><span class="line"></span><br><span class="line"># ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line"></span><br><span class="line">#bind 127.0.0.1</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Protected mode is a layer of security protection, in order to avoid that</span><br><span class="line"></span><br><span class="line"># Redis instances left open on the internet are accessed and exploited.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># When protected mode is on and if:</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># 1) The server is not binding explicitly to a set of addresses using the</span><br><span class="line"></span><br><span class="line">#    &quot;bind&quot; directive.</span><br><span class="line"></span><br><span class="line"># 2) No password is configured.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># The server only accepts connections from clients connecting from the</span><br><span class="line"></span><br><span class="line"># IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain</span><br><span class="line"></span><br><span class="line"># sockets.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># By default protected mode is enabled. You should disable it only if</span><br><span class="line"></span><br><span class="line"># you are sure you want clients from other hosts to connect to Redis</span><br><span class="line"></span><br><span class="line"># even if no authentication is configured, nor a specific set of interfaces</span><br><span class="line"></span><br><span class="line"># are explicitly listed using the &quot;bind&quot; directive.</span><br><span class="line"></span><br><span class="line">protected-mode no</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Accept connections on the specified port, default is 6379 (IANA #815344).</span><br><span class="line"></span><br><span class="line"># If port 0 is specified Redis will not listen on a TCP socket.</span><br><span class="line"></span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># TCP listen() backlog.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># In high requests-per-second environments you need an high backlog in order</span><br><span class="line"></span><br><span class="line"># to avoid slow clients connections issues. Note that the Linux kernel</span><br><span class="line"></span><br><span class="line"># will silently truncate it to the value of /proc/sys/net/core/somaxconn so</span><br><span class="line"></span><br><span class="line"># make sure to raise both the value of somaxconn and tcp_max_syn_backlog</span><br><span class="line"></span><br><span class="line"># in order to get the desired effect.</span><br><span class="line"></span><br><span class="line">tcp-backlog 511</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Unix socket.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Specify the path for the Unix socket that will be used to listen for</span><br><span class="line"></span><br><span class="line"># incoming connections. There is no default, so Redis will not listen</span><br><span class="line"></span><br><span class="line"># on a unix socket when not specified.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># unixsocket /tmp/redis.sock</span><br><span class="line"></span><br><span class="line"># unixsocketperm 700</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Close the connection after a client is idle for N seconds (0 to disable)</span><br><span class="line"></span><br><span class="line">timeout 0</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># TCP keepalive.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence</span><br><span class="line"></span><br><span class="line"># of communication. This is useful for two reasons:</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># 1) Detect dead peers.</span><br><span class="line"></span><br><span class="line"># 2) Take the connection alive from the point of view of network</span><br><span class="line"></span><br><span class="line">#    equipment in the middle.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># On Linux, the specified value (in seconds) is the period used to send ACKs.</span><br><span class="line"></span><br><span class="line"># Note that to close the connection the double of the time is needed.</span><br><span class="line"></span><br><span class="line"># On other kernels the period depends on the kernel configuration.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># A reasonable value for this option is 300 seconds, which is the new</span><br><span class="line"></span><br><span class="line"># Redis default starting with Redis 3.2.1.</span><br><span class="line"></span><br><span class="line">tcp-keepalive 300</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">################################# GENERAL #####################################</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># By default Redis does not run as a daemon. Use &#x27;yes&#x27; if you need it.</span><br><span class="line"></span><br><span class="line"># Note that Redis will write a pid file in /var/run/redis.pid when daemonized.</span><br><span class="line"></span><br><span class="line">daemonize no</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># If you run Redis from upstart or systemd, Redis can interact with your</span><br><span class="line"></span><br><span class="line"># supervision tree. Options:</span><br><span class="line"></span><br><span class="line">#   supervised no      - no supervision interaction</span><br><span class="line"></span><br><span class="line">#   supervised upstart - signal upstart by putting Redis into SIGSTOP mode</span><br><span class="line"></span><br><span class="line">#   supervised systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET</span><br><span class="line"></span><br><span class="line">#   supervised auto    - detect upstart or systemd method based on</span><br><span class="line"></span><br><span class="line">#                        UPSTART_JOB or NOTIFY_SOCKET environment variables</span><br><span class="line"></span><br><span class="line"># Note: these supervision methods only signal &quot;process is ready.&quot;</span><br><span class="line"></span><br><span class="line">#       They do not enable continuous liveness pings back to your supervisor.</span><br><span class="line"></span><br><span class="line">supervised no</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># If a pid file is specified, Redis writes it where specified at startup</span><br><span class="line"></span><br><span class="line"># and removes it at exit.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># When the server runs non daemonized, no pid file is created if none is</span><br><span class="line"></span><br><span class="line"># specified in the configuration. When the server is daemonized, the pid file</span><br><span class="line"></span><br><span class="line"># is used even if not specified, defaulting to &quot;/var/run/redis.pid&quot;.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Creating a pid file is best effort: if Redis is not able to create it</span><br><span class="line"></span><br><span class="line"># nothing bad happens, the server will start and run normally.</span><br><span class="line"></span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Specify the server verbosity level.</span><br><span class="line"></span><br><span class="line"># This can be one of:</span><br><span class="line"></span><br><span class="line"># debug (a lot of information, useful for development/testing)</span><br><span class="line"></span><br><span class="line"># verbose (many rarely useful info, but not a mess like the debug level)</span><br><span class="line"></span><br><span class="line"># notice (moderately verbose, what you want in production probably)</span><br><span class="line"></span><br><span class="line"># warning (only very important / critical messages are logged)</span><br><span class="line"></span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Specify the log file name. Also the empty string can be used to force</span><br><span class="line"></span><br><span class="line"># Redis to log on the standard output. Note that if you use standard</span><br><span class="line"></span><br><span class="line"># output for logging but daemonize, logs will be sent to /dev/null</span><br><span class="line"></span><br><span class="line">logfile &quot;&quot;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># To enable logging to the system logger, just set &#x27;syslog-enabled&#x27; to yes,</span><br><span class="line"></span><br><span class="line"># and optionally update the other syslog parameters to suit your needs.</span><br><span class="line"></span><br><span class="line"># syslog-enabled no</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Specify the syslog identity.</span><br><span class="line"></span><br><span class="line"># syslog-ident redis</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.</span><br><span class="line"></span><br><span class="line"># syslog-facility local0</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Set the number of databases. The default database is DB 0, you can select</span><br><span class="line"></span><br><span class="line"># a different one on a per-connection basis using SELECT &lt;dbid&gt; where</span><br><span class="line"></span><br><span class="line"># dbid is a number between 0 and &#x27;databases&#x27;-1</span><br><span class="line"></span><br><span class="line">databases 16</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># By default Redis shows an ASCII art logo only when started to log to the</span><br><span class="line"></span><br><span class="line"># standard output and if the standard output is a TTY. Basically this means</span><br><span class="line"></span><br><span class="line"># that normally a logo is displayed only in interactive sessions.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># However it is possible to force the pre-4.0 behavior and always show a</span><br><span class="line"></span><br><span class="line"># ASCII art logo in startup logs by setting the following option to yes.</span><br><span class="line"></span><br><span class="line">always-show-logo yes</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">################################ SNAPSHOTTING  ################################</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Save the DB on disk:</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">#   save &lt;seconds&gt; &lt;changes&gt;</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">#   Will save the DB if both the given number of seconds and the given</span><br><span class="line"></span><br><span class="line">#   number of write operations against the DB occurred.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">#   In the example below the behaviour will be to save:</span><br><span class="line"></span><br><span class="line">#   after 900 sec (15 min) if at least 1 key changed</span><br><span class="line"></span><br><span class="line">#   after 300 sec (5 min) if at least 10 keys changed</span><br><span class="line"></span><br><span class="line">#   after 60 sec if at least 10000 keys changed</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">#   Note: you can disable saving completely by commenting out all &quot;save&quot; lines.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">#   It is also possible to remove all the previously configured save</span><br><span class="line"></span><br><span class="line">#   points by adding a save directive with a single empty string argument</span><br><span class="line"></span><br><span class="line">#   like in the following example:</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">#   save &quot;&quot;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">save 900 1</span><br><span class="line"></span><br><span class="line">save 300 10</span><br><span class="line"></span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># By default Redis will stop accepting writes if RDB snapshots are enabled</span><br><span class="line"></span><br><span class="line"># (at least one save point) and the latest background save failed.</span><br><span class="line"></span><br><span class="line"># This will make the user aware (in a hard way) that data is not persisting</span><br><span class="line"></span><br><span class="line"># on disk properly, otherwise chances are that no one will notice and some</span><br><span class="line"></span><br><span class="line"># disaster will happen.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># If the background saving process will start working again Redis will</span><br><span class="line"></span><br><span class="line"># automatically allow writes again.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># However if you have setup your proper monitoring of the Redis server</span><br><span class="line"></span><br><span class="line"># and persistence, you may want to disable this feature so that Redis will</span><br><span class="line"></span><br><span class="line"># continue to work as usual even if there are problems with disk,</span><br><span class="line"></span><br><span class="line"># permissions, and so forth.</span><br><span class="line"></span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Compress string objects using LZF when dump .rdb databases?</span><br><span class="line"></span><br><span class="line"># For default that&#x27;s set to &#x27;yes&#x27; as it&#x27;s almost always a win.</span><br><span class="line"></span><br><span class="line"># If you want to save some CPU in the saving child set it to &#x27;no&#x27; but</span><br><span class="line"></span><br><span class="line"># the dataset will likely be bigger if you have compressible values or keys.</span><br><span class="line"></span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Since version 5 of RDB a CRC64 checksum is placed at the end of the file.</span><br><span class="line"></span><br><span class="line"># This makes the format more resistant to corruption but there is a performance</span><br><span class="line"></span><br><span class="line"># hit to pay (around 10%) when saving and loading RDB files, so you can disable it</span><br><span class="line"></span><br><span class="line"># for maximum performances.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># RDB files created with checksum disabled have a checksum of zero that will</span><br><span class="line"></span><br><span class="line"># tell the loading code to skip the check.</span><br><span class="line"></span><br><span class="line">rdbchecksum yes</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># The filename where to dump the DB</span><br><span class="line"></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># The working directory.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># The DB will be written inside this directory, with the filename specified</span><br><span class="line"></span><br><span class="line"># above using the &#x27;dbfilename&#x27; configuration directive.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># The Append Only File will also be created inside this directory.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Note that you must specify a directory here, not a file name.</span><br><span class="line"></span><br><span class="line">dir ./</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">################################# REPLICATION #################################</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Master-Replica replication. Use replicaof to make a Redis instance a copy of</span><br><span class="line"></span><br><span class="line"># another Redis server. A few things to understand ASAP about Redis replication.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">#   +------------------+      +---------------+</span><br><span class="line"></span><br><span class="line">#   |      Master      | ---&gt; |    Replica    |</span><br><span class="line"></span><br><span class="line">#   | (receive writes) |      |  (exact copy) |</span><br><span class="line"></span><br><span class="line">#   +------------------+      +---------------+</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># 1) Redis replication is asynchronous, but you can configure a master to</span><br><span class="line"></span><br><span class="line">#    stop accepting writes if it appears to be not connected with at least</span><br><span class="line"></span><br><span class="line">#    a given number of replicas.</span><br><span class="line"></span><br><span class="line"># 2) Redis replicas are able to perform a partial resynchronization with the</span><br><span class="line"></span><br><span class="line">#    master if the replication link is lost for a relatively small amount of</span><br><span class="line"></span><br><span class="line">#    time. You may want to configure the replication backlog size (see the next</span><br><span class="line"></span><br><span class="line">#    sections of this file) with a sensible value depending on your needs.</span><br><span class="line"></span><br><span class="line"># 3) Replication is automatic and does not need user intervention. After a</span><br><span class="line"></span><br><span class="line">#    network partition replicas automatically try to reconnect to masters</span><br><span class="line"></span><br><span class="line">#    and resynchronize with them.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># replicaof &lt;masterip&gt; &lt;masterport&gt;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># If the master is password protected (using the &quot;requirepass&quot; configuration</span><br><span class="line"></span><br><span class="line"># directive below) it is possible to tell the replica to authenticate before</span><br><span class="line"></span><br><span class="line"># starting the replication synchronization process, otherwise the master will</span><br><span class="line"></span><br><span class="line"># refuse the replica request.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># masterauth &lt;master-password&gt;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># When a replica loses its connection with the master, or when the replication</span><br><span class="line"></span><br><span class="line"># is still in progress, the replica can act in two different ways:</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># 1) if replica-serve-stale-data is set to &#x27;yes&#x27; (the default) the replica will</span><br><span class="line"></span><br><span class="line">#    still reply to client requests, possibly with out of date data, or the</span><br><span class="line"></span><br><span class="line">#    data set may just be empty if this is the first synchronization.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># 2) if replica-serve-stale-data is set to &#x27;no&#x27; the replica will reply with</span><br><span class="line"></span><br><span class="line">#    an error &quot;SYNC with master in progress&quot; to all the kind of commands</span><br><span class="line"></span><br><span class="line">#    but to INFO, replicaOF, AUTH, PING, SHUTDOWN, REPLCONF, ROLE, CONFIG,</span><br><span class="line"></span><br><span class="line">#    SUBSCRIBE, UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, PUBLISH, PUBSUB,</span><br><span class="line"></span><br><span class="line">#    COMMAND, POST, HOST: and LATENCY.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">replica-serve-stale-data yes</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># You can configure a replica instance to accept writes or not. Writing against</span><br><span class="line"></span><br><span class="line"># a replica instance may be useful to store some ephemeral data (because data</span><br><span class="line"></span><br><span class="line"># written on a replica will be easily deleted after resync with the master) but</span><br><span class="line"></span><br><span class="line"># may also cause problems if clients are writing to it because of a</span><br><span class="line"></span><br><span class="line"># misconfiguration.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Since Redis 2.6 by default replicas are read-only.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Note: read only replicas are not designed to be exposed to untrusted clients</span><br><span class="line"></span><br><span class="line"># on the internet. It&#x27;s just a protection layer against misuse of the instance.</span><br><span class="line"></span><br><span class="line"># Still a read only replica exports by default all the administrative commands</span><br><span class="line"></span><br><span class="line"># such as CONFIG, DEBUG, and so forth. To a limited extent you can improve</span><br><span class="line"></span><br><span class="line"># security of read only replicas using &#x27;rename-command&#x27; to shadow all the</span><br><span class="line"></span><br><span class="line"># administrative / dangerous commands.</span><br><span class="line"></span><br><span class="line">replica-read-only yes</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Replication SYNC strategy: disk or socket.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># -------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># WARNING: DISKLESS REPLICATION IS EXPERIMENTAL CURRENTLY</span><br><span class="line"></span><br><span class="line"># -------------------------------------------------------</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># New replicas and reconnecting replicas that are not able to continue the replication</span><br><span class="line"></span><br><span class="line"># process just receiving differences, need to do what is called a &quot;full</span><br><span class="line"></span><br><span class="line"># synchronization&quot;. An RDB file is transmitted from the master to the replicas.</span><br><span class="line"></span><br><span class="line"># The transmission can happen in two different ways:</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># 1) Disk-backed: The Redis master creates a new process that writes the RDB</span><br><span class="line"></span><br><span class="line">#                 file on disk. Later the file is transferred by the parent</span><br><span class="line"></span><br><span class="line">#                 process to the replicas incrementally.</span><br><span class="line"></span><br><span class="line"># 2) Diskless: The Redis master creates a new process that directly writes the</span><br><span class="line"></span><br><span class="line">#              RDB file to replica sockets, without touching the disk at all.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># With disk-backed replication, while the RDB file is generated, more replicas</span><br><span class="line"></span><br><span class="line"># can be queued and served with the RDB file as soon as the current child producing</span><br><span class="line"></span><br><span class="line"># the RDB file finishes its work. With diskless replication instead once</span><br><span class="line"></span><br><span class="line"># the transfer starts, new replicas arriving will be queued and a new transfer</span><br><span class="line"></span><br><span class="line"># will start when the current one terminates.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># When diskless replication is used, the master waits a configurable amount of</span><br><span class="line"></span><br><span class="line"># time (in seconds) before starting the transfer in the hope that multiple replicas</span><br><span class="line"></span><br><span class="line"># will arrive and the transfer can be parallelized.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># With slow disks and fast (large bandwidth) networks, diskless replication</span><br><span class="line"></span><br><span class="line"># works better.</span><br><span class="line"></span><br><span class="line">repl-diskless-sync no</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># When diskless replication is enabled, it is possible to configure the delay</span><br><span class="line"></span><br><span class="line"># the server waits in order to spawn the child that transfers the RDB via socket</span><br><span class="line"></span><br><span class="line"># to the replicas.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># This is important since once the transfer starts, it is not possible to serve</span><br><span class="line"></span><br><span class="line"># new replicas arriving, that will be queued for the next RDB transfer, so the server</span><br><span class="line"></span><br><span class="line"># waits a delay in order to let more replicas arrive.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># The delay is specified in seconds, and by default is 5 seconds. To disable</span><br><span class="line"></span><br><span class="line"># it entirely just set it to 0 seconds and the transfer will start ASAP.</span><br><span class="line"></span><br><span class="line">repl-diskless-sync-delay 5</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Replicas send PINGs to server in a predefined interval. It&#x27;s possible to change</span><br><span class="line"></span><br><span class="line"># this interval with the repl_ping_replica_period option. The default value is 10</span><br><span class="line"></span><br><span class="line"># seconds.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># repl-ping-replica-period 10</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># The following option sets the replication timeout for:</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># 1) Bulk transfer I/O during SYNC, from the point of view of replica.</span><br><span class="line"></span><br><span class="line"># 2) Master timeout from the point of view of replicas (data, pings).</span><br><span class="line"></span><br><span class="line"># 3) Replica timeout from the point of view of masters (REPLCONF ACK pings).</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># It is important to make sure that this value is greater than the value</span><br><span class="line"></span><br><span class="line"># specified for repl-ping-replica-period otherwise a timeout will be detected</span><br><span class="line"></span><br><span class="line"># every time there is low traffic between the master and the replica.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># repl-timeout 60</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Disable TCP_NODELAY on the replica socket after SYNC?</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># If you select &quot;yes&quot; Redis will use a smaller number of TCP packets and</span><br><span class="line"></span><br><span class="line"># less bandwidth to send data to replicas. But this can add a delay for</span><br><span class="line"></span><br><span class="line"># the data to appear on the replica side, up to 40 milliseconds with</span><br><span class="line"></span><br><span class="line"># Linux kernels using a default configuration.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># If you select &quot;no&quot; the delay for data to appear on the replica side will</span><br><span class="line"></span><br><span class="line"># be reduced but more bandwidth will be used for replication.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># By default we optimize for low latency, but in very high traffic conditions</span><br><span class="line"></span><br><span class="line"># or when the master and replicas are many hops away, turning this to &quot;yes&quot; may</span><br><span class="line"></span><br><span class="line"># be a good idea.</span><br><span class="line"></span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Set the replication backlog size. The backlog is a buffer that accumulates</span><br><span class="line"></span><br><span class="line"># replica data when replicas are disconnected for some time, so that when a replica</span><br><span class="line"></span><br><span class="line"># wants to reconnect again, often a full resync is not needed, but a partial</span><br><span class="line"></span><br><span class="line"># resync is enough, just passing the portion of data the replica missed while</span><br><span class="line"></span><br><span class="line"># disconnected.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># The bigger the replication backlog, the longer the time the replica can be</span><br><span class="line"></span><br><span class="line"># disconnected and later be able to perform a partial resynchronization.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># The backlog is only allocated once there is at least a replica connected.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># repl-backlog-size 1mb</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># After a master has no longer connected replicas for some time, the backlog</span><br><span class="line"></span><br><span class="line"># will be freed. The following option configures the amount of seconds that</span><br><span class="line"></span><br><span class="line"># need to elapse, starting from the time the last replica disconnected, for</span><br><span class="line"></span><br><span class="line"># the backlog buffer to be freed.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Note that replicas never free the backlog for timeout, since they may be</span><br><span class="line"></span><br><span class="line"># promoted to masters later, and should be able to correctly &quot;partially</span><br><span class="line"></span><br><span class="line"># resynchronize&quot; with the replicas: hence they should always accumulate backlog.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># A value of 0 means to never release the backlog.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># repl-backlog-ttl 3600</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># The replica priority is an integer number published by Redis in the INFO output.</span><br><span class="line"></span><br><span class="line"># It is used by Redis Sentinel in order to select a replica to promote into a</span><br><span class="line"></span><br><span class="line"># master if the master is no longer working correctly.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># A replica with a low priority number is considered better for promotion, so</span><br><span class="line"></span><br><span class="line"># for instance if there are three replicas with priority 10, 100, 25 Sentinel will</span><br><span class="line"></span><br><span class="line"># pick the one with priority 10, that is the lowest.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># However a special priority of 0 marks the replica as not able to perform the</span><br><span class="line"></span><br><span class="line"># role of master, so a replica with priority of 0 will never be selected by</span><br><span class="line"></span><br><span class="line"># Redis Sentinel for promotion.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># By default the priority is 100.</span><br><span class="line"></span><br><span class="line">replica-priority 100</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># It is possible for a master to stop accepting writes if there are less than</span><br><span class="line"></span><br><span class="line"># N replicas connected, having a lag less or equal than M seconds.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># The N replicas need to be in &quot;online&quot; state.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># The lag in seconds, that must be &lt;= the specified value, is calculated from</span><br><span class="line"></span><br><span class="line"># the last ping received from the replica, that is usually sent every second.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># This option does not GUARANTEE that N replicas will accept the write, but</span><br><span class="line"></span><br><span class="line"># will limit the window of exposure for lost writes in case not enough replicas</span><br><span class="line"></span><br><span class="line"># are available, to the specified number of seconds.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># For example to require at least 3 replicas with a lag &lt;= 10 seconds use:</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># min-replicas-to-write 3</span><br><span class="line"></span><br><span class="line"># min-replicas-max-lag 10</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Setting one or the other to 0 disables the feature.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># By default min-replicas-to-write is set to 0 (feature disabled) and</span><br><span class="line"></span><br><span class="line"># min-replicas-max-lag is set to 10.</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># A Redis master is able to list the address and port of the attached</span><br><span class="line"></span><br><span class="line"># replicas in different ways. For example the &quot;INFO replication&quot; section</span><br><span class="line"></span><br><span class="line"># offers this information, which is used, among other tools, by</span><br><span class="line"></span><br><span class="line"># Redis Sentinel in order to discover replica instances.</span><br><span class="line"></span><br><span class="line"># Another place where this info is available is in the output of the</span><br><span class="line"></span><br><span class="line"># &quot;ROLE&quot; command of a master.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># The listed IP and address normally reported by a replica is obtained</span><br><span class="line"></span><br><span class="line"># in the following way:</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">#   IP: The address is auto detected by checking the peer address</span><br><span class="line"></span><br><span class="line">#   of the socket used by the replica to connect with the master.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">#   Port: The port is communicated by the replica during the replication</span><br><span class="line"></span><br><span class="line">#   handshake, and is normally the port that the replica is using to</span><br><span class="line"></span><br><span class="line">#   listen for connections.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># However when port forwarding or Network Address Translation (NAT) is</span><br><span class="line"></span><br><span class="line"># used, the replica may be actually reachable via different IP and port</span><br><span class="line"></span><br><span class="line"># pairs. The following two options can be used by a replica in order to</span><br><span class="line"></span><br><span class="line"># report to its master a specific set of IP and port, so that both INFO</span><br><span class="line"></span><br><span class="line"># and ROLE will report those values.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># There is no need to use both the options if you need to override just</span><br><span class="line"></span><br><span class="line"># the port or the IP address.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># replica-announce-ip 5.5.5.5</span><br><span class="line"></span><br><span class="line"># replica-announce-port 1234</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">################################## SECURITY ###################################</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Require clients to issue AUTH &lt;PASSWORD&gt; before processing any other</span><br><span class="line"></span><br><span class="line"># commands.  This might be useful in environments in which you do not trust</span><br><span class="line"></span><br><span class="line"># others with access to the host running redis-server.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># This should stay commented out for backward compatibility and because most</span><br><span class="line"></span><br><span class="line"># people do not need auth (e.g. they run their own servers).</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Warning: since Redis is pretty fast an outside user can try up to</span><br><span class="line"></span><br><span class="line"># 150k passwords per second against a good box. This means that you should</span><br><span class="line"></span><br><span class="line"># use a very strong password otherwise it will be very easy to break.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># requirepass foobared</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Command renaming.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># It is possible to change the name of dangerous commands in a shared</span><br><span class="line"></span><br><span class="line"># environment. For instance the CONFIG command may be renamed into something</span><br><span class="line"></span><br><span class="line"># hard to guess so that it will still be available for internal-use tools</span><br><span class="line"></span><br><span class="line"># but not available for general clients.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Example:</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># It is also possible to completely kill a command by renaming it into</span><br><span class="line"></span><br><span class="line"># an empty string:</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># rename-command CONFIG &quot;&quot;</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Please note that changing the name of commands that are logged into the</span><br><span class="line"></span><br><span class="line"># AOF file or transmitted to replicas may cause problems.</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">################################### CLIENTS ####################################</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Set the max number of connected clients at the same time. By default</span><br><span class="line"></span><br><span class="line"># this limit is set to 10000 clients, however if the Redis server is not</span><br><span class="line"></span><br><span class="line"># able to configure the process file limit to allow for the specified limit</span><br><span class="line"></span><br><span class="line"># the max number of allowed clients is set to the current file limit</span><br><span class="line"></span><br><span class="line"># minus 32 (as Redis reserves a few file descriptors for internal uses).</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Once the limit is reached Redis will close all the new connections sending</span><br><span class="line"></span><br><span class="line"># an error &#x27;max number of clients reached&#x27;.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># maxclients 10000</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">############################## MEMORY MANAGEMENT ################################</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Set a memory usage limit to the specified amount of bytes.</span><br><span class="line"></span><br><span class="line"># When the memory limit is reached Redis will try to remove keys</span><br><span class="line"></span><br><span class="line"># according to the eviction policy selected (see maxmemory-policy).</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># If Redis can&#x27;t remove keys according to the policy, or if the policy is</span><br><span class="line"></span><br><span class="line"># set to &#x27;noeviction&#x27;, Redis will start to reply with errors to commands</span><br><span class="line"></span><br><span class="line"># that would use more memory, like SET, LPUSH, and so on, and will continue</span><br><span class="line"></span><br><span class="line"># to reply to read-only commands like GET.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># This option is usually useful when using Redis as an LRU or LFU cache, or to</span><br><span class="line"></span><br><span class="line"># set a hard memory limit for an instance (using the &#x27;noeviction&#x27; policy).</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># WARNING: If you have replicas attached to an instance with maxmemory on,</span><br><span class="line"></span><br><span class="line"># the size of the output buffers needed to feed the replicas are subtracted</span><br><span class="line"></span><br><span class="line"># from the used memory count, so that network problems / resyncs will</span><br><span class="line"></span><br><span class="line"># not trigger a loop where keys are evicted, and in turn the output</span><br><span class="line"></span><br><span class="line"># buffer of replicas is full with DELs of keys evicted triggering the deletion</span><br><span class="line"></span><br><span class="line"># of more keys, and so forth until the database is completely emptied.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># In short... if you have replicas attached it is suggested that you set a lower</span><br><span class="line"></span><br><span class="line"># limit for maxmemory so that there is some free RAM on the system for replica</span><br><span class="line"></span><br><span class="line"># output buffers (but this is not needed if the policy is &#x27;noeviction&#x27;).</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># maxmemory &lt;bytes&gt;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># MAXMEMORY POLICY: how Redis will select what to remove when maxmemory</span><br><span class="line"></span><br><span class="line"># is reached. You can select among five behaviors:</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># volatile-lru -&gt; Evict using approximated LRU among the keys with an expire set.</span><br><span class="line"></span><br><span class="line"># allkeys-lru -&gt; Evict any key using approximated LRU.</span><br><span class="line"></span><br><span class="line"># volatile-lfu -&gt; Evict using approximated LFU among the keys with an expire set.</span><br><span class="line"></span><br><span class="line"># allkeys-lfu -&gt; Evict any key using approximated LFU.</span><br><span class="line"></span><br><span class="line"># volatile-random -&gt; Remove a random key among the ones with an expire set.</span><br><span class="line"></span><br><span class="line"># allkeys-random -&gt; Remove a random key, any key.</span><br><span class="line"></span><br><span class="line"># volatile-ttl -&gt; Remove the key with the nearest expire time (minor TTL)</span><br><span class="line"></span><br><span class="line"># noeviction -&gt; Don&#x27;t evict anything, just return an error on write operations.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># LRU means Least Recently Used</span><br><span class="line"></span><br><span class="line"># LFU means Least Frequently Used</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Both LRU, LFU and volatile-ttl are implemented using approximated</span><br><span class="line"></span><br><span class="line"># randomized algorithms.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Note: with any of the above policies, Redis will return an error on write</span><br><span class="line"></span><br><span class="line">#       operations, when there are no suitable keys for eviction.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">#       At the date of writing these commands are: set setnx setex append</span><br><span class="line"></span><br><span class="line">#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd</span><br><span class="line"></span><br><span class="line">#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby</span><br><span class="line"></span><br><span class="line">#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby</span><br><span class="line"></span><br><span class="line">#       getset mset msetnx exec sort</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># The default is:</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># maxmemory-policy noeviction</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># LRU, LFU and minimal TTL algorithms are not precise algorithms but approximated</span><br><span class="line"></span><br><span class="line"># algorithms (in order to save memory), so you can tune it for speed or</span><br><span class="line"></span><br><span class="line"># accuracy. For default Redis will check five keys and pick the one that was</span><br><span class="line"></span><br><span class="line"># used less recently, you can change the sample size using the following</span><br><span class="line"></span><br><span class="line"># configuration directive.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># The default of 5 produces good enough results. 10 Approximates very closely</span><br><span class="line"></span><br><span class="line"># true LRU but costs more CPU. 3 is faster but not very accurate.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># maxmemory-samples 5</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Starting from Redis 5, by default a replica will ignore its maxmemory setting</span><br><span class="line"></span><br><span class="line"># (unless it is promoted to master after a failover or manually). It means</span><br><span class="line"></span><br><span class="line"># that the eviction of keys will be just handled by the master, sending the</span><br><span class="line"></span><br><span class="line"># DEL commands to the replica as keys evict in the master side.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># This behavior ensures that masters and replicas stay consistent, and is usually</span><br><span class="line"></span><br><span class="line"># what you want, however if your replica is writable, or you want the replica to have</span><br><span class="line"></span><br><span class="line"># a different memory setting, and you are sure all the writes performed to the</span><br><span class="line"></span><br><span class="line"># replica are idempotent, then you may change this default (but be sure to understand</span><br><span class="line"></span><br><span class="line"># what you are doing).</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Note that since the replica by default does not evict, it may end using more</span><br><span class="line"></span><br><span class="line"># memory than the one set via maxmemory (there are certain buffers that may</span><br><span class="line"></span><br><span class="line"># be larger on the replica, or data structures may sometimes take more memory and so</span><br><span class="line"></span><br><span class="line"># forth). So make sure you monitor your replicas and make sure they have enough</span><br><span class="line"></span><br><span class="line"># memory to never hit a real out-of-memory condition before the master hits</span><br><span class="line"></span><br><span class="line"># the configured maxmemory setting.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># replica-ignore-maxmemory yes</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">############################# LAZY FREEING ####################################</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Redis has two primitives to delete keys. One is called DEL and is a blocking</span><br><span class="line"></span><br><span class="line"># deletion of the object. It means that the server stops processing new commands</span><br><span class="line"></span><br><span class="line"># in order to reclaim all the memory associated with an object in a synchronous</span><br><span class="line"></span><br><span class="line"># way. If the key deleted is associated with a small object, the time needed</span><br><span class="line"></span><br><span class="line"># in order to execute the DEL command is very small and comparable to most other</span><br><span class="line"></span><br><span class="line"># O(1) or O(log_N) commands in Redis. However if the key is associated with an</span><br><span class="line"></span><br><span class="line"># aggregated value containing millions of elements, the server can block for</span><br><span class="line"></span><br><span class="line"># a long time (even seconds) in order to complete the operation.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># For the above reasons Redis also offers non blocking deletion primitives</span><br><span class="line"></span><br><span class="line"># such as UNLINK (non blocking DEL) and the ASYNC option of FLUSHALL and</span><br><span class="line"></span><br><span class="line"># FLUSHDB commands, in order to reclaim memory in background. Those commands</span><br><span class="line"></span><br><span class="line"># are executed in constant time. Another thread will incrementally free the</span><br><span class="line"></span><br><span class="line"># object in the background as fast as possible.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># DEL, UNLINK and ASYNC option of FLUSHALL and FLUSHDB are user-controlled.</span><br><span class="line"></span><br><span class="line"># It&#x27;s up to the design of the application to understand when it is a good</span><br><span class="line"></span><br><span class="line"># idea to use one or the other. However the Redis server sometimes has to</span><br><span class="line"></span><br><span class="line"># delete keys or flush the whole database as a side effect of other operations.</span><br><span class="line"></span><br><span class="line"># Specifically Redis deletes objects independently of a user call in the</span><br><span class="line"></span><br><span class="line"># following scenarios:</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># 1) On eviction, because of the maxmemory and maxmemory policy configurations,</span><br><span class="line"></span><br><span class="line">#    in order to make room for new data, without going over the specified</span><br><span class="line"></span><br><span class="line">#    memory limit.</span><br><span class="line"></span><br><span class="line"># 2) Because of expire: when a key with an associated time to live (see the</span><br><span class="line"></span><br><span class="line">#    EXPIRE command) must be deleted from memory.</span><br><span class="line"></span><br><span class="line"># 3) Because of a side effect of a command that stores data on a key that may</span><br><span class="line"></span><br><span class="line">#    already exist. For example the RENAME command may delete the old key</span><br><span class="line"></span><br><span class="line">#    content when it is replaced with another one. Similarly SUNIONSTORE</span><br><span class="line"></span><br><span class="line">#    or SORT with STORE option may delete existing keys. The SET command</span><br><span class="line"></span><br><span class="line">#    itself removes any old content of the specified key in order to replace</span><br><span class="line"></span><br><span class="line">#    it with the specified string.</span><br><span class="line"></span><br><span class="line"># 4) During replication, when a replica performs a full resynchronization with</span><br><span class="line"></span><br><span class="line">#    its master, the content of the whole database is removed in order to</span><br><span class="line"></span><br><span class="line">#    load the RDB file just transferred.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># In all the above cases the default is to delete objects in a blocking way,</span><br><span class="line"></span><br><span class="line"># like if DEL was called. However you can configure each case specifically</span><br><span class="line"></span><br><span class="line"># in order to instead release memory in a non-blocking way like if UNLINK</span><br><span class="line"></span><br><span class="line"># was called, using the following configuration directives:</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">lazyfree-lazy-eviction no</span><br><span class="line"></span><br><span class="line">lazyfree-lazy-expire no</span><br><span class="line"></span><br><span class="line">lazyfree-lazy-server-del no</span><br><span class="line"></span><br><span class="line">replica-lazy-flush no</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">############################## APPEND ONLY MODE ###############################</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># By default Redis asynchronously dumps the dataset on disk. This mode is</span><br><span class="line"></span><br><span class="line"># good enough in many applications, but an issue with the Redis process or</span><br><span class="line"></span><br><span class="line"># a power outage may result into a few minutes of writes lost (depending on</span><br><span class="line"></span><br><span class="line"># the configured save points).</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># The Append Only File is an alternative persistence mode that provides</span><br><span class="line"></span><br><span class="line"># much better durability. For instance using the default data fsync policy</span><br><span class="line"></span><br><span class="line"># (see later in the config file) Redis can lose just one second of writes in a</span><br><span class="line"></span><br><span class="line"># dramatic event like a server power outage, or a single write if something</span><br><span class="line"></span><br><span class="line"># wrong with the Redis process itself happens, but the operating system is</span><br><span class="line"></span><br><span class="line"># still running correctly.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># AOF and RDB persistence can be enabled at the same time without problems.</span><br><span class="line"></span><br><span class="line"># If the AOF is enabled on startup Redis will load the AOF, that is the file</span><br><span class="line"></span><br><span class="line"># with the better durability guarantees.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Please check http://redis.io/topics/persistence for more information.</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># The name of the append only file (default: &quot;appendonly.aof&quot;)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># The fsync() call tells the Operating System to actually write data on disk</span><br><span class="line"></span><br><span class="line"># instead of waiting for more data in the output buffer. Some OS will really flush</span><br><span class="line"></span><br><span class="line"># data on disk, some other OS will just try to do it ASAP.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Redis supports three different modes:</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># no: don&#x27;t fsync, just let the OS flush the data when it wants. Faster.</span><br><span class="line"></span><br><span class="line"># always: fsync after every write to the append only log. Slow, Safest.</span><br><span class="line"></span><br><span class="line"># everysec: fsync only one time every second. Compromise.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># The default is &quot;everysec&quot;, as that&#x27;s usually the right compromise between</span><br><span class="line"></span><br><span class="line"># speed and data safety. It&#x27;s up to you to understand if you can relax this to</span><br><span class="line"></span><br><span class="line"># &quot;no&quot; that will let the operating system flush the output buffer when</span><br><span class="line"></span><br><span class="line"># it wants, for better performances (but if you can live with the idea of</span><br><span class="line"></span><br><span class="line"># some data loss consider the default persistence mode that&#x27;s snapshotting),</span><br><span class="line"></span><br><span class="line"># or on the contrary, use &quot;always&quot; that&#x27;s very slow but a bit safer than</span><br><span class="line"></span><br><span class="line"># everysec.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># More details please check the following article:</span><br><span class="line"></span><br><span class="line"># http://antirez.com/post/redis-persistence-demystified.html</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># If unsure, use &quot;everysec&quot;.</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># appendfsync always</span><br><span class="line"></span><br><span class="line">appendfsync everysec</span><br><span class="line"></span><br><span class="line"># appendfsync no</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># When the AOF fsync policy is set to always or everysec, and a background</span><br><span class="line"></span><br><span class="line"># saving process (a background save or AOF log background rewriting) is</span><br><span class="line"></span><br><span class="line"># performing a lot of I/O against the disk, in some Linux configurations</span><br><span class="line"></span><br><span class="line"># Redis may block too long on the fsync() call. Note that there is no fix for</span><br><span class="line"></span><br><span class="line"># this currently, as even performing fsync in a different thread will block</span><br><span class="line"></span><br><span class="line"># our synchronous write(2) call.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># In order to mitigate this problem it&#x27;s possible to use the following option</span><br><span class="line"></span><br><span class="line"># that will prevent fsync() from being called in the main process while a</span><br><span class="line"></span><br><span class="line"># BGSAVE or BGREWRITEAOF is in progress.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># This means that while another child is saving, the durability of Redis is</span><br><span class="line"></span><br><span class="line"># the same as &quot;appendfsync none&quot;. In practical terms, this means that it is</span><br><span class="line"></span><br><span class="line"># possible to lose up to 30 seconds of log in the worst scenario (with the</span><br><span class="line"></span><br><span class="line"># default Linux settings).</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># If you have latency problems turn this to &quot;yes&quot;. Otherwise leave it as</span><br><span class="line"></span><br><span class="line"># &quot;no&quot; that is the safest pick from the point of view of durability.</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Automatic rewrite of the append only file.</span><br><span class="line"></span><br><span class="line"># Redis is able to automatically rewrite the log file implicitly calling</span><br><span class="line"></span><br><span class="line"># BGREWRITEAOF when the AOF log size grows by the specified percentage.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># This is how it works: Redis remembers the size of the AOF file after the</span><br><span class="line"></span><br><span class="line"># latest rewrite (if no rewrite has happened since the restart, the size of</span><br><span class="line"></span><br><span class="line"># the AOF at startup is used).</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># This base size is compared to the current size. If the current size is</span><br><span class="line"></span><br><span class="line"># bigger than the specified percentage, the rewrite is triggered. Also</span><br><span class="line"></span><br><span class="line"># you need to specify a minimal size for the AOF file to be rewritten, this</span><br><span class="line"></span><br><span class="line"># is useful to avoid rewriting the AOF file even if the percentage increase</span><br><span class="line"></span><br><span class="line"># is reached but it is still pretty small.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Specify a percentage of zero in order to disable the automatic AOF</span><br><span class="line"></span><br><span class="line"># rewrite feature.</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line"></span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># An AOF file may be found to be truncated at the end during the Redis</span><br><span class="line"></span><br><span class="line"># startup process, when the AOF data gets loaded back into memory.</span><br><span class="line"></span><br><span class="line"># This may happen when the system where Redis is running</span><br><span class="line"></span><br><span class="line"># crashes, especially when an ext4 filesystem is mounted without the</span><br><span class="line"></span><br><span class="line"># data=ordered option (however this can&#x27;t happen when Redis itself</span><br><span class="line"></span><br><span class="line"># crashes or aborts but the operating system still works correctly).</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Redis can either exit with an error when this happens, or load as much</span><br><span class="line"></span><br><span class="line"># data as possible (the default now) and start if the AOF file is found</span><br><span class="line"></span><br><span class="line"># to be truncated at the end. The following option controls this behavior.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># If aof-load-truncated is set to yes, a truncated AOF file is loaded and</span><br><span class="line"></span><br><span class="line"># the Redis server starts emitting a log to inform the user of the event.</span><br><span class="line"></span><br><span class="line"># Otherwise if the option is set to no, the server aborts with an error</span><br><span class="line"></span><br><span class="line"># and refuses to start. When the option is set to no, the user requires</span><br><span class="line"></span><br><span class="line"># to fix the AOF file using the &quot;redis-check-aof&quot; utility before to restart</span><br><span class="line"></span><br><span class="line"># the server.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Note that if the AOF file will be found to be corrupted in the middle</span><br><span class="line"></span><br><span class="line"># the server will still exit with an error. This option only applies when</span><br><span class="line"></span><br><span class="line"># Redis will try to read more data from the AOF file but not enough bytes</span><br><span class="line"></span><br><span class="line"># will be found.</span><br><span class="line"></span><br><span class="line">aof-load-truncated yes</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># When rewriting the AOF file, Redis is able to use an RDB preamble in the</span><br><span class="line"></span><br><span class="line"># AOF file for faster rewrites and recoveries. When this option is turned</span><br><span class="line"></span><br><span class="line"># on the rewritten AOF file is composed of two different stanzas:</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">#   [RDB file][AOF tail]</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># When loading Redis recognizes that the AOF file starts with the &quot;REDIS&quot;</span><br><span class="line"></span><br><span class="line"># string and loads the prefixed RDB file, and continues loading the AOF</span><br><span class="line"></span><br><span class="line"># tail.</span><br><span class="line"></span><br><span class="line">aof-use-rdb-preamble yes</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">################################ LUA SCRIPTING  ###############################</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Max execution time of a Lua script in milliseconds.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># If the maximum execution time is reached Redis will log that a script is</span><br><span class="line"></span><br><span class="line"># still in execution after the maximum allowed time and will start to</span><br><span class="line"></span><br><span class="line"># reply to queries with an error.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># When a long running script exceeds the maximum execution time only the</span><br><span class="line"></span><br><span class="line"># SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be</span><br><span class="line"></span><br><span class="line"># used to stop a script that did not yet called write commands. The second</span><br><span class="line"></span><br><span class="line"># is the only way to shut down the server in the case a write command was</span><br><span class="line"></span><br><span class="line"># already issued by the script but the user doesn&#x27;t want to wait for the natural</span><br><span class="line"></span><br><span class="line"># termination of the script.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Set it to 0 or a negative value for unlimited execution without warnings.</span><br><span class="line"></span><br><span class="line">lua-time-limit 5000</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">################################ REDIS CLUSTER  ###############################</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Normal Redis instances can&#x27;t be part of a Redis Cluster; only nodes that are</span><br><span class="line"></span><br><span class="line"># started as cluster nodes can. In order to start a Redis instance as a</span><br><span class="line"></span><br><span class="line"># cluster node enable the cluster support uncommenting the following:</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># cluster-enabled yes</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Every cluster node has a cluster configuration file. This file is not</span><br><span class="line"></span><br><span class="line"># intended to be edited by hand. It is created and updated by Redis nodes.</span><br><span class="line"></span><br><span class="line"># Every Redis Cluster node requires a different cluster configuration file.</span><br><span class="line"></span><br><span class="line"># Make sure that instances running in the same system do not have</span><br><span class="line"></span><br><span class="line"># overlapping cluster configuration file names.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># cluster-config-file nodes-6379.conf</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Cluster node timeout is the amount of milliseconds a node must be unreachable</span><br><span class="line"></span><br><span class="line"># for it to be considered in failure state.</span><br><span class="line"></span><br><span class="line"># Most other internal time limits are multiple of the node timeout.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># cluster-node-timeout 15000</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># A replica of a failing master will avoid to start a failover if its data</span><br><span class="line"></span><br><span class="line"># looks too old.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># There is no simple way for a replica to actually have an exact measure of</span><br><span class="line"></span><br><span class="line"># its &quot;data age&quot;, so the following two checks are performed:</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># 1) If there are multiple replicas able to failover, they exchange messages</span><br><span class="line"></span><br><span class="line">#    in order to try to give an advantage to the replica with the best</span><br><span class="line"></span><br><span class="line">#    replication offset (more data from the master processed).</span><br><span class="line"></span><br><span class="line">#    Replicas will try to get their rank by offset, and apply to the start</span><br><span class="line"></span><br><span class="line">#    of the failover a delay proportional to their rank.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># 2) Every single replica computes the time of the last interaction with</span><br><span class="line"></span><br><span class="line">#    its master. This can be the last ping or command received (if the master</span><br><span class="line"></span><br><span class="line">#    is still in the &quot;connected&quot; state), or the time that elapsed since the</span><br><span class="line"></span><br><span class="line">#    disconnection with the master (if the replication link is currently down).</span><br><span class="line"></span><br><span class="line">#    If the last interaction is too old, the replica will not try to failover</span><br><span class="line"></span><br><span class="line">#    at all.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># The point &quot;2&quot; can be tuned by user. Specifically a replica will not perform</span><br><span class="line"></span><br><span class="line"># the failover if, since the last interaction with the master, the time</span><br><span class="line"></span><br><span class="line"># elapsed is greater than:</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">#   (node-timeout * replica-validity-factor) + repl-ping-replica-period</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># So for example if node-timeout is 30 seconds, and the replica-validity-factor</span><br><span class="line"></span><br><span class="line"># is 10, and assuming a default repl-ping-replica-period of 10 seconds, the</span><br><span class="line"></span><br><span class="line"># replica will not try to failover if it was not able to talk with the master</span><br><span class="line"></span><br><span class="line"># for longer than 310 seconds.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># A large replica-validity-factor may allow replicas with too old data to failover</span><br><span class="line"></span><br><span class="line"># a master, while a too small value may prevent the cluster from being able to</span><br><span class="line"></span><br><span class="line"># elect a replica at all.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># For maximum availability, it is possible to set the replica-validity-factor</span><br><span class="line"></span><br><span class="line"># to a value of 0, which means, that replicas will always try to failover the</span><br><span class="line"></span><br><span class="line"># master regardless of the last time they interacted with the master.</span><br><span class="line"></span><br><span class="line"># (However they&#x27;ll always try to apply a delay proportional to their</span><br><span class="line"></span><br><span class="line"># offset rank).</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Zero is the only value able to guarantee that when all the partitions heal</span><br><span class="line"></span><br><span class="line"># the cluster will always be able to continue.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># cluster-replica-validity-factor 10</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Cluster replicas are able to migrate to orphaned masters, that are masters</span><br><span class="line"></span><br><span class="line"># that are left without working replicas. This improves the cluster ability</span><br><span class="line"></span><br><span class="line"># to resist to failures as otherwise an orphaned master can&#x27;t be failed over</span><br><span class="line"></span><br><span class="line"># in case of failure if it has no working replicas.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Replicas migrate to orphaned masters only if there are still at least a</span><br><span class="line"></span><br><span class="line"># given number of other working replicas for their old master. This number</span><br><span class="line"></span><br><span class="line"># is the &quot;migration barrier&quot;. A migration barrier of 1 means that a replica</span><br><span class="line"></span><br><span class="line"># will migrate only if there is at least 1 other working replica for its master</span><br><span class="line"></span><br><span class="line"># and so forth. It usually reflects the number of replicas you want for every</span><br><span class="line"></span><br><span class="line"># master in your cluster.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Default is 1 (replicas migrate only if their masters remain with at least</span><br><span class="line"></span><br><span class="line"># one replica). To disable migration just set it to a very large value.</span><br><span class="line"></span><br><span class="line"># A value of 0 can be set but is useful only for debugging and dangerous</span><br><span class="line"></span><br><span class="line"># in production.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># cluster-migration-barrier 1</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># By default Redis Cluster nodes stop accepting queries if they detect there</span><br><span class="line"></span><br><span class="line"># is at least an hash slot uncovered (no available node is serving it).</span><br><span class="line"></span><br><span class="line"># This way if the cluster is partially down (for example a range of hash slots</span><br><span class="line"></span><br><span class="line"># are no longer covered) all the cluster becomes, eventually, unavailable.</span><br><span class="line"></span><br><span class="line"># It automatically returns available as soon as all the slots are covered again.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># However sometimes you want the subset of the cluster which is working,</span><br><span class="line"></span><br><span class="line"># to continue to accept queries for the part of the key space that is still</span><br><span class="line"></span><br><span class="line"># covered. In order to do so, just set the cluster-require-full-coverage</span><br><span class="line"></span><br><span class="line"># option to no.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># cluster-require-full-coverage yes</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># This option, when set to yes, prevents replicas from trying to failover its</span><br><span class="line"></span><br><span class="line"># master during master failures. However the master can still perform a</span><br><span class="line"></span><br><span class="line"># manual failover, if forced to do so.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># This is useful in different scenarios, especially in the case of multiple</span><br><span class="line"></span><br><span class="line"># data center operations, where we want one side to never be promoted if not</span><br><span class="line"></span><br><span class="line"># in the case of a total DC failure.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># cluster-replica-no-failover no</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># In order to setup your cluster make sure to read the documentation</span><br><span class="line"></span><br><span class="line"># available at http://redis.io web site.</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">########################## CLUSTER DOCKER/NAT support  ########################</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># In certain deployments, Redis Cluster nodes address discovery fails, because</span><br><span class="line"></span><br><span class="line"># addresses are NAT-ted or because ports are forwarded (the typical case is</span><br><span class="line"></span><br><span class="line"># Docker and other containers).</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># In order to make Redis Cluster working in such environments, a static</span><br><span class="line"></span><br><span class="line"># configuration where each node knows its public address is needed. The</span><br><span class="line"></span><br><span class="line"># following two options are used for this scope, and are:</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># * cluster-announce-ip</span><br><span class="line"></span><br><span class="line"># * cluster-announce-port</span><br><span class="line"></span><br><span class="line"># * cluster-announce-bus-port</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Each instruct the node about its address, client port, and cluster message</span><br><span class="line"></span><br><span class="line"># bus port. The information is then published in the header of the bus packets</span><br><span class="line"></span><br><span class="line"># so that other nodes will be able to correctly map the address of the node</span><br><span class="line"></span><br><span class="line"># publishing the information.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># If the above options are not used, the normal Redis Cluster auto-detection</span><br><span class="line"></span><br><span class="line"># will be used instead.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Note that when remapped, the bus port may not be at the fixed offset of</span><br><span class="line"></span><br><span class="line"># clients port + 10000, so you can specify any port and bus-port depending</span><br><span class="line"></span><br><span class="line"># on how they get remapped. If the bus-port is not set, a fixed offset of</span><br><span class="line"></span><br><span class="line"># 10000 will be used as usually.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Example:</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># cluster-announce-ip 10.1.1.5</span><br><span class="line"></span><br><span class="line"># cluster-announce-port 6379</span><br><span class="line"></span><br><span class="line"># cluster-announce-bus-port 6380</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">################################## SLOW LOG ###################################</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># The Redis Slow Log is a system to log queries that exceeded a specified</span><br><span class="line"></span><br><span class="line"># execution time. The execution time does not include the I/O operations</span><br><span class="line"></span><br><span class="line"># like talking with the client, sending the reply and so forth,</span><br><span class="line"></span><br><span class="line"># but just the time needed to actually execute the command (this is the only</span><br><span class="line"></span><br><span class="line"># stage of command execution where the thread is blocked and can not serve</span><br><span class="line"></span><br><span class="line"># other requests in the meantime).</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># You can configure the slow log with two parameters: one tells Redis</span><br><span class="line"></span><br><span class="line"># what is the execution time, in microseconds, to exceed in order for the</span><br><span class="line"></span><br><span class="line"># command to get logged, and the other parameter is the length of the</span><br><span class="line"></span><br><span class="line"># slow log. When a new command is logged the oldest one is removed from the</span><br><span class="line"></span><br><span class="line"># queue of logged commands.</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># The following time is expressed in microseconds, so 1000000 is equivalent</span><br><span class="line"></span><br><span class="line"># to one second. Note that a negative number disables the slow log, while</span><br><span class="line"></span><br><span class="line"># a value of zero forces the logging of every command.</span><br><span class="line"></span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># There is no limit to this length. Just be aware that it will consume memory.</span><br><span class="line"></span><br><span class="line"># You can reclaim memory used by the slow log with SLOWLOG RESET.</span><br><span class="line"></span><br><span class="line">slowlog-max-len 128</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">################################ LATENCY MONITOR ##############################</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># The Redis latency monitoring subsystem samples different operations</span><br><span class="line"></span><br><span class="line"># at runtime in order to collect data related to possible sources of</span><br><span class="line"></span><br><span class="line"># latency of a Redis instance.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Via the LATENCY command this information is available to the user that can</span><br><span class="line"></span><br><span class="line"># print graphs and obtain reports.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># The system only logs operations that were performed in a time equal or</span><br><span class="line"></span><br><span class="line"># greater than the amount of milliseconds specified via the</span><br><span class="line"></span><br><span class="line"># latency-monitor-threshold configuration directive. When its value is set</span><br><span class="line"></span><br><span class="line"># to zero, the latency monitor is turned off.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># By default latency monitoring is disabled since it is mostly not needed</span><br><span class="line"></span><br><span class="line"># if you don&#x27;t have latency issues, and collecting data has a performance</span><br><span class="line"></span><br><span class="line"># impact, that while very small, can be measured under big load. Latency</span><br><span class="line"></span><br><span class="line"># monitoring can easily be enabled at runtime using the command</span><br><span class="line"></span><br><span class="line"># &quot;CONFIG SET latency-monitor-threshold &lt;milliseconds&gt;&quot; if needed.</span><br><span class="line"></span><br><span class="line">latency-monitor-threshold 0</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">############################# EVENT NOTIFICATION ##############################</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Redis can notify Pub/Sub clients about events happening in the key space.</span><br><span class="line"></span><br><span class="line"># This feature is documented at http://redis.io/topics/notifications</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># For instance if keyspace events notification is enabled, and a client</span><br><span class="line"></span><br><span class="line"># performs a DEL operation on key &quot;foo&quot; stored in the Database 0, two</span><br><span class="line"></span><br><span class="line"># messages will be published via Pub/Sub:</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># PUBLISH __keyspace@0__:foo del</span><br><span class="line"></span><br><span class="line"># PUBLISH __keyevent@0__:del foo</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># It is possible to select the events that Redis will notify among a set</span><br><span class="line"></span><br><span class="line"># of classes. Every class is identified by a single character:</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">#  K     Keyspace events, published with __keyspace@&lt;db&gt;__ prefix.</span><br><span class="line"></span><br><span class="line">#  E     Keyevent events, published with __keyevent@&lt;db&gt;__ prefix.</span><br><span class="line"></span><br><span class="line">#  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...</span><br><span class="line"></span><br><span class="line">#  $     String commands</span><br><span class="line"></span><br><span class="line">#  l     List commands</span><br><span class="line"></span><br><span class="line">#  s     Set commands</span><br><span class="line"></span><br><span class="line">#  h     Hash commands</span><br><span class="line"></span><br><span class="line">#  z     Sorted set commands</span><br><span class="line"></span><br><span class="line">#  x     Expired events (events generated every time a key expires)</span><br><span class="line"></span><br><span class="line">#  e     Evicted events (events generated when a key is evicted for maxmemory)</span><br><span class="line"></span><br><span class="line">#  A     Alias for g$lshzxe, so that the &quot;AKE&quot; string means all the events.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">#  The &quot;notify-keyspace-events&quot; takes as argument a string that is composed</span><br><span class="line"></span><br><span class="line">#  of zero or multiple characters. The empty string means that notifications</span><br><span class="line"></span><br><span class="line">#  are disabled.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">#  Example: to enable list and generic events, from the point of view of the</span><br><span class="line"></span><br><span class="line">#           event name, use:</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">#  notify-keyspace-events Elg</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">#  Example 2: to get the stream of the expired keys subscribing to channel</span><br><span class="line"></span><br><span class="line">#             name __keyevent@0__:expired use:</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">  notify-keyspace-events Ex</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">#  By default all notifications are disabled because most users don&#x27;t need</span><br><span class="line"></span><br><span class="line">#  this feature and the feature has some overhead. Note that if you don&#x27;t</span><br><span class="line"></span><br><span class="line">#  specify at least one of K or E, no events will be delivered.</span><br><span class="line"></span><br><span class="line">#notify-keyspace-events &quot;&quot;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">############################### ADVANCED CONFIG ###############################</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Hashes are encoded using a memory efficient data structure when they have a</span><br><span class="line"></span><br><span class="line"># small number of entries, and the biggest entry does not exceed a given</span><br><span class="line"></span><br><span class="line"># threshold. These thresholds can be configured using the following directives.</span><br><span class="line"></span><br><span class="line">hash-max-ziplist-entries 512</span><br><span class="line"></span><br><span class="line">hash-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Lists are also encoded in a special way to save a lot of space.</span><br><span class="line"></span><br><span class="line"># The number of entries allowed per internal list node can be specified</span><br><span class="line"></span><br><span class="line"># as a fixed maximum size or a maximum number of elements.</span><br><span class="line"></span><br><span class="line"># For a fixed maximum size, use -5 through -1, meaning:</span><br><span class="line"></span><br><span class="line"># -5: max size: 64 Kb  &lt;-- not recommended for normal workloads</span><br><span class="line"></span><br><span class="line"># -4: max size: 32 Kb  &lt;-- not recommended</span><br><span class="line"></span><br><span class="line"># -3: max size: 16 Kb  &lt;-- probably not recommended</span><br><span class="line"></span><br><span class="line"># -2: max size: 8 Kb   &lt;-- good</span><br><span class="line"></span><br><span class="line"># -1: max size: 4 Kb   &lt;-- good</span><br><span class="line"></span><br><span class="line"># Positive numbers mean store up to _exactly_ that number of elements</span><br><span class="line"></span><br><span class="line"># per list node.</span><br><span class="line"></span><br><span class="line"># The highest performing option is usually -2 (8 Kb size) or -1 (4 Kb size),</span><br><span class="line"></span><br><span class="line"># but if your use case is unique, adjust the settings as necessary.</span><br><span class="line"></span><br><span class="line">list-max-ziplist-size -2</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Lists may also be compressed.</span><br><span class="line"></span><br><span class="line"># Compress depth is the number of quicklist ziplist nodes from *each* side of</span><br><span class="line"></span><br><span class="line"># the list to *exclude* from compression.  The head and tail of the list</span><br><span class="line"></span><br><span class="line"># are always uncompressed for fast push/pop operations.  Settings are:</span><br><span class="line"></span><br><span class="line"># 0: disable all list compression</span><br><span class="line"></span><br><span class="line"># 1: depth 1 means &quot;don&#x27;t start compressing until after 1 node into the list,</span><br><span class="line"></span><br><span class="line">#    going from either the head or tail&quot;</span><br><span class="line"></span><br><span class="line">#    So: [head]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[tail]</span><br><span class="line"></span><br><span class="line">#    [head], [tail] will always be uncompressed; inner nodes will compress.</span><br><span class="line"></span><br><span class="line"># 2: [head]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[tail]</span><br><span class="line"></span><br><span class="line">#    2 here means: don&#x27;t compress head or head-&gt;next or tail-&gt;prev or tail,</span><br><span class="line"></span><br><span class="line">#    but compress all nodes between them.</span><br><span class="line"></span><br><span class="line"># 3: [head]-&gt;[next]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[prev]-&gt;[tail]</span><br><span class="line"></span><br><span class="line"># etc.</span><br><span class="line"></span><br><span class="line">list-compress-depth 0</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Sets have a special encoding in just one case: when a set is composed</span><br><span class="line"></span><br><span class="line"># of just strings that happen to be integers in radix 10 in the range</span><br><span class="line"></span><br><span class="line"># of 64 bit signed integers.</span><br><span class="line"></span><br><span class="line"># The following configuration setting sets the limit in the size of the</span><br><span class="line"></span><br><span class="line"># set in order to use this special memory saving encoding.</span><br><span class="line"></span><br><span class="line">set-max-intset-entries 512</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Similarly to hashes and lists, sorted sets are also specially encoded in</span><br><span class="line"></span><br><span class="line"># order to save a lot of space. This encoding is only used when the length and</span><br><span class="line"></span><br><span class="line"># elements of a sorted set are below the following limits:</span><br><span class="line"></span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line"></span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># HyperLogLog sparse representation bytes limit. The limit includes the</span><br><span class="line"></span><br><span class="line"># 16 bytes header. When an HyperLogLog using the sparse representation crosses</span><br><span class="line"></span><br><span class="line"># this limit, it is converted into the dense representation.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># A value greater than 16000 is totally useless, since at that point the</span><br><span class="line"></span><br><span class="line"># dense representation is more memory efficient.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># The suggested value is ~ 3000 in order to have the benefits of</span><br><span class="line"></span><br><span class="line"># the space efficient encoding without slowing down too much PFADD,</span><br><span class="line"></span><br><span class="line"># which is O(N) with the sparse encoding. The value can be raised to</span><br><span class="line"></span><br><span class="line"># ~ 10000 when CPU is not a concern, but space is, and the data set is</span><br><span class="line"></span><br><span class="line"># composed of many HyperLogLogs with cardinality in the 0 - 15000 range.</span><br><span class="line"></span><br><span class="line">hll-sparse-max-bytes 3000</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Streams macro node max size / items. The stream data structure is a radix</span><br><span class="line"></span><br><span class="line"># tree of big nodes that encode multiple items inside. Using this configuration</span><br><span class="line"></span><br><span class="line"># it is possible to configure how big a single node can be in bytes, and the</span><br><span class="line"></span><br><span class="line"># maximum number of items it may contain before switching to a new node when</span><br><span class="line"></span><br><span class="line"># appending new stream entries. If any of the following settings are set to</span><br><span class="line"></span><br><span class="line"># zero, the limit is ignored, so for instance it is possible to set just a</span><br><span class="line"></span><br><span class="line"># max entires limit by setting max-bytes to 0 and max-entries to the desired</span><br><span class="line"></span><br><span class="line"># value.</span><br><span class="line"></span><br><span class="line">stream-node-max-bytes 4096</span><br><span class="line"></span><br><span class="line">stream-node-max-entries 100</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in</span><br><span class="line"></span><br><span class="line"># order to help rehashing the main Redis hash table (the one mapping top-level</span><br><span class="line"></span><br><span class="line"># keys to values). The hash table implementation Redis uses (see dict.c)</span><br><span class="line"></span><br><span class="line"># performs a lazy rehashing: the more operation you run into a hash table</span><br><span class="line"></span><br><span class="line"># that is rehashing, the more rehashing &quot;steps&quot; are performed, so if the</span><br><span class="line"></span><br><span class="line"># server is idle the rehashing is never complete and some more memory is used</span><br><span class="line"></span><br><span class="line"># by the hash table.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># The default is to use this millisecond 10 times every second in order to</span><br><span class="line"></span><br><span class="line"># actively rehash the main dictionaries, freeing memory when possible.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># If unsure:</span><br><span class="line"></span><br><span class="line"># use &quot;activerehashing no&quot; if you have hard latency requirements and it is</span><br><span class="line"></span><br><span class="line"># not a good thing in your environment that Redis can reply from time to time</span><br><span class="line"></span><br><span class="line"># to queries with 2 milliseconds delay.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># use &quot;activerehashing yes&quot; if you don&#x27;t have such hard requirements but</span><br><span class="line"></span><br><span class="line"># want to free memory asap when possible.</span><br><span class="line"></span><br><span class="line">activerehashing yes</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># The client output buffer limits can be used to force disconnection of clients</span><br><span class="line"></span><br><span class="line"># that are not reading data from the server fast enough for some reason (a</span><br><span class="line"></span><br><span class="line"># common reason is that a Pub/Sub client can&#x27;t consume messages as fast as the</span><br><span class="line"></span><br><span class="line"># publisher can produce them).</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># The limit can be set differently for the three different classes of clients:</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># normal -&gt; normal clients including MONITOR clients</span><br><span class="line"></span><br><span class="line"># replica  -&gt; replica clients</span><br><span class="line"></span><br><span class="line"># pubsub -&gt; clients subscribed to at least one pubsub channel or pattern</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># The syntax of every client-output-buffer-limit directive is the following:</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># client-output-buffer-limit &lt;class&gt; &lt;hard limit&gt; &lt;soft limit&gt; &lt;soft seconds&gt;</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># A client is immediately disconnected once the hard limit is reached, or if</span><br><span class="line"></span><br><span class="line"># the soft limit is reached and remains reached for the specified number of</span><br><span class="line"></span><br><span class="line"># seconds (continuously).</span><br><span class="line"></span><br><span class="line"># So for instance if the hard limit is 32 megabytes and the soft limit is</span><br><span class="line"></span><br><span class="line"># 16 megabytes / 10 seconds, the client will get disconnected immediately</span><br><span class="line"></span><br><span class="line"># if the size of the output buffers reach 32 megabytes, but will also get</span><br><span class="line"></span><br><span class="line"># disconnected if the client reaches 16 megabytes and continuously overcomes</span><br><span class="line"></span><br><span class="line"># the limit for 10 seconds.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># By default normal clients are not limited because they don&#x27;t receive data</span><br><span class="line"></span><br><span class="line"># without asking (in a push way), but just after a request, so only</span><br><span class="line"></span><br><span class="line"># asynchronous clients may create a scenario where data is requested faster</span><br><span class="line"></span><br><span class="line"># than it can read.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Instead there is a default limit for pubsub and replica clients, since</span><br><span class="line"></span><br><span class="line"># subscribers and replicas receive data in a push fashion.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Both the hard or the soft limit can be disabled by setting them to zero.</span><br><span class="line"></span><br><span class="line">client-output-buffer-limit normal 0 0 0</span><br><span class="line"></span><br><span class="line">client-output-buffer-limit replica 256mb 64mb 60</span><br><span class="line"></span><br><span class="line">client-output-buffer-limit pubsub 32mb 8mb 60</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Client query buffers accumulate new commands. They are limited to a fixed</span><br><span class="line"></span><br><span class="line"># amount by default in order to avoid that a protocol desynchronization (for</span><br><span class="line"></span><br><span class="line"># instance due to a bug in the client) will lead to unbound memory usage in</span><br><span class="line"></span><br><span class="line"># the query buffer. However you can configure it here if you have very special</span><br><span class="line"></span><br><span class="line"># needs, such us huge multi/exec requests or alike.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># client-query-buffer-limit 1gb</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># In the Redis protocol, bulk requests, that are, elements representing single</span><br><span class="line"></span><br><span class="line"># strings, are normally limited ot 512 mb. However you can change this limit</span><br><span class="line"></span><br><span class="line"># here.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># proto-max-bulk-len 512mb</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Redis calls an internal function to perform many background tasks, like</span><br><span class="line"></span><br><span class="line"># closing connections of clients in timeout, purging expired keys that are</span><br><span class="line"></span><br><span class="line"># never requested, and so forth.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Not all tasks are performed with the same frequency, but Redis checks for</span><br><span class="line"></span><br><span class="line"># tasks to perform according to the specified &quot;hz&quot; value.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># By default &quot;hz&quot; is set to 10. Raising the value will use more CPU when</span><br><span class="line"></span><br><span class="line"># Redis is idle, but at the same time will make Redis more responsive when</span><br><span class="line"></span><br><span class="line"># there are many keys expiring at the same time, and timeouts may be</span><br><span class="line"></span><br><span class="line"># handled with more precision.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># The range is between 1 and 500, however a value over 100 is usually not</span><br><span class="line"></span><br><span class="line"># a good idea. Most users should use the default of 10 and raise this up to</span><br><span class="line"></span><br><span class="line"># 100 only in environments where very low latency is required.</span><br><span class="line"></span><br><span class="line">hz 10</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Normally it is useful to have an HZ value which is proportional to the</span><br><span class="line"></span><br><span class="line"># number of clients connected. This is useful in order, for instance, to</span><br><span class="line"></span><br><span class="line"># avoid too many clients are processed for each background task invocation</span><br><span class="line"></span><br><span class="line"># in order to avoid latency spikes.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Since the default HZ value by default is conservatively set to 10, Redis</span><br><span class="line"></span><br><span class="line"># offers, and enables by default, the ability to use an adaptive HZ value</span><br><span class="line"></span><br><span class="line"># which will temporary raise when there are many connected clients.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># When dynamic HZ is enabled, the actual configured HZ will be used as</span><br><span class="line"></span><br><span class="line"># as a baseline, but multiples of the configured HZ value will be actually</span><br><span class="line"></span><br><span class="line"># used as needed once more clients are connected. In this way an idle</span><br><span class="line"></span><br><span class="line"># instance will use very little CPU time while a busy instance will be</span><br><span class="line"></span><br><span class="line"># more responsive.</span><br><span class="line"></span><br><span class="line">dynamic-hz yes</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># When a child rewrites the AOF file, if the following option is enabled</span><br><span class="line"></span><br><span class="line"># the file will be fsync-ed every 32 MB of data generated. This is useful</span><br><span class="line"></span><br><span class="line"># in order to commit the file to the disk more incrementally and avoid</span><br><span class="line"></span><br><span class="line"># big latency spikes.</span><br><span class="line"></span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># When redis saves RDB file, if the following option is enabled</span><br><span class="line"></span><br><span class="line"># the file will be fsync-ed every 32 MB of data generated. This is useful</span><br><span class="line"></span><br><span class="line"># in order to commit the file to the disk more incrementally and avoid</span><br><span class="line"></span><br><span class="line"># big latency spikes.</span><br><span class="line"></span><br><span class="line">rdb-save-incremental-fsync yes</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Redis LFU eviction (see maxmemory setting) can be tuned. However it is a good</span><br><span class="line"></span><br><span class="line"># idea to start with the default settings and only change them after investigating</span><br><span class="line"></span><br><span class="line"># how to improve the performances and how the keys LFU change over time, which</span><br><span class="line"></span><br><span class="line"># is possible to inspect via the OBJECT FREQ command.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># There are two tunable parameters in the Redis LFU implementation: the</span><br><span class="line"></span><br><span class="line"># counter logarithm factor and the counter decay time. It is important to</span><br><span class="line"></span><br><span class="line"># understand what the two parameters mean before changing them.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># The LFU counter is just 8 bits per key, it&#x27;s maximum value is 255, so Redis</span><br><span class="line"></span><br><span class="line"># uses a probabilistic increment with logarithmic behavior. Given the value</span><br><span class="line"></span><br><span class="line"># of the old counter, when a key is accessed, the counter is incremented in</span><br><span class="line"></span><br><span class="line"># this way:</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># 1. A random number R between 0 and 1 is extracted.</span><br><span class="line"></span><br><span class="line"># 2. A probability P is calculated as 1/(old_value*lfu_log_factor+1).</span><br><span class="line"></span><br><span class="line"># 3. The counter is incremented only if R &lt; P.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># The default lfu-log-factor is 10. This is a table of how the frequency</span><br><span class="line"></span><br><span class="line"># counter changes with a different number of accesses with different</span><br><span class="line"></span><br><span class="line"># logarithmic factors:</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># +--------+------------+------------+------------+------------+------------+</span><br><span class="line"></span><br><span class="line"># | factor | 100 hits   | 1000 hits  | 100K hits  | 1M hits    | 10M hits   |</span><br><span class="line"></span><br><span class="line"># +--------+------------+------------+------------+------------+------------+</span><br><span class="line"></span><br><span class="line"># | 0      | 104        | 255        | 255        | 255        | 255        |</span><br><span class="line"></span><br><span class="line"># +--------+------------+------------+------------+------------+------------+</span><br><span class="line"></span><br><span class="line"># | 1      | 18         | 49         | 255        | 255        | 255        |</span><br><span class="line"></span><br><span class="line"># +--------+------------+------------+------------+------------+------------+</span><br><span class="line"></span><br><span class="line"># | 10     | 10         | 18         | 142        | 255        | 255        |</span><br><span class="line"></span><br><span class="line"># +--------+------------+------------+------------+------------+------------+</span><br><span class="line"></span><br><span class="line"># | 100    | 8          | 11         | 49         | 143        | 255        |</span><br><span class="line"></span><br><span class="line"># +--------+------------+------------+------------+------------+------------+</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># NOTE: The above table was obtained by running the following commands:</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">#   redis-benchmark -n 1000000 incr foo</span><br><span class="line"></span><br><span class="line">#   redis-cli object freq foo</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># NOTE 2: The counter initial value is 5 in order to give new objects a chance</span><br><span class="line"></span><br><span class="line"># to accumulate hits.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># The counter decay time is the time, in minutes, that must elapse in order</span><br><span class="line"></span><br><span class="line"># for the key counter to be divided by two (or decremented if it has a value</span><br><span class="line"></span><br><span class="line"># less &lt;= 10).</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># The default value for the lfu-decay-time is 1. A Special value of 0 means to</span><br><span class="line"></span><br><span class="line"># decay the counter every time it happens to be scanned.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># lfu-log-factor 10</span><br><span class="line"></span><br><span class="line"># lfu-decay-time 1</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">########################### ACTIVE DEFRAGMENTATION #######################</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># WARNING THIS FEATURE IS EXPERIMENTAL. However it was stress tested</span><br><span class="line"></span><br><span class="line"># even in production and manually tested by multiple engineers for some</span><br><span class="line"></span><br><span class="line"># time.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># What is active defragmentation?</span><br><span class="line"></span><br><span class="line"># -------------------------------</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Active (online) defragmentation allows a Redis server to compact the</span><br><span class="line"></span><br><span class="line"># spaces left between small allocations and deallocations of data in memory,</span><br><span class="line"></span><br><span class="line"># thus allowing to reclaim back memory.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Fragmentation is a natural process that happens with every allocator (but</span><br><span class="line"></span><br><span class="line"># less so with Jemalloc, fortunately) and certain workloads. Normally a server</span><br><span class="line"></span><br><span class="line"># restart is needed in order to lower the fragmentation, or at least to flush</span><br><span class="line"></span><br><span class="line"># away all the data and create it again. However thanks to this feature</span><br><span class="line"></span><br><span class="line"># implemented by Oran Agra for Redis 4.0 this process can happen at runtime</span><br><span class="line"></span><br><span class="line"># in an &quot;hot&quot; way, while the server is running.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Basically when the fragmentation is over a certain level (see the</span><br><span class="line"></span><br><span class="line"># configuration options below) Redis will start to create new copies of the</span><br><span class="line"></span><br><span class="line"># values in contiguous memory regions by exploiting certain specific Jemalloc</span><br><span class="line"></span><br><span class="line"># features (in order to understand if an allocation is causing fragmentation</span><br><span class="line"></span><br><span class="line"># and to allocate it in a better place), and at the same time, will release the</span><br><span class="line"></span><br><span class="line"># old copies of the data. This process, repeated incrementally for all the keys</span><br><span class="line"></span><br><span class="line"># will cause the fragmentation to drop back to normal values.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Important things to understand:</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># 1. This feature is disabled by default, and only works if you compiled Redis</span><br><span class="line"></span><br><span class="line">#    to use the copy of Jemalloc we ship with the source code of Redis.</span><br><span class="line"></span><br><span class="line">#    This is the default with Linux builds.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># 2. You never need to enable this feature if you don&#x27;t have fragmentation</span><br><span class="line"></span><br><span class="line">#    issues.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># 3. Once you experience fragmentation, you can enable this feature when</span><br><span class="line"></span><br><span class="line">#    needed with the command &quot;CONFIG SET activedefrag yes&quot;.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># The configuration parameters are able to fine tune the behavior of the</span><br><span class="line"></span><br><span class="line"># defragmentation process. If you are not sure about what they mean it is</span><br><span class="line"></span><br><span class="line"># a good idea to leave the defaults untouched.</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Enabled active defragmentation</span><br><span class="line"></span><br><span class="line"># activedefrag yes</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Minimum amount of fragmentation waste to start active defrag</span><br><span class="line"></span><br><span class="line"># active-defrag-ignore-bytes 100mb</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Minimum percentage of fragmentation to start active defrag</span><br><span class="line"></span><br><span class="line"># active-defrag-threshold-lower 10</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Maximum percentage of fragmentation at which we use maximum effort</span><br><span class="line"></span><br><span class="line"># active-defrag-threshold-upper 100</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Minimal effort for defrag in CPU percentage</span><br><span class="line"></span><br><span class="line"># active-defrag-cycle-min 5</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Maximal effort for defrag in CPU percentage</span><br><span class="line"></span><br><span class="line"># active-defrag-cycle-max 75</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Maximum number of set/hash/zset/list fields that will be processed from</span><br><span class="line"></span><br><span class="line"># the main dictionary scan</span><br><span class="line"></span><br><span class="line"># active-defrag-max-scan-fields 1000</span><br></pre></td></tr></table></figure></div>











]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker部署redis集群</title>
    <url>/GSSBlog/2023/10/30/8.0docker%E9%83%A8%E7%BD%B2redis%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h2 id="分布式存储案例"><a href="#分布式存储案例" class="headerlink" title="分布式存储案例"></a><strong>分布式存储案例</strong></h2><h2 id="cluster-集群-模式-docker版"><a href="#cluster-集群-模式-docker版" class="headerlink" title="cluster(集群)模式-docker版"></a><strong>cluster(集群)模式-docker版</strong></h2><p><strong>哈希槽分区进行亿级数据存储</strong></p>
<h3 id="经典问题"><a href="#经典问题" class="headerlink" title="经典问题"></a>经典问题</h3><p><strong>1~2亿条数据需要缓存,请问如何设计这个存储案例</strong></p>
<blockquote>
<p>单机单台100%不可能,必须用分布式存储</p>
<p>搭建redis分布式存储架构</p>
</blockquote>
<p><strong>解决方案</strong></p>
<ul>
<li><h4 id="哈希取余分区"><a href="#哈希取余分区" class="headerlink" title="哈希取余分区"></a><strong>哈希取余分区</strong></h4></li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/redis%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88-%E5%93%88%E5%B8%8C%E5%8F%96%E4%BD%99%E5%88%86%E5%8C%BA%E6%9E%B6%E6%9E%84%E5%9B%BE01.jpg"
                     
                ></p>
<blockquote>
<p>2亿条记录就是2亿个k,v键值对;单机不行,必须要分布式多机存储</p>
<p>假设有3台机器构成一个集群,用户每次读写操作都是根据公式: <code>hash(key) % N个机器台数</code>,计算出哈希值,用来决定数据映射到哪一个节点上</p>
</blockquote>
<p><strong>优点</strong></p>
<blockquote>
<p>简单粗暴，直接有效，只需要预估好数据规划好节点，例如3台、8台、10台，就能保证一段时间的数据支撑。使用Hash算法让固定的一部分请求落到同一台服务器上，这样每台服务器固定处理一部分请求（并维护这些请求的信息），起到负载均衡 + 分而治之的作用</p>
</blockquote>
<p><strong>缺点</strong></p>
<blockquote>
<p>原来规划好的节点，进行扩容或者缩容就比较麻烦了，不管扩缩，每次数据变动导致节点有变动，映射关系需要重新进行计算，在服务器个数固定不变时没有问题，如果需要弹性扩容或者故障停机的情况下，原来的取模公式就会发生变化：<code>Hash(key) /3 </code>会变成<code>Hash（key）/ ？</code>。此时地址经过取余遇到某个redis机器宕机了，由于台数数量变化，会导致hash取余全部数据重新洗牌。</p>
</blockquote>
<ul>
<li><h4 id="一致性哈希算法分区"><a href="#一致性哈希算法分区" class="headerlink" title="一致性哈希算法分区"></a><strong>一致性哈希算法分区</strong></h4></li>
</ul>
<blockquote>
<p>一致性哈希算法在1997年由麻省理工学院中提出的，设计目标是为了解决<code>分布式缓存数据变动和映射问题，某个机器宕机了，分母数量改变了，自然取余数不OK了</code></p>
</blockquote>
<p><strong>作用</strong></p>
<blockquote>
<p>提出一致性Hash解决方案，目的是当服务器个数发生变动时，尽量减少影响客户端到服务器的映射关系</p>
</blockquote>
<p><strong>流程</strong></p>
<p>步骤一: 算法构建一致性哈希环</p>
<blockquote>
<p>一致性哈希环</p>
<p>一致性哈希算法必然有个hash函数并按照算法产生hash值，这个算法的所有可能哈希值会构成一个全量集，这个集合可以成为一个<code>hash空间[0,2^32-1]</code>，这是一个线性空间，但是在算法中，我们通过适当的逻辑控制将它<code>首尾相连(0=2^32)</code>，这样让它逻辑上形成一个环形空间</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/redis%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88-%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%E5%88%86%E5%8C%BA%E6%9E%B6%E6%9E%84%E5%9B%BE01.jpg"
                     
                ></p>
<blockquote>
<p>它也是按照使用取模的方法,前面笔记介绍的节点取模算法是对节点(服务器)的数量进行取模。而一致性Hash算法是对<code>2^32</code>取模，简单来说，<code>一致性Hash算法将整个哈希值空间组织成一个虚拟的圆环</code>，如假设某哈希函数H的值空间为0-2^32-1(即哈希值是一个32位无符号整形)，整个哈希环如上图：整个空间<code>按顺时针方向组织</code>，圆环的正上方的点代表0，0点右侧的第一个点代表1，以此类推2，3，4，…..直到2^32-1，也就是说0点左侧的第一个点代表2^32-1，0和2^32-1在零点中方向重合，我们把这个由2^32个点组成的圆环成为Hash环</p>
</blockquote>
<p>步骤二: 服务器IP节点映射</p>
<blockquote>
<p>节点映射</p>
<p>将集群中各个IP节点映射到环上的某一个位置</p>
<p>将各个服务器使用Hash进行一个哈希,集体可以选择服务器的ip或者主机名作为关键字进行哈希,这样每台机器就能确定其在哈希环上的位置。假如4个节点NodeA、B、C、D，经过IP地址的哈希函数计算（hash（ip）），使用IP地址哈希后在环空间的位置如下所示</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/redis%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88-%E5%93%88%E5%B8%8C%E7%8E%AF%E6%9C%8D%E5%8A%A1IP%E8%8A%82%E7%82%B9%E6%98%A0%E5%B0%84%E6%9E%B6%E6%9E%84%E5%9B%BE02.png"
                     
                ></p>
<p>步骤三: key落到服务器的落键规则</p>
<blockquote>
<p>当我们需要存储一个K,V键值对时，首先计算key的hash值，hash（key），将这个key使用相同的函数hash计算出哈希值并确定此数据在环上的位置，从此位置沿着环顺时针‘行走’，第一台遇到的服务器就是其应该定位到的服务器，并将该键值对存储在该点上。</p>
<p>如，我们有Object A，Object B，Object C，Object D四个数据对象，经过哈希计算后，在环空间上的位置如下所示，根据一致性Hash算法，数据A会被定位到Node A上，B被定位到Node B上，C被定位到Node C上，D被定位到Node D上。</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/redis%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88-%E5%93%88%E5%B8%8C%E7%8E%AFK,V%E8%90%BD%E5%80%BC%E8%A7%84%E5%88%9903.png"
                     
                ></p>
<p><strong>优点</strong></p>
<p>优点一: </p>
<p><strong>一致性哈希算法的<code>容错性</code></strong></p>
<blockquote>
<p>容错性</p>
<p>假设Node C宕机，可以看到此时对象A，B，D不会受到影响，只有C对象被重定位到Node D。一般的，在一致性Hash算法中，如果一台服务器不可用，则受影响的数据仅仅是此服务器到环空间中前一台服务器（即沿着逆时针方向行走遇到的第一台服务）之间数据，其它不会受到影响。简单说，就是C挂了，收到影响的只是B、C之前的数据，并且这些数据会转移到D进行存储。如下图</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/redis%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88-%E5%93%88%E5%B8%8C%E7%8E%AF%E5%AE%B9%E9%94%99%E6%80%A7%E6%9E%B6%E6%9E%84%E5%9B%BE04.png"
                     
                ></p>
<p>优点二:</p>
<p><strong>一致性哈希算法的<code>扩展性</code></strong></p>
<blockquote>
<p>扩展性</p>
<p>服务器数量增加了，只需要加一台节点Node X，X的位置在A和B之间，那受到影响的也就是A和B之间的数据，重新把A和X的数据录入到X上即可，不会导致Hash取余全部数据重新洗牌。如下图</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/redis%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88-%E5%93%88%E5%B8%8C%E7%8E%AF%E6%89%A9%E5%B1%95%E6%80%A7%E6%9E%B6%E6%9E%84%E5%9B%BE05.png"
                     
                ></p>
<p><strong>缺点</strong></p>
<p><strong>一致性哈希算法的<code>数据倾斜</code>问题</strong></p>
<blockquote>
<p>Hash环的数据倾斜问题</p>
<p>一致性哈希算法在服务节点太少时，容易因为节点分布不均匀而造成数据倾斜（被缓存的对象大部分集中缓存在某一台服务器上）问题。</p>
<p>如：系统中只有两台服务器，如下图所示</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/redis%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88-%E5%93%88%E5%B8%8C%E7%8E%AF%E6%95%B0%E6%8D%AE%E5%80%BE%E6%96%9C%E6%9E%B6%E6%9E%84%E5%9B%BE06.png"
                     
                ></p>
<h4 id="一致性哈希算法-小总结"><a href="#一致性哈希算法-小总结" class="headerlink" title="一致性哈希算法-小总结"></a>一致性哈希算法-小总结</h4><blockquote>
<p>为了在节点数目发生改变时尽可能少的迁移数据</p>
<p>将所有的存储节点排列在首尾相接的Hash环上，每个key在计算Hash后会顺时针找到临近的存储节点存放，而当有节点加入或退出时仅影响该节点在Hash环上顺时针相邻的后续节点。</p>
<p><strong>优点</strong></p>
<p>加入和删除节点只影响哈希环中顺时针方向相邻的节点，对其他节点无影响</p>
<p><strong>缺点</strong><br>数据的分布和节点的位置有关，因为这些节点不是均匀的分布在哈希环上的，所以数据在进行存储时达不到均匀分布的效果。</p>
</blockquote>
<ul>
<li><h4 id="哈希槽分区"><a href="#哈希槽分区" class="headerlink" title="哈希槽分区"></a>哈希槽分区</h4></li>
</ul>
<blockquote>
<p>哈希槽实质就是一个数组，数组 <code>[0,2^14-1]</code> 形成hash slot 空间</p>
</blockquote>
<p><strong>为什么会出现</strong></p>
<blockquote>
<p>解决一致性哈希算法的数据倾斜问题</p>
</blockquote>
<p><strong>作用</strong></p>
<blockquote>
<p>解决均匀分配的问题，在数据和节点之间又加入了一层，把这层称为哈希槽（slot），用于管理数据和节点之间的关系，现在就相当于节点上放的是槽，槽里放的是数据</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/redis%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88-%E5%93%88%E5%B8%8C%E6%A7%BD-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E6%9E%B6%E6%9E%84%E5%9B%BE01.png"
                     
                ></p>
<blockquote>
<p>槽解决的是粒度问题，相当于把粒度变大了，这样便于数据移动</p>
<p>哈希解决的是映射问题，使用key的哈希值来计算所在的槽，便于数据分配</p>
</blockquote>
<p><strong>多少个Hash槽</strong></p>
<blockquote>
<p>一个集群只能有<code>16384</code>个槽，编号<code>0-16383（0-2^14-1)</code>。这些槽会分配给集群中所在主节点，分配策略没有要求。可以指定哪些编号的槽分配给哪个主节点。集群会记录节点和槽对应关系。解决了节点和槽的关系后，接下来就需要对key求哈希值，然后对16384取余，余数是几，key就落入对应的槽里。<code>slot=CRC16(key)%16384</code>。以槽为单位移动数据，因为槽的数目是固定的，处理起来比较容易，这样数据移动问题就解决了。</p>
</blockquote>
<p><strong>哈希槽计算</strong></p>
<blockquote>
<p>Redis集群中内置了<code>16384</code>个哈希槽，redis会根据节点数量大致均等的将哈希槽映射到不同的节点。当需要在redis集群中放置一个<code>key-value</code>时，redis先对key使用<code>CRC16</code>算法算出一个结果，然后把结果对<code>16384</code>求余数，这样每个key都会对应一个编号在<code>0-16383</code>之间的哈希槽，也就是映射到某个节点上。</p>
<p>如下所示：key值A，B在Node2，key值C落在Node3上</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/redis%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88-%E5%93%88%E5%B8%8C%E6%A7%BD-%E8%AE%A1%E7%AE%97key%E8%90%BD%E5%85%A5%E8%A7%84%E5%88%9902.png"
                     
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/redis%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88-%E5%93%88%E5%B8%8C%E6%A7%BD-CRC16%E7%AE%97%E6%B3%9503.png"
                     
                ></p>
<h2 id="Redis三主三从集群配置"><a href="#Redis三主三从集群配置" class="headerlink" title="Redis三主三从集群配置"></a>Redis三主三从集群配置</h2><h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><blockquote>
<p><a href="/GSSBlog/2023/10/30/0.1docker%E4%BB%8B%E7%BB%8D/index.html">安装docker</a></p>
<p><code>docker启动</code>—&gt;<code>systemctl start docker</code></p>
</blockquote>
<h3 id="创建redis实例"><a href="#创建redis实例" class="headerlink" title="创建redis实例"></a>创建redis实例</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">docker run -d --name redis-node1 --net host --privileged=<span class="literal">true</span> -v /mydata/redis/cluster/redis-node-1:/data redis:6.0.8 --cluster-enabled <span class="built_in">yes</span> --appendonly <span class="built_in">yes</span> --port 6381</span><br><span class="line"></span><br><span class="line">docker run -d --name redis-node2 --net host --privileged=<span class="literal">true</span> -v /mydata/redis/cluster/redis-node-2:/data redis:6.0.8 --cluster-enabled <span class="built_in">yes</span> --appendonly <span class="built_in">yes</span> --port 6382</span><br><span class="line"></span><br><span class="line">docker run -d --name redis-node3 --net host --privileged=<span class="literal">true</span> -v /mydata/redis/cluster/redis-node-3:/data redis:6.0.8 --cluster-enabled <span class="built_in">yes</span> --appendonly <span class="built_in">yes</span> --port 6383</span><br><span class="line"></span><br><span class="line">docker run -d --name redis-node4 --net host --privileged=<span class="literal">true</span> -v /mydata/redis/cluster/redis-node-4:/data redis:6.0.8 --cluster-enabled <span class="built_in">yes</span> --appendonly <span class="built_in">yes</span> --port 6384</span><br><span class="line"></span><br><span class="line">docker run -d --name redis-node5 --net host --privileged=<span class="literal">true</span> -v /mydata/redis/cluster/redis-node-5:/data redis:6.0.8 --cluster-enabled <span class="built_in">yes</span> --appendonly <span class="built_in">yes</span> --port 6385</span><br><span class="line"></span><br><span class="line">docker run -d --name redis-node6 --net host --privileged=<span class="literal">true</span> -v /mydata/redis/cluster/redis-node-6:/data redis:6.0.8 --cluster-enabled <span class="built_in">yes</span> --appendonly <span class="built_in">yes</span> --port 6386</span><br><span class="line"></span><br><span class="line"><span class="comment">### 命令分解</span></span><br><span class="line">docker run  <span class="comment"># 创建并运行docker容器实例</span></span><br><span class="line">--name redis-node  <span class="comment"># 容器名称</span></span><br><span class="line">--net host  <span class="comment"># 使用宿主机的IP和端口,默认</span></span><br><span class="line">--privileged=<span class="literal">true</span>  <span class="comment"># 获取宿主机root用户权限</span></span><br><span class="line">-v /mydata/redis/share/redis-node:/data  <span class="comment"># 容器卷,宿主机地址:docker内部地址</span></span><br><span class="line">redis:6.0.8  <span class="comment"># reids镜像和版本号</span></span><br><span class="line">--cluster-enabled <span class="built_in">yes</span>  <span class="comment"># 开启redis集群</span></span><br><span class="line">--appendonly <span class="built_in">yes</span>  <span class="comment"># 开启持久化</span></span><br><span class="line">--port 6389  <span class="comment"># redis 端口号</span></span><br></pre></td></tr></table></figure></div>



<h3 id="构建主从关系"><a href="#构建主从关系" class="headerlink" title="构建主从关系"></a>构建主从关系</h3><blockquote>
<p>redis-cli –cluster create 192.168.211.122:6381 192.168.211.122:6382 192.168.211.122:6383 192.168.211.122:6384 192.168.211.122:6385 192.168.211.122:6386 –cluster-replicas 1</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 进入node1容器内部,构建主从关系</span></span><br><span class="line">docker <span class="built_in">exec</span> -it docker-node1 /bin/bash</span><br><span class="line"></span><br><span class="line">redis-cli --cluster create 192.168.211.122:6381 192.168.211.122:6382 192.168.211.122:6383 192.168.211.122:6384 192.168.211.122:6385 192.168.211.122:6386 --cluster-replicas 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 示例</span></span><br><span class="line">[root@CentOS7_001 ~]<span class="comment"># docker exec -it 7695b8a6290c /bin/bash</span></span><br><span class="line">root@CentOS7_001:/data<span class="comment"># redis-cli --cluster create 192.168.211.122:6381 192.168.211.122:6382 192.168.211.122:6383 192.168.211.122:6384 192.168.211.122:6385 192.168.211.122:6386 --cluster-replicas 1</span></span><br><span class="line">&gt;&gt;&gt; Performing <span class="built_in">hash</span> slots allocation on 6 nodes...</span><br><span class="line">Master[0] -&gt; Slots 0 - 5460</span><br><span class="line">Master[1] -&gt; Slots 5461 - 10922</span><br><span class="line">Master[2] -&gt; Slots 10923 - 16383</span><br><span class="line">Adding replica 192.168.211.122:6385 to 192.168.211.122:6381</span><br><span class="line">Adding replica 192.168.211.122:6386 to 192.168.211.122:6382</span><br><span class="line">Adding replica 192.168.211.122:6384 to 192.168.211.122:6383</span><br><span class="line">&gt;&gt;&gt; Trying to optimize slaves allocation <span class="keyword">for</span> anti-affinity</span><br><span class="line">[WARNING] Some slaves are <span class="keyword">in</span> the same host as their master</span><br><span class="line">M: 36877ecd044077c08ff640c14eb60698fada9e5a 192.168.211.122:6381</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">M: 6af5921ced502eae0ae93c991e1cafcee595e237 192.168.211.122:6382</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">M: 34fee68e4f9828340aea9dc71a2c2091981002ee 192.168.211.122:6383</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">S: 07bd7bc35e2a88624855481ee24ff89d8cfcf759 192.168.211.122:6384</span><br><span class="line">   replicates 34fee68e4f9828340aea9dc71a2c2091981002ee</span><br><span class="line">S: ac38a3672a052a72855157d03e5c1bf9b73c717e 192.168.211.122:6385</span><br><span class="line">   replicates 36877ecd044077c08ff640c14eb60698fada9e5a</span><br><span class="line">S: 16567fbe877b25e90f97d9b2af76ef80ca3427d8 192.168.211.122:6386</span><br><span class="line">   replicates 6af5921ced502eae0ae93c991e1cafcee595e237</span><br><span class="line">Can I <span class="built_in">set</span> the above configuration? (<span class="built_in">type</span> <span class="string">&#x27;yes&#x27;</span> to accept): <span class="built_in">yes</span></span><br><span class="line">&gt;&gt;&gt; Nodes configuration updated</span><br><span class="line">&gt;&gt;&gt; Assign a different config epoch to each node</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER MEET messages to <span class="built_in">join</span> the cluster</span><br><span class="line">Waiting <span class="keyword">for</span> the cluster to <span class="built_in">join</span></span><br><span class="line">.</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.211.122:6381)</span><br><span class="line">M: 36877ecd044077c08ff640c14eb60698fada9e5a 192.168.211.122:6381</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: ac38a3672a052a72855157d03e5c1bf9b73c717e 192.168.211.122:6385</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 36877ecd044077c08ff640c14eb60698fada9e5a</span><br><span class="line">S: 16567fbe877b25e90f97d9b2af76ef80ca3427d8 192.168.211.122:6386</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 6af5921ced502eae0ae93c991e1cafcee595e237</span><br><span class="line">S: 07bd7bc35e2a88624855481ee24ff89d8cfcf759 192.168.211.122:6384</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 34fee68e4f9828340aea9dc71a2c2091981002ee</span><br><span class="line">M: 6af5921ced502eae0ae93c991e1cafcee595e237 192.168.211.122:6382</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 34fee68e4f9828340aea9dc71a2c2091981002ee 192.168.211.122:6383</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ul>
<li>成功示例图,如下</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/redis%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88-%E4%B8%89%E4%B8%BB%E4%B8%89%E4%BB%8E-%E6%9E%84%E5%BB%BA%E4%B8%BB%E4%BB%8E%E5%85%B3%E7%B3%BB%E6%9E%B6%E6%9E%84%E5%9B%BE.png"
                     
                ></p>
<h3 id="查看集群状态"><a href="#查看集群状态" class="headerlink" title="查看集群状态"></a>查看集群状态</h3><blockquote>
<p>查看集群状态 <code>cluster info</code></p>
<p>查看集群节点 <code>cluster nodes</code></p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 连接进入6381客户端</span></span><br><span class="line">redis-cli -p 6381</span><br><span class="line"></span><br><span class="line">cluster info <span class="comment">## 查看集群状态</span></span><br><span class="line">cluster nodes <span class="comment">## 查看集群节点</span></span><br><span class="line"></span><br><span class="line">root@CentOS7_001:/data<span class="comment"># redis-cli -p 6381</span></span><br><span class="line"><span class="comment">### 查看集群状态</span></span><br><span class="line">127.0.0.1:6381&gt; cluster info</span><br><span class="line">cluster_state:ok</span><br><span class="line">cluster_slots_assigned:16384</span><br><span class="line">cluster_slots_ok:16384</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:6</span><br><span class="line">cluster_size:3</span><br><span class="line">cluster_current_epoch:6</span><br><span class="line">cluster_my_epoch:1</span><br><span class="line">cluster_stats_messages_ping_sent:108</span><br><span class="line">cluster_stats_messages_pong_sent:108</span><br><span class="line">cluster_stats_messages_sent:216</span><br><span class="line">cluster_stats_messages_ping_received:103</span><br><span class="line">cluster_stats_messages_pong_received:108</span><br><span class="line">cluster_stats_messages_meet_received:5</span><br><span class="line">cluster_stats_messages_received:216</span><br><span class="line"></span><br><span class="line"><span class="comment">### 查看集群节点信息</span></span><br><span class="line">127.0.0.1:6381&gt; cluster nodes</span><br><span class="line">ac38a3672a052a72855157d03e5c1bf9b73c717e 192.168.211.122:6385@16385 slave 36877ecd044077c08ff640c14eb60698fada9e5a 0 1686884480383 1 connected</span><br><span class="line">16567fbe877b25e90f97d9b2af76ef80ca3427d8 192.168.211.122:6386@16386 slave 6af5921ced502eae0ae93c991e1cafcee595e237 0 1686884479000 2 connected</span><br><span class="line">07bd7bc35e2a88624855481ee24ff89d8cfcf759 192.168.211.122:6384@16384 slave 34fee68e4f9828340aea9dc71a2c2091981002ee 0 1686884481390 3 connected</span><br><span class="line">6af5921ced502eae0ae93c991e1cafcee595e237 192.168.211.122:6382@16382 master - 0 1686884482000 2 connected 5461-10922</span><br><span class="line">36877ecd044077c08ff640c14eb60698fada9e5a 192.168.211.122:6381@16381 myself,master - 0 1686884477000 1 connected 0-5460</span><br><span class="line">34fee68e4f9828340aea9dc71a2c2091981002ee 192.168.211.122:6383@16383 master - 0 1686884482397 3 connected 10923-16383</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h3 id="读写存储"><a href="#读写存储" class="headerlink" title="读写存储"></a>读写存储</h3><blockquote>
<p>由于目前已经是集群模式</p>
<p>单机版连接客户端的方式<code>redis-cli -p prot</code>已经不适用了</p>
<p>需要使用集群版连接方式;,防止路由失效<code>redis-cli -p port -c</code></p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 单机连接</span></span><br><span class="line">root@CentOS7_001:/data<span class="comment"># redis-cli -p 6381</span></span><br><span class="line">127.0.0.1:6381&gt; keys *</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6381&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">(error) MOVED 12706 192.168.211.122:6383</span><br><span class="line">127.0.0.1:6381&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6381&gt; <span class="built_in">set</span> k3 v3</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6381&gt; <span class="built_in">set</span> k4 v4</span><br><span class="line">(error) MOVED 8455 192.168.211.122:6382</span><br><span class="line">127.0.0.1:6381&gt; <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 无法正确路由,添加key失效</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 集群模式连接</span></span><br><span class="line">root@CentOS7_001:/data<span class="comment"># redis-cli -p 6381 -c</span></span><br><span class="line">127.0.0.1:6381&gt; keys *</span><br><span class="line">1) <span class="string">&quot;k3&quot;</span></span><br><span class="line">2) <span class="string">&quot;k2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 刷新掉所有的key</span></span><br><span class="line">127.0.0.1:6381&gt; flushall</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6381&gt; keys *</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6381&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">-&gt; Redirected to slot [12706] located at 192.168.211.122:6383</span><br><span class="line">OK</span><br><span class="line">192.168.211.122:6383&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">-&gt; Redirected to slot [449] located at 192.168.211.122:6381</span><br><span class="line">OK</span><br><span class="line"><span class="comment">### 可以正常切换路由,添加key</span></span><br></pre></td></tr></table></figure></div>



<h3 id="查看集群信息"><a href="#查看集群信息" class="headerlink" title="查看集群信息"></a>查看集群信息</h3><blockquote>
<p><code>redis-cli --cluster check 192.168.211.112:6381</code></p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">root@CentOS7_001:/data<span class="comment"># redis-cli --cluster check 192.168.211.122:6381</span></span><br><span class="line">192.168.211.122:6381 (36877ecd...) -&gt; 0 keys | 5461 slots | 1 slaves.</span><br><span class="line">192.168.211.122:6382 (6af5921c...) -&gt; 0 keys | 5462 slots | 1 slaves.</span><br><span class="line">192.168.211.122:6383 (34fee68e...) -&gt; 1 keys | 5461 slots | 1 slaves.</span><br><span class="line">[OK] 1 keys <span class="keyword">in</span> 3 masters.</span><br><span class="line">0.00 keys per slot on average.</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.211.122:6381)</span><br><span class="line">M: 36877ecd044077c08ff640c14eb60698fada9e5a 192.168.211.122:6381</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: ac38a3672a052a72855157d03e5c1bf9b73c717e 192.168.211.122:6385</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 36877ecd044077c08ff640c14eb60698fada9e5a</span><br><span class="line">S: 16567fbe877b25e90f97d9b2af76ef80ca3427d8 192.168.211.122:6386</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 6af5921ced502eae0ae93c991e1cafcee595e237</span><br><span class="line">S: 07bd7bc35e2a88624855481ee24ff89d8cfcf759 192.168.211.122:6384</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 34fee68e4f9828340aea9dc71a2c2091981002ee</span><br><span class="line">M: 6af5921ced502eae0ae93c991e1cafcee595e237 192.168.211.122:6382</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 34fee68e4f9828340aea9dc71a2c2091981002ee 192.168.211.122:6383</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h3 id="容错切换迁移"><a href="#容错切换迁移" class="headerlink" title="容错切换迁移"></a>容错切换迁移</h3><blockquote>
<p>停掉<code>node1(master)</code>节点,让node1下的slave上位</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">[root@CentOS7_001 ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE         COMMAND                   CREATED        STATUS       PORTS     NAMES</span><br><span class="line">b69b4d4562ab   redis:6.0.8   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   47 hours ago   Up 4 hours             redis-node6</span><br><span class="line">51cf2c0eb2bf   redis:6.0.8   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   47 hours ago   Up 4 hours             redis-node5</span><br><span class="line">c00847c63342   redis:6.0.8   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   47 hours ago   Up 4 hours             redis-node4</span><br><span class="line">4c9337895da0   redis:6.0.8   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   47 hours ago   Up 4 hours             redis-node3</span><br><span class="line">5db5d9f4a1d2   redis:6.0.8   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   47 hours ago   Up 4 hours             redis-node2</span><br><span class="line">7695b8a6290c   redis:6.0.8   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   47 hours ago   Up 4 hours             redis-node1</span><br><span class="line">[root@CentOS7_001 ~]<span class="comment"># docker stop redis-node1</span></span><br><span class="line">redis-node1</span><br><span class="line">[root@CentOS7_001 ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE         COMMAND                   CREATED        STATUS       PORTS     NAMES</span><br><span class="line">b69b4d4562ab   redis:6.0.8   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   47 hours ago   Up 4 hours             redis-node6</span><br><span class="line">51cf2c0eb2bf   redis:6.0.8   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   47 hours ago   Up 4 hours             redis-node5</span><br><span class="line">c00847c63342   redis:6.0.8   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   47 hours ago   Up 4 hours             redis-node4</span><br><span class="line">4c9337895da0   redis:6.0.8   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   47 hours ago   Up 4 hours             redis-node3</span><br><span class="line">5db5d9f4a1d2   redis:6.0.8   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   47 hours ago   Up 4 hours             redis-node2</span><br><span class="line">[root@CentOS7_001 ~]<span class="comment"># docker exec -it 5db5d9f4a1d2 /bin/bash</span></span><br><span class="line">root@CentOS7_001:/data<span class="comment"># redis-cli -p 6382 -c</span></span><br><span class="line">127.0.0.1:6382&gt; cluster nodes</span><br><span class="line">34fee68e4f9828340aea9dc71a2c2091981002ee 192.168.211.122:6383@16383 master - 0 1686896764000 3 connected 10923-16383</span><br><span class="line">36877ecd044077c08ff640c14eb60698fada9e5a 192.168.211.122:6381@16381 master,fail - 1686896713157 1686896710000 1 disconnected</span><br><span class="line">16567fbe877b25e90f97d9b2af76ef80ca3427d8 192.168.211.122:6386@16386 slave 6af5921ced502eae0ae93c991e1cafcee595e237 0 1686896765526 2 connected</span><br><span class="line">07bd7bc35e2a88624855481ee24ff89d8cfcf759 192.168.211.122:6384@16384 slave 34fee68e4f9828340aea9dc71a2c2091981002ee 0 1686896764520 3 connected</span><br><span class="line">ac38a3672a052a72855157d03e5c1bf9b73c717e 192.168.211.122:6385@16385 master - 0 1686896766530 7 connected 0-5460</span><br><span class="line">6af5921ced502eae0ae93c991e1cafcee595e237 192.168.211.122:6382@16382 myself,master - 0 1686896765000 2 connected 5461-10922</span><br><span class="line">127.0.0.1:6382&gt; <span class="built_in">exit</span></span><br></pre></td></tr></table></figure></div>



<blockquote>
<p>恢复node1节点;观察</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@CentOS7_001 ~]<span class="comment"># docker start redis-node1</span></span><br><span class="line">redis-node1</span><br><span class="line">[root@CentOS7_001 ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE         COMMAND                   CREATED      STATUS         PORTS     NAMES</span><br><span class="line">b69b4d4562ab   redis:6.0.8   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   2 days ago   Up 5 hours               redis-node6</span><br><span class="line">51cf2c0eb2bf   redis:6.0.8   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   2 days ago   Up 5 hours               redis-node5</span><br><span class="line">c00847c63342   redis:6.0.8   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   2 days ago   Up 5 hours               redis-node4</span><br><span class="line">4c9337895da0   redis:6.0.8   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   2 days ago   Up 5 hours               redis-node3</span><br><span class="line">5db5d9f4a1d2   redis:6.0.8   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   2 days ago   Up 5 hours               redis-node2</span><br><span class="line">7695b8a6290c   redis:6.0.8   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   2 days ago   Up 2 seconds             redis-node1</span><br><span class="line">[root@CentOS7_001 ~]<span class="comment"># docker exec -it redis-node1 /bin/bash</span></span><br><span class="line">root@CentOS7_001:/data<span class="comment"># redis-cli -p 6381 -c</span></span><br><span class="line">127.0.0.1:6381&gt; cluster nodes</span><br><span class="line">36877ecd044077c08ff640c14eb60698fada9e5a 192.168.211.122:6381@16381 myself,slave ac38a3672a052a72855157d03e5c1bf9b73c717e 0 1686901124000 7 connected</span><br><span class="line">6af5921ced502eae0ae93c991e1cafcee595e237 192.168.211.122:6382@16382 master - 0 1686901125589 2 connected 5461-10922</span><br><span class="line">34fee68e4f9828340aea9dc71a2c2091981002ee 192.168.211.122:6383@16383 master - 0 1686901124583 3 connected 10923-16383</span><br><span class="line">ac38a3672a052a72855157d03e5c1bf9b73c717e 192.168.211.122:6385@16385 master - 0 1686901124000 7 connected 0-5460</span><br><span class="line">16567fbe877b25e90f97d9b2af76ef80ca3427d8 192.168.211.122:6386@16386 slave 6af5921ced502eae0ae93c991e1cafcee595e237 0 1686901122572 2 connected</span><br><span class="line">07bd7bc35e2a88624855481ee24ff89d8cfcf759 192.168.211.122:6384@16384 slave 34fee68e4f9828340aea9dc71a2c2091981002ee 0 1686901121567 3 connected</span><br><span class="line">127.0.0.1:6381&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">### 重新进入node1容器;查看集群节点;</span></span><br><span class="line"><span class="comment">### 此时node1由停机前(master)转变成启动后(slave)</span></span><br></pre></td></tr></table></figure></div>



<blockquote>
<p>还原之前的3主3从</p>
<p>思路：<code>启动停掉的6381,此时6381已成了slave;先停掉6381的master,再启动.此时就能恢复</code></p>
</blockquote>
<h3 id="主从扩容"><a href="#主从扩容" class="headerlink" title="主从扩容"></a>主从扩容</h3><blockquote>
<p>新增两个服务节点对集群扩容</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#### 新增6387,6388两个节点</span></span><br><span class="line">docker run -d --name redis-node7 --privileged=<span class="literal">true</span> --net=host -v /mydata/redis/cluster/redis-node-7:/data redis:6.0.8 --cluster-enabled <span class="built_in">yes</span> --appendonly <span class="built_in">yes</span> --port 6387</span><br><span class="line"></span><br><span class="line">docker run -d --name redis-node8 --privileged=<span class="literal">true</span> --net=host -v /mydata/redis/cluster/redis-node-8:/data redis:6.0.8 --cluster-enabled <span class="built_in">yes</span> --appendonly <span class="built_in">yes</span> --port 6388</span><br><span class="line"></span><br><span class="line">[root@CentOS7_001 ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE         COMMAND                   CREATED          STATUS          PORTS     NAMES</span><br><span class="line">a354a3b65af8   redis:6.0.8   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   2 seconds ago    Up 2 seconds              redis-node8</span><br><span class="line">8428e85359ea   redis:6.0.8   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   27 seconds ago   Up 26 seconds             redis-node7</span><br><span class="line">b69b4d4562ab   redis:6.0.8   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   7 days ago       Up 3 minutes              redis-node6</span><br><span class="line">51cf2c0eb2bf   redis:6.0.8   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   7 days ago       Up 3 minutes              redis-node5</span><br><span class="line">c00847c63342   redis:6.0.8   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   7 days ago       Up 3 minutes              redis-node4</span><br><span class="line">4c9337895da0   redis:6.0.8   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   7 days ago       Up 3 minutes              redis-node3</span><br><span class="line">5db5d9f4a1d2   redis:6.0.8   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   7 days ago       Up 3 minutes              redis-node2</span><br><span class="line">7695b8a6290c   redis:6.0.8   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   7 days ago       Up 3 minutes              redis-node1</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<blockquote>
<p>进入6387容器内部，进行主从节点挂载和内容空间分配</p>
</blockquote>
<ul>
<li><p>进入容器实例内部，将实例节点加入集群</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">[root@CentOS7_001 ~]<span class="comment"># docker exec -it 8428e85359ea /bin/bash</span></span><br><span class="line">root@CentOS7_001:/data<span class="comment">#</span></span><br><span class="line"></span><br><span class="line">root@CentOS7_001:/data<span class="comment"># redis-cli --cluster add-node 192.168.211.122:6387 192.168.211.122:6381</span></span><br><span class="line">&gt;&gt;&gt; Adding node 192.168.211.122:6387 to cluster 192.168.211.122:6381</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.211.122:6381)</span><br><span class="line">S: 36877ecd044077c08ff640c14eb60698fada9e5a 192.168.211.122:6381</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates ac38a3672a052a72855157d03e5c1bf9b73c717e</span><br><span class="line">M: 34fee68e4f9828340aea9dc71a2c2091981002ee 192.168.211.122:6383</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: ac38a3672a052a72855157d03e5c1bf9b73c717e 192.168.211.122:6385</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 07bd7bc35e2a88624855481ee24ff89d8cfcf759 192.168.211.122:6384</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 34fee68e4f9828340aea9dc71a2c2091981002ee</span><br><span class="line">M: 6af5921ced502eae0ae93c991e1cafcee595e237 192.168.211.122:6382</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 16567fbe877b25e90f97d9b2af76ef80ca3427d8 192.168.211.122:6386</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 6af5921ced502eae0ae93c991e1cafcee595e237</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br><span class="line">&gt;&gt;&gt; Send CLUSTER MEET to node 192.168.211.122:6387 to make it <span class="built_in">join</span> the cluster.</span><br><span class="line">[OK] New node added correctly.</span><br><span class="line">root@CentOS7_001:/data<span class="comment">#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<pre><code>增加服务节点
</code></pre>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/redis%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88-%E9%9B%86%E7%BE%A4%E6%89%A9%E5%AE%B9%E6%96%B9%E6%A1%88-%E5%A2%9E%E5%8A%A0%E6%9C%8D%E5%8A%A1%E8%8A%82%E7%82%B901.png"
                     
                ></p>
<pre><code>  首次check集群
</code></pre>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/redis%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88-%E9%9B%86%E7%BE%A4%E6%89%A9%E5%AE%B9%E6%96%B9%E6%A1%88-%E9%A6%96%E6%AC%A1check%E9%9B%86%E7%BE%A401.png"
                     
                ></p>
<ul>
<li><p>重新分配槽号</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">root@CentOS7_001:/data<span class="comment"># redis-cli --cluster reshard 192.168.211.122:6387</span></span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.211.122:6387)</span><br><span class="line">M: 73f0387ac7a8fde1429667c942d5bb4a6b11689e 192.168.211.122:6387</span><br><span class="line">   slots: (0 slots) master</span><br><span class="line">S: 16567fbe877b25e90f97d9b2af76ef80ca3427d8 192.168.211.122:6386</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 6af5921ced502eae0ae93c991e1cafcee595e237</span><br><span class="line">S: 36877ecd044077c08ff640c14eb60698fada9e5a 192.168.211.122:6381</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates ac38a3672a052a72855157d03e5c1bf9b73c717e</span><br><span class="line">M: 34fee68e4f9828340aea9dc71a2c2091981002ee 192.168.211.122:6383</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 07bd7bc35e2a88624855481ee24ff89d8cfcf759 192.168.211.122:6384</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 34fee68e4f9828340aea9dc71a2c2091981002ee</span><br><span class="line">M: 6af5921ced502eae0ae93c991e1cafcee595e237 192.168.211.122:6382</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: ac38a3672a052a72855157d03e5c1bf9b73c717e 192.168.211.122:6385</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br><span class="line">How many slots <span class="keyword">do</span> you want to move (from 1 to 16384)? 4096</span><br><span class="line">What is the receiving node ID? 73f0387ac7a8fde1429667c942d5bb4a6b11689e</span><br><span class="line">Please enter all the <span class="built_in">source</span> node IDs.</span><br><span class="line">  Type <span class="string">&#x27;all&#x27;</span> to use all the nodes as <span class="built_in">source</span> nodes <span class="keyword">for</span> the <span class="built_in">hash</span> slots.</span><br><span class="line">  Type <span class="string">&#x27;done&#x27;</span> once you entered all the <span class="built_in">source</span> nodes IDs.</span><br><span class="line">Source node <span class="comment">#1: all</span></span><br><span class="line"></span><br><span class="line">Ready to move 4096 slots.</span><br><span class="line">  Source nodes:</span><br><span class="line">    M: 34fee68e4f9828340aea9dc71a2c2091981002ee 192.168.211.122:6383</span><br><span class="line">       slots:[10923-16383] (5461 slots) master</span><br><span class="line">       1 additional replica(s)</span><br><span class="line">    M: 6af5921ced502eae0ae93c991e1cafcee595e237 192.168.211.122:6382</span><br><span class="line">       slots:[5461-10922] (5462 slots) master</span><br><span class="line">       1 additional replica(s)</span><br><span class="line">    M: ac38a3672a052a72855157d03e5c1bf9b73c717e 192.168.211.122:6385</span><br><span class="line">       slots:[0-5460] (5461 slots) master</span><br><span class="line">       1 additional replica(s)</span><br><span class="line">  Destination node:</span><br><span class="line">    M: 73f0387ac7a8fde1429667c942d5bb4a6b11689e 192.168.211.122:6387</span><br><span class="line">       slots: (0 slots) master</span><br><span class="line">  Resharding plan:</span><br><span class="line">    Moving slot 5461 from 6af5921ced502eae0ae93c991e1cafcee595e237</span><br><span class="line">    Moving slot 5462 from 6af5921ced502eae0ae93c991e1cafcee595e237</span><br><span class="line">    Moving slot 5463 from 6af5921ced502eae0ae93c991e1cafcee595e237</span><br><span class="line">    Moving slot 5464 from 6af5921ced502eae0ae93c991e1cafcee595e237</span><br><span class="line">    Moving slot 5465 from 6af5921ced502eae0ae93c991e1cafcee595e237</span><br><span class="line">    Moving slot 5466 from 6af5921ced502eae0ae93c991e1cafcee595e237</span><br><span class="line">    Moving slot 5467 from 6af5921ced502eae0ae93c991e1cafcee595e237</span><br><span class="line">......</span><br></pre></td></tr></table></figure></div>

<pre><code>哈希槽扩容重新分配
</code></pre>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/redis%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88-%E9%9B%86%E7%BE%A4%E6%89%A9%E5%AE%B9%E6%96%B9%E6%A1%88-%E5%93%88%E5%B8%8C%E6%A7%BD%E9%87%8D%E6%96%B0%E5%88%86%E9%85%8D%E6%80%BB01.png"
                     
                ></p>
<blockquote>
<p><a href="/GSSBlog/2023/10/30/8.1docker%E9%83%A8%E7%BD%B2redis%E9%9B%86%E7%BE%A4%E6%89%A9%E5%AE%B9%E6%96%B9%E6%A1%88%E9%99%84%E5%BD%951/index.html">详细分配图</a></p>
</blockquote>
<pre><code>  第二次check集群
</code></pre>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/redis%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88-%E9%9B%86%E7%BE%A4%E6%89%A9%E5%AE%B9%E6%96%B9%E6%A1%88-%E7%AC%AC%E4%BA%8C%E6%AC%A1check%E9%9B%86%E7%BE%A401.png"
                     
                ></p>
<blockquote>
<p>槽号分派说明</p>
<p>重新分配成本太高,所以前三家各自匀出来一部分，从6381，6382，6383三个主节点中分别匀出1364个坑位给新节点6387</p>
</blockquote>
<ul>
<li><p>为6387主节点挂在6388从节点</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#### </span></span><br><span class="line">命令：redis-cli --cluster add-node ip:新slave端口 ip:新master端口 --cluster-slave --cluster-master-id 新主机节点ID</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@CentOS7_001:/data<span class="comment"># redis-cli --cluster add-node 192.168.211.122:6388 192.168.211.122:6387 --cluster-slave --cluster-                                   master-id 73f0387ac7a8fde1429667c942d5bb4a6b11689e</span></span><br><span class="line">&gt;&gt;&gt; Adding node 192.168.211.122:6388 to cluster 192.168.211.122:6387</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.211.122:6387)</span><br><span class="line">M: 73f0387ac7a8fde1429667c942d5bb4a6b11689e 192.168.211.122:6387</span><br><span class="line">   slots:[0-1364],[5461-6826],[10923-12287] (4096 slots) master</span><br><span class="line">S: 16567fbe877b25e90f97d9b2af76ef80ca3427d8 192.168.211.122:6386</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 6af5921ced502eae0ae93c991e1cafcee595e237</span><br><span class="line">S: 36877ecd044077c08ff640c14eb60698fada9e5a 192.168.211.122:6381</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates ac38a3672a052a72855157d03e5c1bf9b73c717e</span><br><span class="line">M: 34fee68e4f9828340aea9dc71a2c2091981002ee 192.168.211.122:6383</span><br><span class="line">   slots:[12288-16383] (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 07bd7bc35e2a88624855481ee24ff89d8cfcf759 192.168.211.122:6384</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 34fee68e4f9828340aea9dc71a2c2091981002ee</span><br><span class="line">M: 6af5921ced502eae0ae93c991e1cafcee595e237 192.168.211.122:6382</span><br><span class="line">   slots:[6827-10922] (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: ac38a3672a052a72855157d03e5c1bf9b73c717e 192.168.211.122:6385</span><br><span class="line">   slots:[1365-5460] (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br><span class="line">&gt;&gt;&gt; Send CLUSTER MEET to node 192.168.211.122:6388 to make it <span class="built_in">join</span> the cluster.</span><br><span class="line">Waiting <span class="keyword">for</span> the cluster to <span class="built_in">join</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; Configure node as replica of 192.168.211.122:6387.</span><br><span class="line">[OK] New node added correctly.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<pre><code>扩容主节点挂载从节点
</code></pre>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/redis%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88-%E9%9B%86%E7%BE%A4%E6%89%A9%E5%AE%B9%E6%96%B9%E6%A1%88-%E5%A2%9E%E5%8A%A0%E6%9C%8D%E5%8A%A1%E8%8A%82%E7%82%B9-%E4%B8%BB%E8%8A%82%E7%82%B9%E4%B8%8B%E6%8C%82%E8%BD%BD%E4%BB%8E%E8%8A%82%E7%82%B901.png"
                     
                ></p>
<pre><code>  第三次check集群
</code></pre>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/redis%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88-%E9%9B%86%E7%BE%A4%E6%89%A9%E5%AE%B9%E6%96%B9%E6%A1%88-%E7%AC%AC%E4%BA%8C%E6%AC%A1check%E9%9B%86%E7%BE%A401.png"
                     
                ></p>
<ul>
<li><p>扩容完成</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">root@CentOS7_001:/data<span class="comment"># redis-cli --cluster check 192.168.211.122:6387</span></span><br><span class="line">192.168.211.122:6387 (73f0387a...) -&gt; 0 keys | 4096 slots | 1 slaves.</span><br><span class="line">192.168.211.122:6383 (34fee68e...) -&gt; 1 keys | 4096 slots | 1 slaves.</span><br><span class="line">192.168.211.122:6382 (6af5921c...) -&gt; 0 keys | 4096 slots | 1 slaves.</span><br><span class="line">192.168.211.122:6385 (ac38a367...) -&gt; 0 keys | 4096 slots | 1 slaves.</span><br><span class="line">[OK] 1 keys <span class="keyword">in</span> 4 masters.</span><br><span class="line">0.00 keys per slot on average.</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.211.122:6387)</span><br><span class="line">M: 73f0387ac7a8fde1429667c942d5bb4a6b11689e 192.168.211.122:6387</span><br><span class="line">   slots:[0-1364],[5461-6826],[10923-12287] (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 16567fbe877b25e90f97d9b2af76ef80ca3427d8 192.168.211.122:6386</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 6af5921ced502eae0ae93c991e1cafcee595e237</span><br><span class="line">S: 36877ecd044077c08ff640c14eb60698fada9e5a 192.168.211.122:6381</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates ac38a3672a052a72855157d03e5c1bf9b73c717e</span><br><span class="line">S: 6bf8e9d337e27154408acbd2a6a9677bdde939da 192.168.211.122:6388</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 73f0387ac7a8fde1429667c942d5bb4a6b11689e</span><br><span class="line">M: 34fee68e4f9828340aea9dc71a2c2091981002ee 192.168.211.122:6383</span><br><span class="line">   slots:[12288-16383] (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 07bd7bc35e2a88624855481ee24ff89d8cfcf759 192.168.211.122:6384</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 34fee68e4f9828340aea9dc71a2c2091981002ee</span><br><span class="line">M: 6af5921ced502eae0ae93c991e1cafcee595e237 192.168.211.122:6382</span><br><span class="line">   slots:[6827-10922] (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: ac38a3672a052a72855157d03e5c1bf9b73c717e 192.168.211.122:6385</span><br><span class="line">   slots:[1365-5460] (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br><span class="line">root@CentOS7_001:/data<span class="comment">#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="主从缩容"><a href="#主从缩容" class="headerlink" title="主从缩容"></a>主从缩容</h3><blockquote>
<p>能扩容就要能缩容,减少服务器性能浪费</p>
</blockquote>
<ul>
<li><p>删除6388从节点</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#### 命令：redis-cli --cluster del-node ip:从机端口 从机6388节点ID</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@CentOS7_001:/data<span class="comment"># redis-cli --cluster del-node 192.168.211.122:6388 6bf8e9d337e27154408acbd2a6a9677bdde939da</span></span><br><span class="line">&gt;&gt;&gt; Removing node 6bf8e9d337e27154408acbd2a6a9677bdde939da from cluster 192.168.211.122:6388</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER FORGET messages to the cluster...</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER RESET SOFT to the deleted node.</span><br><span class="line">root@CentOS7_001:/data<span class="comment">#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

</li>
<li><p>重新分配6387master服务槽号,并删除6387节点</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#### 命令： redis-cli --cluster reshard 192.168.211.122:6387</span></span><br><span class="line"></span><br><span class="line">redis-cli --cluster del-node 192.168.211.122:6387 73f0387ac7a8fde1429667c942d5bb4a6b11689e</span><br><span class="line">&gt;&gt;&gt; Removing node 73f0387ac7a8fde1429667c942d5bb4a6b11689e from cluster 192.168.211.122:6387</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER FORGET messages to the cluster...</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER RESET SOFT to the deleted node.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<pre><code>哈希槽缩容重新分配
</code></pre>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/redis%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88-%E9%9B%86%E7%BE%A4%E7%BC%A9%E5%AE%B9%E6%96%B9%E6%A1%88-%E5%93%88%E5%B8%8C%E6%A7%BD%E9%87%8D%E6%96%B0%E5%88%86%E9%85%8D01.png"
                     
                ></p>
<ul>
<li>删除容器实例</li>
<li>缩容完成</li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>详细说明哈希槽增加节点分配机制</title>
    <url>/GSSBlog/2023/10/30/8.1docker%E9%83%A8%E7%BD%B2redis%E9%9B%86%E7%BE%A4%E6%89%A9%E5%AE%B9%E6%96%B9%E6%A1%88%E9%99%84%E5%BD%951/</url>
    <content><![CDATA[<pre><code>哈希槽重新分配
</code></pre>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/redis%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88-%E9%9B%86%E7%BE%A4%E6%89%A9%E5%AE%B9%E6%96%B9%E6%A1%88-%E5%93%88%E5%B8%8C%E6%A7%BD%E9%87%8D%E6%96%B0%E5%88%86%E9%85%8D%E6%80%BB01.png"
                     
                ></p>
<pre><code>哈希槽重新分配1
</code></pre>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/redis%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88-%E9%9B%86%E7%BE%A4%E6%89%A9%E5%AE%B9%E6%96%B9%E6%A1%88-%E5%93%88%E5%B8%8C%E6%A7%BD%E9%87%8D%E6%96%B0%E5%88%86%E9%85%8D02.png"
                     
                ></p>
<pre><code>哈希槽重新分配2
</code></pre>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/redis%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88-%E9%9B%86%E7%BE%A4%E6%89%A9%E5%AE%B9%E6%96%B9%E6%A1%88-%E5%93%88%E5%B8%8C%E6%A7%BD%E9%87%8D%E6%96%B0%E5%88%86%E9%85%8D03.png"
                     
                ></p>
<pre><code>哈希槽重新分配3
</code></pre>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/redis%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88-%E9%9B%86%E7%BE%A4%E6%89%A9%E5%AE%B9%E6%96%B9%E6%A1%88-%E5%93%88%E5%B8%8C%E6%A7%BD%E9%87%8D%E6%96%B0%E5%88%86%E9%85%8D04.png"
                     
                ></p>
<pre><code>哈希槽重新分配4
</code></pre>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/redis%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88-%E9%9B%86%E7%BE%A4%E6%89%A9%E5%AE%B9%E6%96%B9%E6%A1%88-%E5%93%88%E5%B8%8C%E6%A7%BD%E9%87%8D%E6%96%B0%E5%88%86%E9%85%8D05.png"
                     
                ></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Dockerfile解析</title>
    <url>/GSSBlog/2023/10/30/9.docker%E8%A7%A3%E6%9E%90Dockerfile/</url>
    <content><![CDATA[<blockquote>
<p><code>Dockerfile</code>用来构建docker镜像的文本文件,是有一条条构建镜像所需的指令和参数构成的脚本.</p>
</blockquote>
<ul>
<li>架构图</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/docker%E6%9E%B6%E6%9E%84%E5%9B%BE.png"
                     
                ></p>
<ul>
<li><p>官网</p>
<blockquote>
<p><a class="link"   href="https://docs.docker.com/engine/reference/builder/" >https://docs.docker.com/engine/reference/builder/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
</li>
</ul>
<p><strong>Dockerfile基础知识</strong></p>
<ul>
<li>每条保留字指令都<code>必须为大写字母</code>且后面要跟随至少一个参数</li>
<li>指令从上到下,顺序执行</li>
<li><code>#</code>表示注释</li>
<li>每条指令都会创建一个新的镜像层并对镜像进行提交</li>
</ul>
<p><strong>docker执行Dockerfile的流程</strong></p>
<ul>
<li>docker从基础镜像运行一个容器</li>
<li>执行一条指令并对容器作出修改</li>
<li>执行类似docker commit的操作提交一个新的镜像层</li>
<li>docker再基于刚提交的镜像运行一个新容器</li>
<li>执行Dockerfile中的下一条指令直到所有指令都执行完成</li>
</ul>
<p><strong><code>总结</code></strong></p>
<ul>
<li>从应用软件的角度来看，Dockerfile、docker镜像和docker容器分别代表软件的三个不同阶段<ul>
<li>Dockerfile是软件的原材料</li>
<li>docker镜像是软件的交付品</li>
<li>docker容器可以看作是软件镜像的运行态，也即依照镜像运行的容器实例</li>
</ul>
</li>
<li>Dockerfile面向开发，docker镜像成为交付标准，docker容器则涉及运维和部署，三者缺一不可，合力充当docker体系的基石</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/docker/docker%E4%BD%93%E7%B3%BB%E7%9A%84%E5%85%B3%E7%B3%BB%E5%9B%BE.png"
                     
                ></p>
<blockquote>
<p>Dockerfile，需要定义一个<code>Dockerfile</code>，<code>Dockerfile</code>定义了进程需要的一切东西。<code>Dockerfile</code>涉及的内容包括执行代码后者是文件，环境变量，依赖包，运行时环境，动态链接库，操作系统的发行版，服务进程和内核进程（当应用进程需要和系统服务和内核进程打交道，这时需要考虑如何设计namespace的权限控制）等等；</p>
</blockquote>
<blockquote>
<p>Docker镜像，再用Dockerfile定义一个文件之后，docker build 时会产生一个docker镜像，当运行docker镜像时会真正开始提供服务</p>
</blockquote>
<blockquote>
<p>docker容器，容器是直接提供服务的</p>
</blockquote>
<p><strong>Dockerfile常用保留字指令</strong></p>
<blockquote>
<p>参考tomcat8的dockerfile入门</p>
<p><a class="link"   href="https://github.com/docker-library/tomcat" >https://github.com/docker-library/tomcat <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://github.com/docker-library/tomcat/blob/master/8.5/jdk8/corretto-al2/Dockerfile" >https://github.com/docker-library/tomcat/blob/master/8.5/jdk8/corretto-al2/Dockerfile <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<ul>
<li><p>FROM</p>
<p>基础镜像，当前新镜像是基于哪个镜像的，指定一个已经存在的镜像作为模板，第一条必须是FROM</p>
</li>
<li><p>MAINTAINER</p>
<p>镜像维护者的姓名和邮箱地址</p>
</li>
<li><p>RUN</p>
<p>容器构建时需要运行的命令</p>
<ul>
<li><p>shell格式</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">RUN &lt;命令行命令&gt;</span><br><span class="line"><span class="comment"># &lt;命令行命令&gt; 等同于 在终端操作的 shell 命令</span></span><br><span class="line">RUN yum -y install vim</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>exec格式</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">RUN [<span class="string">&quot;可执行文件&quot;</span>,<span class="string">&quot;参数1&quot;</span>,<span class="string">&quot;参数2&quot;</span>]</span><br><span class="line"><span class="comment"># RUN [&quot;./test.php&quot;,&quot;dev&quot;,&quot;offline&quot;] 等同于 RUN ./test.php dev offline</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<p>RUN是在docker build 时运行</p>
</li>
<li><p>EXPOSE</p>
<p>当前容器对外暴露的端口</p>
</li>
<li><p>WORKDIR</p>
<p>指定在创建容器后，终端默认登录进来的工作目录；一个落脚点</p>
</li>
<li><p>USER</p>
<p>指定该镜像以什么样的用户去执行，如果都不指定，默认时root</p>
</li>
<li><p>ENV</p>
<p>用来构建镜像过程中设置环境变量</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">ENV MY_PATH /user/local</span><br><span class="line"><span class="comment"># 这个环境变量可以在后续的任何RUN指令中使用,这就如同在命令前面指定了环境变量前缀一样</span></span><br><span class="line"><span class="comment"># 也可以在其他指令中直接使用这些环境变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 比如:</span></span><br><span class="line">WORKDIR <span class="variable">$MY_PATH</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>ADD</p>
<p>将宿主机目录下的文件拷贝进镜像且会自动处理URL和解压tar压缩包</p>
</li>
<li><p>COPY</p>
<p>类似ADD,拷贝文件和目录到镜像中</p>
<p>将从构建上下文目录中&lt;原路径&gt;的文件&#x2F;目录复制到新的一层的镜像内的&lt;目的路径&gt;位置</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">COPY src dest</span><br><span class="line">COPY [<span class="string">&quot;src&quot;</span>,<span class="string">&quot;dest&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;src原路径&gt;: 源文件或者源目录</span></span><br><span class="line"><span class="comment"># &lt;dest目录路径&gt;: 容器内的指定路径,该路径不用事先建好,路径不存在的话,会自动创建</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>VOLUME</p>
<p>容器数据卷，用于数据保存和持久化工作</p>
</li>
<li><p>CMD</p>
<p>指定容器启动后要干的事</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 注意</span></span><br><span class="line">Dockerfile中可以有多个CMD命令,但只有最后一个生效,CMD会被docker run 之后的参数替换</span><br><span class="line"></span><br><span class="line"><span class="comment">### 参考tomcat8中Dockerfile演示</span></span><br><span class="line"><span class="comment">#### 官网记录</span></span><br><span class="line">EXPOSE 8080</span><br><span class="line">CMD [<span class="string">&quot;catalina.sh&quot;</span>, <span class="string">&quot;run&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 自定义操作覆盖原文件命令</span></span><br><span class="line">docker run -it -p 8080:8080 tomcat /bin/bash <span class="comment">### 后缀多了 /bin/bash</span></span><br><span class="line">就会覆盖原命令</span><br></pre></td></tr></table></figure></div>

<p>对比和RUN区别</p>
<ul>
<li>CMD是在docker run 命令时运行</li>
<li>RUN是在docker build命令时运行</li>
</ul>
</li>
<li><p>ENTRYPOINT</p>
<p>也是用来指定一个容器启动时要运行的命令</p>
<p>类似于CMD指令，但是ENTRYPOINT不会被docker run 后面的命令覆盖；而且这些命令行参数会被当作参数送给ENTRYPOINT执行指定的程序</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 命令格式</span></span><br><span class="line">ENTRYPOINT [<span class="string">&quot;&lt;executeable&gt;&quot;</span>,<span class="string">&quot;&lt;param1&gt;&quot;</span>,<span class="string">&quot;&lt;param2&gt;&quot;</span>,......]</span><br><span class="line"></span><br><span class="line"><span class="comment">### ENTRYPOINT 可以和 CMD 一起用,一般变参才会使用 CMD,这里的 CMD 等于是在给 ENTRYPOINT 传参</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 当指定了ENTRYPOINT后，CMD的含义就发生了变化，不再是直接运行其命令而是将CMD的内容作为参数传递给ENTRYPOINT指令，他们两个组合会变成 &lt;ENTRYPONIT&gt; &quot;&lt;CMD&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 案例</span></span><br><span class="line"><span class="comment">##### 构建一个nginx:test镜像</span></span><br><span class="line"></span><br><span class="line">FROM nginx</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [<span class="string">&quot;nginx&quot;</span>,<span class="string">&quot;-c&quot;</span>] <span class="comment"># 定参</span></span><br><span class="line">CMD [<span class="string">&quot;/etc/nginx/nginx.conf&quot;</span>] <span class="comment"># 变参</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 运行</span></span><br><span class="line"><span class="comment">##### 按照Dockerfile运行</span></span><br><span class="line">docker run nginx:<span class="built_in">test</span>   <span class="comment">## 实际运行命令  nginx -c /etc/nginx/nginx.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##### 传参运行</span></span><br><span class="line">docker run nginx:<span class="built_in">test</span> -c /etc/nginx/new.conf  <span class="comment">## 实际运行命令 nginx -c /etc/nginx/new.conf</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>优点</p>
<p>在执行<code>docker run</code>的时候可以指定ENTRYPOINT运行时所需的参数</p>
</li>
<li><p>注意</p>
<p>如果Dockerfile中如果存在多个ENTRYPONT指令，仅最后一个生效</p>
</li>
</ul>
</li>
</ul>
<h1 id="虚悬镜像"><a href="#虚悬镜像" class="headerlink" title="虚悬镜像"></a>虚悬镜像</h1><blockquote>
<p>仓库名、标签都是<none>的镜像，俗称<code>dangling image</code></p>
</blockquote>
<ul>
<li><p>test</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">### vim Dockerfile</span></span><br><span class="line">FROM ubuntu</span><br><span class="line"></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="string">&#x27;this is a dangling image&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### docker build .</span></span><br><span class="line"><span class="comment">#### 就可以生成一个虚悬镜像</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<p><strong>虚悬镜像的操作</strong></p>
<ul>
<li><p>查看</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">docker image <span class="built_in">ls</span> -f dangling=<span class="literal">true</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>删除</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">docker image prune</span><br></pre></td></tr></table></figure></div></li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Nexus容器化部署</title>
    <url>/GSSBlog/2023/10/30/Nexus%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>nexus太浪费性能了,一般配置玩不动…..</p>
]]></content>
      <categories>
        <category>Mvn</category>
      </categories>
      <tags>
        <tag>Mvn</tag>
      </tags>
  </entry>
  <entry>
    <title>VsCode首次安装code</title>
    <url>/GSSBlog/2023/10/30/VsCode%E9%A6%96%E6%AC%A1%E5%AE%89%E8%A3%85code/</url>
    <content><![CDATA[<blockquote>
<h3 id="问题的前提"><a href="#问题的前提" class="headerlink" title="问题的前提"></a>问题的前提</h3></blockquote>
<blockquote>
<p>在首次安装<code>node(安装node之后需要重启电脑)</code>之后,使用<code>npm install</code>指令的时候遇到问题和处理方式</p>
</blockquote>
<ul>
<li><h3 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h3></li>
</ul>
<blockquote>
<p>首先需要配置<code>node</code>的镜像(默认使用官方镜像厂库,国内会超时)</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 查看厂库配置</span></span><br><span class="line">npm config get registry</span><br><span class="line"></span><br><span class="line"><span class="comment">### 设置国内淘宝镜像</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org/</span><br></pre></td></tr></table></figure></div>

<ul>
<li><h3 id="在node-install之前-更新或重新编译node-saas"><a href="#在node-install之前-更新或重新编译node-saas" class="headerlink" title="在node install之前,更新或重新编译node saas"></a>在<code>node install</code>之前,更新或重新编译<code>node saas</code></h3></li>
</ul>
<blockquote>
<p>在install之前,先配置node saas ; 避免安装时报错</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 升级 node-sass 版本：尝试将 node-sass 更新到较新版本。运行以下命令:</span></span><br><span class="line">npm install node-sass@latest</span><br><span class="line"><span class="comment">#### 这将安装 node-sass 的最新版本，可能解决与新 Node.js 版本的兼容性问题。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 手动构建 node-sass：如果上述方法不起作用，你可以尝试手动构建 node-sass。首先，确保你已经安装了 node-gyp：</span></span><br><span class="line">npm install -g node-gyp</span><br><span class="line"></span><br><span class="line"><span class="comment">### 尝试手动重新构建 node saas</span></span><br><span class="line">npm rebuild node-sass</span><br><span class="line"></span><br><span class="line"><span class="comment">### 升级 chromedriver：尝试升级 chromedriver 到最新版本：</span></span><br><span class="line">npm install chromedriver@latest</span><br><span class="line"><span class="comment">#### 注意: 可以能会依赖python环境;需要安装pyhton环境</span></span><br></pre></td></tr></table></figure></div>







<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a><code>扩展</code></h3><blockquote>
<h4 id="chromedriver-和node-saas"><a href="#chromedriver-和node-saas" class="headerlink" title="chromedriver 和node saas"></a>chromedriver 和node saas</h4></blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">chromedriver 是一个用于控制和操作 Google Chrome 浏览器的工具。它通常用于自动化测试，Web 抓取和其他需要与浏览器交互的任务。在某些情况下，它也可以与 Node.js 一起使用，以便从 Node.js 代码中启动和控制 Chrome 浏览器。</span><br><span class="line"></span><br><span class="line">node-sass 是一个 Node.js 模块，用于将 Sass（一种 CSS 预处理器）文件编译成普通的 CSS 文件。它不直接与浏览器交互或控制浏览器。通常，node-sass 是用于构建 Web 应用程序的前端工程中，以将 Sass 文件转换为浏览器可以理解的 CSS。</span><br><span class="line"></span><br><span class="line">通常情况下，chromedriver 用于执行自动化测试或爬虫任务，而 node-sass 用于前端开发中的 CSS 预处理。要解决问题，你可能需要检查项目的依赖关系和配置，以确保它们不会发生冲突。</span><br></pre></td></tr></table></figure></div>

<blockquote>
<h4 id="node版本需要和node-saaa版本对应"><a href="#node版本需要和node-saaa版本对应" class="headerlink" title="node版本需要和node-saaa版本对应"></a><code>node</code>版本需要和<code>node-saaa</code>版本对应</h4></blockquote>
]]></content>
      <categories>
        <category>Vscode</category>
      </categories>
      <tags>
        <tag>Vscode</tag>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js版本管理工具NVM</title>
    <url>/GSSBlog/2023/10/30/NodeJS%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<blockquote>
<p>nvm（全称：node.js version management），是一个<code>nodejs</code>的版本管理工具，为解决node.js各种版本存在不兼容问题，可以使用nvm工具快速安装和切换不同版本的node.js。</p>
</blockquote>
<ul>
<li>官网</li>
</ul>
<blockquote>
<p>nvm下载地址：<a class="link"   href="https://github.com/coreybutler/nvm-windows/releases" >https://github.com/coreybutler/nvm-windows/releases <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>windows版nvm下载地址：<a class="link"   href="https://nvm.uihtm.com/" >https://nvm.uihtm.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<ul>
<li><p>配置镜像</p>
<ul>
<li>阿里云镜像</li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">nvm npm_mirror https://npmmirror.com/mirrors/npm/</span><br><span class="line"></span><br><span class="line">nvm node_mirror https://npmmirror.com/mirrors/node/</span><br></pre></td></tr></table></figure></div>

<ul>
<li>腾讯云镜像</li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">nvm npm_mirror http://mirrors.cloud.tencent.com/npm/</span><br><span class="line"></span><br><span class="line">nvm node_mirror http://mirrors.cloud.tencent.com/nodejs-release/</span><br></pre></td></tr></table></figure></div>

<ul>
<li>淘宝镜像</li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">node_mirror: https://npm.taobao.org/mirrors/node/</span><br><span class="line"></span><br><span class="line">npm_mirror: https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>修改镜像</p>
</li>
</ul>
<blockquote>
<p>找到 <code>nvm\setting.txt</code>文件</p>
<p>修改setting.txt文件</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">root: D:\core\app\dev\nvm</span><br><span class="line">path: D:\core\app\dev\nodejs</span><br><span class="line"></span><br><span class="line">node_mirror: https://npm.taobao.org/mirrors/node/</span><br><span class="line">npm_mirror: https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure></div>

<ul>
<li><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a><code>常用命令</code></h3></li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">### 显示nvm版本：</span></span><br><span class="line">nvm v</span><br><span class="line"></span><br><span class="line"><span class="comment">### 显示已安装的node版本：</span></span><br><span class="line">nvm <span class="built_in">ls</span> 或 nvm list</span><br><span class="line"></span><br><span class="line"><span class="comment">### 下载指定版本的node：</span></span><br><span class="line">nvm install 16.18.1</span><br><span class="line"></span><br><span class="line"><span class="comment">### 切换指定版本的node：</span></span><br><span class="line">nvm use16.18.1</span><br><span class="line"></span><br><span class="line"><span class="comment">### 卸载指定版本的node：</span></span><br><span class="line">nvm uninstall 16.18.1</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<ul>
<li><code>查看node使用的镜像厂库和安装国内仓库</code></li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 查看使用的厂库</span></span><br><span class="line">npm config get registry</span><br><span class="line"></span><br><span class="line"><span class="comment">### 安装国内厂库</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"><span class="comment">### 官方镜像仓库</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org/</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/GSSBlog/2023/10/30/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>Maven部署jar包到远程厂库Nexus</title>
    <url>/GSSBlog/2023/10/30/mvn%E6%8C%87%E4%BB%A4%E9%83%A8%E7%BD%B2%E5%88%B0%E8%BF%9C%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p><a src="[Maven – 将第三方 JAR 部署到远程存储库的指南 (apache.org)](https://maven.apache.org/guides/mini/guide-3rd-party-jars-remote.html)">Maven官方文档</a></p>
</blockquote>
<p><strong>将本地jar打包成pom推送到远程厂库</strong></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">### install 官方指令</span></span><br><span class="line">mvn install:install-file -Dfile=&lt;path-to-file&gt; -DgroupId=&lt;group-id&gt; -DartifactId=&lt;artifact-id&gt; -Dversion=&lt;version&gt; -Dpackaging=&lt;packaging&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">### 实际操作</span></span><br><span class="line">mvn install:install-file -Dfile=F:\code\libs\test-java-sdk-1.0.0.jar -DgroupId=com.igsshan.api -DartifactId=test-java-sdk -Dversion=1.0.0 -Dpackaging=jar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### deploy 官方指令</span></span><br><span class="line">mvn deploy:deploy-file -DgroupId=&lt;group-id&gt; \</span><br><span class="line">  -DartifactId=&lt;artifact-id&gt; \</span><br><span class="line">  -Dversion=&lt;version&gt; \</span><br><span class="line">  -Dpackaging=&lt;type-of-packaging&gt; \</span><br><span class="line">  -Dfile=&lt;path-to-file&gt; \</span><br><span class="line">  -DrepositoryId=&lt;id-to-map-on-server-section-of-settings.xml&gt; \</span><br><span class="line">  -Durl=&lt;url-of-the-repository-to-deploy&gt;</span><br><span class="line">  </span><br><span class="line"><span class="comment">### 实际操作</span></span><br><span class="line">mvn deploy:deploy-file -Dmaven.test.skip=<span class="literal">true</span> -DgroupId=com.igsshan.api -DartifactId=test-java-sdk -Dversion=1.0.0-SNAPSHOT -Dpackaging=jar -Durl=http://<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;password&#x27;</span>@192.168.211.92:8081/repository/maven-snapshots/ -Dpackaging=jar -Dfile=D:\igsshan\test-java-sdk-1.0.0.jar -DpomFile=D:\igsshan\test-java-sdk-1.0.0.pom -DrepositoryId=maven-snapshots</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于install文件路径太长;最好是将生产的jar和pom文件拷贝出来;放到一个干净的目录下以便使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数说明：</span></span><br><span class="line"><span class="comment"># -Dfile       jar包文件所在目录</span></span><br><span class="line"><span class="comment"># -DgroupId      分组</span></span><br><span class="line"><span class="comment"># -DartifactId    名称</span></span><br><span class="line"><span class="comment"># -Dversion      版本</span></span><br><span class="line"><span class="comment"># -DrepositoryId  服务器的表示ID，在 nexus 的 configuration 可以看到</span></span><br><span class="line"><span class="comment"># -Durl        私服上仓库的位置，打开 nexus——&gt;repositories 菜单，可以看到该路径</span></span><br><span class="line"><span class="comment"># -DpomFile      pom.xml所在目录【非必填】</span></span><br></pre></td></tr></table></figure></div>



<p><strong><code>也可以图形化操作</code></strong></p>
<p><strong>贴图</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/maven/maven%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0jar%E5%8C%8501.png"
                     
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/maven/maven%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0jar%E5%8C%8502.png"
                     
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/maven/maven%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0jar%E5%8C%8503.png"
                     
                ></p>
]]></content>
      <categories>
        <category>Mvn</category>
      </categories>
      <tags>
        <tag>Mvn</tag>
      </tags>
  </entry>
  <entry>
    <title>多种方案部署Pandora</title>
    <url>/GSSBlog/2023/10/30/%E5%A4%9A%E7%A7%8D%E6%96%B9%E6%A1%88%E9%83%A8%E7%BD%B2Pandora/</url>
    <content><![CDATA[<h2 id="Pandora能做什么"><a href="#Pandora能做什么" class="headerlink" title="Pandora能做什么"></a>Pandora能做什么</h2><ul>
<li>本地部署ChatGPT，Pandora绕过 Cloudflare，可以把ChatGPT部署在自己的电脑上，使用127.0.0.1即可使用官方的GPT（仅需登陆一次，即可正常使用14天左右）</li>
<li>服务器部署ChatGPT，我们可以使用同样的方法，将Pandora程序安装在vps上，甚至可以使用自己的域名，无需设置网络即可使用，也不必担心IP问题</li>
<li>我们可以使用Pandora，用多种方式使用GPT，例如命令行模式，web模式，其中web页面使用方法与官网一致，还能保存记录，非常完美</li>
</ul>
<h2 id="Docker部署"><a href="#Docker部署" class="headerlink" title="Docker部署"></a><strong><code>Docker部署</code></strong></h2><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 部署在本机,无论是windows、macOS或者linux系统</span></span><br><span class="line"><span class="comment">## 拉取镜像</span></span><br><span class="line">docker pull pengzhile/pandora</span><br><span class="line"></span><br><span class="line"><span class="comment">## 启动容器</span></span><br><span class="line">docker run  -e PANDORA_CLOUD=cloud -e PANDORA_SERVER=0.0.0.0:8899 -p 8899:8899 -d pengzhile/pandora</span><br><span class="line"></span><br><span class="line"><span class="comment">### 部署成功;访问127.0.0.1:8899可以登录chatgpt web页面</span></span><br><span class="line"><span class="comment">#### http://chat.openai.com/api/auth/session 可以获取 Access Token</span></span><br><span class="line"><span class="comment">#### 缺点: 登录或者获取token需要设置网络</span></span><br></pre></td></tr></table></figure></div>

<h2 id="vps部署"><a href="#vps部署" class="headerlink" title="vps部署"></a><strong><code>vps部署</code></strong></h2><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 强调：在vps部署Pandora请使用国外主机，这样无论是电脑还是手机都可以使用GPT</span></span><br><span class="line"><span class="comment">### 安装docker环境(ubuntu系统)</span></span><br><span class="line">apt update &amp;&amp; apt install docker.io -y </span><br><span class="line"></span><br><span class="line"><span class="comment">### 拉取镜像</span></span><br><span class="line">docker pull pengzhile/pandora</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 命令行启动</span></span><br><span class="line">docker run -it --<span class="built_in">rm</span> pengzhile/pandora</span><br><span class="line"><span class="comment">#### web模式</span></span><br><span class="line">docker run  -e PANDORA_CLOUD=cloud -e PANDORA_SERVER=0.0.0.0:8899 -p 8899:8899 -d pengzhile/pandora</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="绑定域名的方式"><a href="#绑定域名的方式" class="headerlink" title="绑定域名的方式"></a><strong><code>绑定域名的方式</code></strong></h2><p><code>使用nginx配置</code></p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 编辑nginx配置文件</span></span><br><span class="line">vi /etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">## 修改配置文件内容</span></span><br><span class="line">events &#123;&#125; </span><br><span class="line"></span><br><span class="line">http &#123;    </span><br><span class="line">    server &#123; </span><br><span class="line">            listen 80;        </span><br><span class="line">            server_name fboth.pp.ua;        </span><br><span class="line"></span><br><span class="line">        location / &#123;            </span><br><span class="line">            proxy_pass http://127.0.0.1:8899;        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 退出;重启nginx</span></span><br><span class="line"><span class="comment">### 如果配置了SSL估计会遇到问题，具体看一下这个issue</span></span><br><span class="line">https://github.com/pengzhile/pandora/issues/81</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">user www-data;</span><br><span class="line">worker_processes auto;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line">include /etc/nginx/modules-enabled/*.conf;</span><br><span class="line"> </span><br><span class="line">events &#123;</span><br><span class="line">	worker_connections 768;</span><br><span class="line">	<span class="comment"># multi_accept on;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">http &#123;</span><br><span class="line"> </span><br><span class="line">	<span class="comment">##</span></span><br><span class="line">	<span class="comment"># Basic Settings</span></span><br><span class="line">	<span class="comment">##</span></span><br><span class="line"> </span><br><span class="line">	sendfile on;</span><br><span class="line">	tcp_nopush on;</span><br><span class="line">	types_hash_max_size 2048;</span><br><span class="line">	<span class="comment"># server_tokens off;</span></span><br><span class="line"> </span><br><span class="line">	<span class="comment"># server_names_hash_bucket_size 64;</span></span><br><span class="line">	proxy_headers_hash_bucket_size 1024;</span><br><span class="line">	<span class="comment"># server_name_in_redirect off;</span></span><br><span class="line"> </span><br><span class="line">	include /etc/nginx/mime.types;</span><br><span class="line">	default_type application/octet-stream;</span><br><span class="line"> </span><br><span class="line">	<span class="comment"># ----------HTTPS配置-----------  </span></span><br><span class="line">	server &#123;  </span><br><span class="line">		<span class="comment"># 监听HTTPS默认的443端口  </span></span><br><span class="line">		listen 443 ssl;  </span><br><span class="line">		<span class="comment"># 配置自己项目的域名  </span></span><br><span class="line">		server_name www.xxxxxx.com;  </span><br><span class="line">		<span class="comment"># 打开SSL加密传输  </span></span><br><span class="line">		<span class="comment"># ssl on;  </span></span><br><span class="line">		<span class="comment"># 输入域名后，首页文件所在的目录  </span></span><br><span class="line">		root html;  </span><br><span class="line">		<span class="comment"># 配置首页的文件名  </span></span><br><span class="line">		index index.html index.htm index.jsp index.ftl;  </span><br><span class="line">		<span class="comment"># 配置自己下载的数字证书  </span></span><br><span class="line">		ssl_certificate  cert/www.xxxx.cn.pem;  </span><br><span class="line">		<span class="comment"># 配置自己下载的服务器私钥  </span></span><br><span class="line">		ssl_certificate_key cert/www.xxxx.cn.key;</span><br><span class="line">		<span class="comment"># 停止通信时，加密会话的有效期，在该时间段内不需要重新交换密钥  </span></span><br><span class="line">		ssl_session_timeout 5m;  </span><br><span class="line">		<span class="comment"># TLS握手时，服务器采用的密码套件  </span></span><br><span class="line">		ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;  </span><br><span class="line">		<span class="comment"># 服务器支持的TLS版本  </span></span><br><span class="line">		ssl_protocols TLSv1 TLSv1.1 TLSv1.2;  </span><br><span class="line">		<span class="comment"># 开启由服务器决定采用的密码套件  </span></span><br><span class="line">		ssl_prefer_server_ciphers on;  </span><br><span class="line">		<span class="comment"># location / &#123;  </span></span><br><span class="line">		<span class="comment"># 	proxy_pass http://127.0.0.1:8899;  </span></span><br><span class="line">		<span class="comment"># 	# proxy_pass http://0.0.0.0:8899;</span></span><br><span class="line"> </span><br><span class="line">		<span class="comment"># &#125;  </span></span><br><span class="line">		location ^~ / &#123;</span><br><span class="line">			proxy_pass http://127.0.0.1:8899/; <span class="comment"># 将流量代理到 Pandora-Cloud 服务</span></span><br><span class="line">			proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">			proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">			proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">			proxy_set_header REMOTE-HOST <span class="variable">$remote_addr</span>;</span><br><span class="line">			proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">			proxy_set_header Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">			<span class="comment"># proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></span><br><span class="line">			proxy_set_header X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">			add_header X-Cache <span class="variable">$upstream_cache_status</span>;</span><br><span class="line">			proxy_http_version 1.1;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment"># ---------HTTP请求转HTTPS-------------  </span></span><br><span class="line">	server &#123;</span><br><span class="line">		listen 80;</span><br><span class="line">		server_name www.xxxxx.cn;</span><br><span class="line">		<span class="comment"># location / &#123;</span></span><br><span class="line">		<span class="comment"># 	proxy_pass http://127.0.0.1:8899;</span></span><br><span class="line">		<span class="comment"># &#125;</span></span><br><span class="line">		<span class="comment">#rewrite ^(.*) https://www.xxxx.cn$1 permanent;</span></span><br><span class="line">		rewrite ^(.*)$ https://$host<span class="variable">$1</span>    permanent;  <span class="comment"># 强行将 http 转化 https 来访问。</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">##</span></span><br><span class="line">	<span class="comment"># SSL Settings</span></span><br><span class="line">	<span class="comment">##</span></span><br><span class="line"> </span><br><span class="line">	ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; <span class="comment"># Dropping SSLv3, ref: POODLE</span></span><br><span class="line">	ssl_prefer_server_ciphers on;</span><br><span class="line"> </span><br><span class="line">	<span class="comment">##</span></span><br><span class="line">	<span class="comment"># Logging Settings</span></span><br><span class="line">	<span class="comment">##</span></span><br><span class="line"> </span><br><span class="line">	access_log /var/log/nginx/access.log;</span><br><span class="line">	error_log /var/log/nginx/error.log;</span><br><span class="line"> </span><br><span class="line">	<span class="comment">##</span></span><br><span class="line">	<span class="comment"># Gzip Settings</span></span><br><span class="line">	<span class="comment">##</span></span><br><span class="line"> </span><br><span class="line">	gzip on;</span><br><span class="line"> </span><br><span class="line">	<span class="comment"># gzip_vary on;</span></span><br><span class="line">	<span class="comment"># gzip_proxied any;</span></span><br><span class="line">	<span class="comment"># gzip_comp_level 6;</span></span><br><span class="line">	<span class="comment"># gzip_buffers 16 8k;</span></span><br><span class="line">	<span class="comment"># gzip_http_version 1.1;</span></span><br><span class="line">	<span class="comment"># gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</span></span><br><span class="line"> </span><br><span class="line">	<span class="comment">##</span></span><br><span class="line">	<span class="comment"># Virtual Host Configs</span></span><br><span class="line">	<span class="comment">##</span></span><br><span class="line">	<span class="comment">#include /etc/nginx/conf.d/*.conf;</span></span><br><span class="line">	<span class="comment">#include /etc/nginx/sites-enabled/*;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#mail &#123;</span></span><br><span class="line"><span class="comment">#	# See sample authentication script at:</span></span><br><span class="line"><span class="comment">#	# http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#	# auth_http localhost/auth.php;</span></span><br><span class="line"><span class="comment">#	# pop3_capabilities &quot;TOP&quot; &quot;USER&quot;;</span></span><br><span class="line"><span class="comment">#	# imap_capabilities &quot;IMAP4rev1&quot; &quot;UIDPLUS&quot;;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#	server &#123;</span></span><br><span class="line"><span class="comment">#		listen     localhost:110;</span></span><br><span class="line"><span class="comment">#		protocol   pop3;</span></span><br><span class="line"><span class="comment">#		proxy      on;</span></span><br><span class="line"><span class="comment">#	&#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#	server &#123;</span></span><br><span class="line"><span class="comment">#		listen     localhost:143;</span></span><br><span class="line"><span class="comment">#		protocol   imap;</span></span><br><span class="line"><span class="comment">#		proxy      on;</span></span><br><span class="line"><span class="comment">#	&#125;</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br></pre></td></tr></table></figure></div>



<p><code>或者使用其他工具: caddy</code></p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 编辑配置文件</span></span><br><span class="line">vi /etc/caddy/Caddyfile</span><br><span class="line"></span><br><span class="line"><span class="comment">## 修改配置文件</span></span><br><span class="line">xx.com  <span class="comment">#这里是你解析的域名</span></span><br><span class="line">encode gzip </span><br><span class="line">reverse_proxy 127.0.0.1:8899</span><br><span class="line"></span><br><span class="line"><span class="comment">## 重启服务</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>Pandora不愧是一个优秀的项目，除了docker安装，还可以pip，解决了GPT使用上的诸多问题，而且速度比官网还快;很方便</p>
</blockquote>
<h2 id="扩展-docker启动命令"><a href="#扩展-docker启动命令" class="headerlink" title="扩展: docker启动命令"></a>扩展: docker启动命令</h2><h3 id="PANDORA-ACCESS-TOKEN-指定Access-Token字符串"><a href="#PANDORA-ACCESS-TOKEN-指定Access-Token字符串" class="headerlink" title="&#96;&#96;PANDORA_ACCESS_TOKEN 指定Access Token字符串"></a><strong>&#96;&#96;PANDORA_ACCESS_TOKEN<code> 指定</code>Access Token<code>字符串</code></strong></h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d --name my-pandora-token --restart always -e PANDORA_SERVER=0.0.0.0:8899  -e PANDORA_ACCESS_TOKEN=xxxx -p 8899:8899 pengzhile/pandora</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="PANDORA-TOKENS-FILE-指定一个存放多Access-Token的文件路径"><a href="#PANDORA-TOKENS-FILE-指定一个存放多Access-Token的文件路径" class="headerlink" title="&#96;&#96;PANDORA_TOKENS_FILE 指定一个存放多Access Token的文件路径"></a><strong>&#96;&#96;PANDORA_TOKENS_FILE<code> 指定一个存放多</code>Access Token<code>的文件路径</code></strong></h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d --name my-pandora-tokens --restart always  -e PANDORA_SERVER=0.0.0.0:8899 -e PANDORA_TOKENS_FILE=/home/access_token.json -p 8899:8899 -v /home/access_token.json:/home/access_token.json pengzhile/pandora</span><br></pre></td></tr></table></figure></div>

<p><code>access_token.json内容如何，key自定义</code></p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;token&quot;</span>&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>这样就可以通过xxx.com?token&#x3D;key的方式访问</p>
</blockquote>
]]></content>
      <categories>
        <category>ChatGPT</category>
      </categories>
      <tags>
        <tag>ChatGPT</tag>
      </tags>
  </entry>
  <entry>
    <title>单机服务搭建</title>
    <url>/GSSBlog/2023/10/30/%E5%8D%95%E6%9C%BA%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="vagrant安装虚拟机"><a href="#vagrant安装虚拟机" class="headerlink" title="vagrant安装虚拟机"></a>vagrant安装虚拟机</h2><blockquote>
<p>初始化一个centos&#x2F;7</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 使用vagrant命令</span></span><br><span class="line">vagrant init centos/7</span><br><span class="line"></span><br><span class="line"><span class="comment">## 该命令会创建一个 [Vagrantfile] 文件</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>启动虚拟机</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 启动虚拟机</span></span><br><span class="line">vagrant up</span><br><span class="line"></span><br><span class="line"><span class="comment">## 连接虚拟机</span></span><br><span class="line">vagrant ssh</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>配置固定网络</p>
<p>修改 [VagrantFile] 文件</p>
</blockquote>
<div class="highlight-container" data-rel="Properties"><figure class="iseeu highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">config.vm.network</span> <span class="string">&quot;private_network&quot;, ip: &quot;192.168.56.101&quot;</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">## 修改 ip地址为本机 virtualBox 网路地址</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">## 终端重启服务,配置生效</span></span><br><span class="line"><span class="attr">vagrant</span> <span class="string">reload</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>开启 root登录 , 22(端口) 连接</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"><span class="comment">## 修改 配置文件</span></span><br><span class="line">PermitRootLogin <span class="built_in">yes</span>  <span class="comment">## root登录</span></span><br><span class="line"></span><br><span class="line">PasswordAuthentication <span class="built_in">yes</span>  <span class="comment">## 密码登录</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>配置网络</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 进入到配置目录</span></span><br><span class="line"><span class="built_in">cd</span> /etc/sysconfig/network-scripts</span><br><span class="line"></span><br><span class="line"><span class="comment">## 修改eth0 网卡文件</span></span><br><span class="line">vi ifcfg-eth0</span><br><span class="line">修改内容:</span><br><span class="line">GETWAY=192.168.56.1</span><br><span class="line">DNS1=114.114.114.114</span><br><span class="line">DNS2=8.8.8.8</span><br><span class="line"></span><br><span class="line"><span class="comment">## 保存重启</span></span><br><span class="line">esc</span><br><span class="line">:wq</span><br><span class="line">service network restart</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>设置虚拟机 yum源</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 备份 yum源</span></span><br><span class="line"><span class="built_in">mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用新 yum 源</span></span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.163.com/.help/CentOS7-Base-163.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成缓存</span></span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure></div>



<h2 id="安装JDK-1-8"><a href="#安装JDK-1-8" class="headerlink" title="安装JDK 1.8"></a>安装JDK 1.8</h2><blockquote>
<p>创建 &#x2F;mydata&#x2F;jdk文件夹</p>
<p>在oracle官网下载 jdk8 tar.gz压缩包</p>
<p>上传到 &#x2F;mydata&#x2F;jdk 文件夹下,并解压出来</p>
</blockquote>
<blockquote>
<p>配置jdk运行环境</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 配置运行环境</span></span><br><span class="line">vi /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/mydata/jdk/jdk1.8.0_291</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib:<span class="variable">$CLASSPATH</span></span><br><span class="line"><span class="built_in">export</span> JAVA_PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$&#123;JRE_HOME&#125;</span>/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$&#123;JAVA_PATH&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新配置</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看JAVA_HOME</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看PATH</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$path</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本信息</span></span><br><span class="line">java -version</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><blockquote>
<p>创建 &#x2F;mydata&#x2F;nginx 文件夹</p>
<p>下载nginx</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 安装之前检查是否有安装过</span></span><br><span class="line">nginx find-name nginx 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 下载安装包(最好在自己自定义的文件夹下下载压缩包)</span></span><br><span class="line">wget http://nginx.org/download/nginx-1.20.2.tar.gz</span><br><span class="line"></span><br><span class="line">-bash: wget: <span class="built_in">command</span> not found </span><br><span class="line"><span class="comment">## 命令不存在,见附录</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>解压,安装,启动</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 解压文件</span></span><br><span class="line">tar -zxvf nginx-1.20.2.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">## 进入nginx目录</span></span><br><span class="line"><span class="built_in">cd</span> ./nginx-1.20.2</span><br><span class="line"></span><br><span class="line"><span class="comment">## 配置</span></span><br><span class="line">./configure --prefix=/usr/local/nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">## 编译</span></span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>服务启动</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 启动nginx</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br><span class="line"><span class="comment"># -c参数指定了要加载的nginx配置文件路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载配置</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -s stop</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/local/nginx/sbin/</span><br><span class="line">./nginx </span><br><span class="line">./nginx -s stop</span><br><span class="line">./nginx -s quit</span><br><span class="line">./nginx -s reload</span><br><span class="line"></span><br><span class="line">./nginx -c /opt/app/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure></div>



<h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><blockquote>
<p>安装版本需求</p>
<p>centos7&#x2F;linux 内核3.10以上</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 查看内核版本</span></span><br><span class="line"><span class="built_in">uname</span> -r</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>移除以前的docker相关包</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>配置yum源</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 注意:在安装之前需要确定网络配置,见附录</span></span><br><span class="line">yum install -y yum-utils</span><br><span class="line"></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>安装docker</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo yum install -y docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>启动命令</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 开机自启,并且现在开启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker --now</span><br><span class="line"></span><br><span class="line"><span class="comment">## 启动docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment">## 开机自启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>配置阿里云加速</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://lljn1hsm.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></div>

<h2 id="docker部署mysql-redis…"><a href="#docker部署mysql-redis…" class="headerlink" title="docker部署mysql,redis…."></a>docker部署mysql,redis….</h2><blockquote>
<p>部署一个redis中间件</p>
</blockquote>
<ul>
<li><p>拉取镜像</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull redis</span><br><span class="line"><span class="comment">## 注:不使用镜像号,默认使用最新的镜像</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>启动镜像</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># redis使用自定义配置文件启动</span></span><br><span class="line"></span><br><span class="line">docker run -v /data/redis/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-v /data/redis/data:/data \</span><br><span class="line">-d --name redis \</span><br><span class="line">-p 6379:6379 \</span><br><span class="line">redis:latest  redis-server /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li>
</ul>
<blockquote>
<p>部署nacos</p>
</blockquote>
<ul>
<li>下载官方压缩包<ul>
<li>用的1.3得包</li>
</ul>
</li>
<li>解压到本地目录下<ul>
<li>&#x2F;mydata&#x2F;nacos</li>
</ul>
</li>
<li>启动服务<ul>
<li>sh startup.sh -m standalone</li>
</ul>
</li>
</ul>
<h2 id="dockerfile部署应用"><a href="#dockerfile部署应用" class="headerlink" title="dockerfile部署应用"></a>dockerfile部署应用</h2><blockquote>
<p>使用docker部署应用</p>
</blockquote>
<ul>
<li><p>应用打包</p>
<ul>
<li>springboot –&gt; mvn –&gt; package</li>
</ul>
</li>
<li><p>target 上传到服务器</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 服务器命令</span></span><br><span class="line">[root@localhost service-hosp]<span class="comment"># pwd</span></span><br><span class="line">/mydata/app/syt/service-hosp</span><br><span class="line">[root@localhost service-hosp]<span class="comment"># ls</span></span><br><span class="line">Dockerfile  target</span><br><span class="line">[root@localhost service-hosp]<span class="comment"># </span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>编写dockerfile文件</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">FROM openjdk:8-jdk-slim</span><br><span class="line">LABEL maintainer=gongshishan</span><br><span class="line"></span><br><span class="line">COPY target/*.jar  /app.jar</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app.jar&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">## 解释</span></span><br><span class="line">FROM openjdk:8-jdk-slim <span class="comment"># 必须; from 跟着的是应用的基础环境,本文用的是java,所以用的是openjdk</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>构建镜像</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">docker build -t java-demo:v1.0 .</span><br><span class="line"></span><br><span class="line"><span class="comment">## [.] 命令后面的 点 必须;作用是当前目录下的执行</span></span><br><span class="line"></span><br><span class="line">[root@localhost service-hosp]<span class="comment"># docker build -t syt-hosp:v1.0 .</span></span><br><span class="line">Sending build context to Docker daemon  92.41MB</span><br><span class="line">Step 1/4 : FROM openjdk:8-jdk-slim</span><br><span class="line">8-jdk-slim: Pulling from library/openjdk</span><br><span class="line">a2abf6c4d29d: Already exists </span><br><span class="line">2bbde5250315: Pull complete </span><br><span class="line">115191490c27: Pull complete </span><br><span class="line">61b680ac8083: Pull complete </span><br><span class="line">Digest: sha256:25efb6e0609b95af243b4e3ce2c27dbc1022ef2a4db2164b7afa066c0db18137</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> openjdk:8-jdk-slim</span><br><span class="line"> ---&gt; 9afd0fe33df7</span><br><span class="line">Step 2/4 : LABEL maintainer=gongshishan</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> fe44d7ea6368</span><br><span class="line">Removing intermediate container fe44d7ea6368</span><br><span class="line"> ---&gt; 578c902545a1</span><br><span class="line">Step 3/4 : COPY target/*.jar  /app.jar</span><br><span class="line"> ---&gt; 9e7edc0d660b</span><br><span class="line">Step 4/4 : ENTRYPOINT [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app.jar&quot;</span>]</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> c8cf1f8a3293</span><br><span class="line">Removing intermediate container c8cf1f8a3293</span><br><span class="line"> ---&gt; 2e57c5151161</span><br><span class="line">Successfully built 2e57c5151161</span><br><span class="line">Successfully tagged syt-hosp:v1.0</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看镜像</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost service-hosp]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY   TAG          IMAGE ID       CREATED         SIZE</span><br><span class="line">syt-hosp     v1.0         2e57c5151161   4 minutes ago   388MB</span><br><span class="line">openjdk      8-jdk-slim   9afd0fe33df7   7 months ago    296MB</span><br><span class="line">redis        latest       7614ae9453d1   7 months ago    113MB</span><br><span class="line">mysql        5.7          c20987f18b13   7 months ago    448MB</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>运行</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d -p 18007:18007 --name syt-hosp syt-hosp:v1.0 </span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><blockquote>
<p>docker 分享镜像</p>
</blockquote>
<ul>
<li><p>查看自己的镜像,把需要的镜像推送到自己的docker厂库</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 登录镜像</span></span><br><span class="line">docker login</span><br><span class="line"></span><br><span class="line"><span class="comment">## 给镜像重新打个标签,必须是以自己的docker名开头</span></span><br><span class="line">docker tag syt-hosp igsshan/syt-hosp</span><br><span class="line"></span><br><span class="line"><span class="comment">## 推送厂库</span></span><br><span class="line">docker push igsshan/syt-hosp</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h4 id="bash-wget-command-not-found"><a href="#bash-wget-command-not-found" class="headerlink" title="-bash: wget: command not found"></a>-bash: wget: command not found</h4><blockquote>
<p>wget 不存在,需要自己安装</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 安装 wget</span></span><br><span class="line">yum -y install wget</span><br></pre></td></tr></table></figure></div>

<h4 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h4><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 进入到配置目录</span></span><br><span class="line"><span class="built_in">cd</span> /etc/sysconfig/network-scripts</span><br><span class="line"></span><br><span class="line"><span class="comment">## 修改eth0 网卡文件</span></span><br><span class="line">vi ifcfg-eth0</span><br><span class="line">修改内容:</span><br><span class="line">GETWAY=192.168.56.1</span><br><span class="line">DNS1=114.114.114.114</span><br><span class="line">DNS2=8.8.8.8</span><br><span class="line"></span><br><span class="line"><span class="comment">## 保存重启</span></span><br><span class="line">esc</span><br><span class="line">:wq</span><br><span class="line">service network restart</span><br><span class="line"></span><br><span class="line"><span class="comment">## 设置yum源</span></span><br><span class="line"><span class="comment"># 备份yum源</span></span><br><span class="line"><span class="built_in">mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用新 yum 源</span></span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.163.com/.help/CentOS7-Base-163.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成缓存</span></span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL用户登录失败</title>
    <url>/GSSBlog/2023/10/30/0.1MySQL%E5%AF%86%E7%A0%81%E6%89%BE%E5%9B%9E/</url>
    <content><![CDATA[<h2 id="Access-denied-for-user-‘root‘-’localhost’-using-password-YES"><a href="#Access-denied-for-user-‘root‘-’localhost’-using-password-YES" class="headerlink" title="Access denied for user ‘root‘@’localhost’ (using password: YES)"></a>Access denied for user ‘root‘@’localhost’ (using password: YES)</h2><blockquote>
<p>  经查找资料发现是 root 帐户默认不开放远程访问权限，所以需要修改一下相关权限。</p>
</blockquote>
<ul>
<li><h2 id="解决方案1"><a href="#解决方案1" class="headerlink" title="解决方案1"></a>解决方案1</h2><ul>
<li>关闭MySQL服务<ul>
<li>方式一:<ul>
<li>命令行管理员打开执行命令<code>net stop mysql服务名</code></li>
</ul>
</li>
<li>方式二:<ul>
<li>通过任务管理器,管理mysql服务进程</li>
</ul>
</li>
</ul>
</li>
<li>打开MySQL目录下的<code>my.ini</code>文件;在文件最后一行添加<code>skip-grant-tables</code>;保存并关闭文件.(my.ini默认在 <code>C:\ProgramData\MySQL\MySQL Server 5.7</code>文件下)</li>
<li>重启服务</li>
<li>无密码方式登录服务<ul>
<li>mysql -u root -P 3306</li>
</ul>
</li>
<li>修改用户权限表<ul>
<li><code>use mysql</code></li>
<li>修改用户密码<ul>
<li><code>update user set authentication_string = password(&#39;新密码&#39;) where user = &#39;root&#39; and Host = &#39;localhost&#39;;</code></li>
</ul>
</li>
<li>刷新权限<ul>
<li><code>flush privileges;</code></li>
</ul>
</li>
</ul>
</li>
<li>再次关闭服务</li>
<li>启动服务</li>
<li>使用账密登录服务</li>
<li>成功</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
        <category>Basic</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基础命令</title>
    <url>/GSSBlog/2023/10/30/0.MySQL%E6%9D%82%E8%AE%B0-%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<ul>
<li><p>查看数据库字符集</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;character%&#x27;</span>;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看某个表已有的约束</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="variable">@a</span> :<span class="operator">=</span> DATABASE();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.table_constraints</span><br><span class="line"><span class="keyword">WHERE</span> table_schema <span class="operator">=</span> <span class="variable">@a</span> <span class="keyword">AND</span> table_name <span class="operator">=</span> <span class="string">&#x27;表名称&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- information_schema 数据库名(系统库)</span></span><br><span class="line"><span class="comment">-- table_constraints 表名称(专门存储各个表的约束)</span></span><br><span class="line"><span class="comment">-- @a 用户自定义变量(获取当前使用的数据库名称)</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看字符集比较规则</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看GBK字符集的比较规则</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">COLLATION</span> <span class="keyword">LIKE</span> <span class="string">&#x27;GBK%&#x27;</span>; <span class="comment">-- 两个结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看UTF8字符集的比较规则</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">COLLATION</span> <span class="keyword">LIKE</span> <span class="string">&#x27;utf8%&#x27;</span>; <span class="comment">-- 很多..</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看服务使用的字符集和比较规则</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看服务器的字符集和比较规则</span></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%_server&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看数据库的字符集和比较规则</span></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%_database&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看具体数据库的字符集</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE dbtest1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改数据库的字符集</span></span><br><span class="line"><span class="keyword">ALTER</span> DATABASE dbtest1 DETUALT <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="string">&#x27;utf8&#x27;</span> COLLCTE <span class="string">&#x27;utf8_general_ci&#x27;</span>;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看数据库的字符集和比较规则</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看表的字符集</span></span><br><span class="line"><span class="keyword">SHOW</span> CREATER <span class="keyword">TABLE</span> table_test1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看表的比较规则</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS <span class="keyword">FROM</span> dbtest1 <span class="keyword">LIKE</span> <span class="string">&#x27;table-test1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表的字符集和比较规则</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_test1 <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="string">&#x27;utf8&#x27;</span> <span class="keyword">COLLATE</span> <span class="string">&#x27;utf8_general_ci&#x27;</span>;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<h2 id="sql-mode设置"><a href="#sql-mode设置" class="headerlink" title="sql_mode设置"></a>sql_mode设置</h2></blockquote>
</li>
<li><p>查看当前的<code>sql_mode</code></p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 全局</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@global</span>.sql_mode;</span><br><span class="line"><span class="comment">-- 会话</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@session</span>.sql_model;</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;sql_mode&#x27;</span>;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>临时设置: 设置当前窗口<code>sql_mode</code></p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 全局</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> sql_mode <span class="operator">=</span> <span class="string">&#x27;modes ...&#x27;</span>;</span><br><span class="line"><span class="comment">-- 当前会话</span></span><br><span class="line"><span class="keyword">SET</span> SESSION sql_mode <span class="operator">=</span> <span class="string">&#x27;modes ...&#x27;</span>;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>永久设置: 在<code>/etc/my.cnf</code>中配置<code>sql_mode</code></p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 在 my.cnf(windows系统文件叫 my.ini) 文件中新增配置</span></span><br><span class="line">[mysqld]</span><br><span class="line">sql_mode <span class="operator">=</span> ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 然后重启MySQL服务</span></span><br><span class="line"><span class="comment">-- 注意;在生产环境上是禁止重启MySQL服务的,所以采用 &quot;临时设置方式 + 永久设置方式&#x27; 来解决线上的问题;那么即使有天重启了MySQL服务,也会永久生效</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<h2 id="sql脚本文件执行"><a href="#sql脚本文件执行" class="headerlink" title="sql脚本文件执行"></a>sql脚本文件执行</h2></blockquote>
</li>
<li><p>执行 xxx.sql文件</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 登录MySQL服务器</span></span><br><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>p <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 执行sql文件</span></span><br><span class="line">source <span class="operator">/</span>文件存储路径<span class="operator">/</span>xxx.sql;  <span class="comment">-- 不要加引号</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
        <category>Basic</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL服务安装,卸载</title>
    <url>/GSSBlog/2023/10/30/1.Mysql%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="卸载和安装"><a href="#卸载和安装" class="headerlink" title="卸载和安装"></a>卸载和安装</h2><ul>
<li>卸载<ul>
<li>需要卸载干净sql服务,包括<code>系统配置</code>,<code>注册表</code></li>
</ul>
</li>
<li>安装<ul>
<li>官方下载安装包安装</li>
</ul>
</li>
</ul>
<h2 id="登录和使用"><a href="#登录和使用" class="headerlink" title="登录和使用"></a>登录和使用</h2><ul>
<li><p>windows命令行</p>
<ul>
<li>使用windows的dos命令登录mysql</li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u root <span class="operator">-</span>P <span class="number">3306</span> <span class="operator">-</span>h <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="operator">-</span>proot</span><br></pre></td></tr></table></figure></div>

<p>注意:</p>
<ul>
<li>-p和密码之间不能有空格,否则会认为是密码的一部分,其他的参数可以有也可以没有,不强制要求</li>
<li>-p密码建议在下一行输入,保证安全</li>
<li>如果客户端和服务端在同一台机器上,ip(localhost)可以省略,如果默认使用3306端口号,也可以省略</li>
</ul>
</li>
<li><p><code>基础使用</code></p>
<ul>
<li>简单命令</li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看服务版本号(登录前)</span></span><br><span class="line">mysql <span class="operator">-</span>v <span class="operator">/</span> mysql <span class="comment">--version</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 登录后</span></span><br><span class="line"><span class="keyword">select</span> version();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 退出</span></span><br><span class="line">exit ; <span class="operator">/</span> quit;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看所有数据库</span></span><br><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用数据库</span></span><br><span class="line">use (数据库名)mysql;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">create</span> database mytest1;</span><br><span class="line"></span><br><span class="line">use mytest1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> mytable1(</span><br><span class="line">id <span class="type">int</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看表的创建信息</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> mytable1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看编码命令</span></span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;character_%&#x27;</span>;</span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;collation_%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改用户密码规则</span></span><br><span class="line"># 使用mysql数据库</span><br><span class="line">use mysql;</span><br><span class="line"># 修改root<span class="variable">@localhost</span>用户的密码规则和密码</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">with</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;abc123&#x27;</span>;</span><br><span class="line"># 刷新权限</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改数据表的字符编码</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> mytable1 charset utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改数据表字段的字符编码</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> mytable1 modify name <span class="type">varchar</span>(<span class="number">20</span>) charset utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改数据库的字符编码</span></span><br><span class="line"><span class="keyword">alter</span> datable mytest1 charset utf8;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>注意:</p>
<p>mysql 8.0之前,默认字符集是<code>latin1</code>,utf8字符集指向的是utf8mb3,</p>
<p>从mysql 8.0开始,数据库的默认编码改为utf8,从而避免了5.7的默认乱码问题</p>
</li>
</ul>
<h2 id="基本的SELECT语句"><a href="#基本的SELECT语句" class="headerlink" title="基本的SELECT语句"></a>基本的SELECT语句</h2><h3 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h3><p><strong>sql语言在功能上主要分为3大类</strong></p>
<ul>
<li><p>DDL(data definition languages 数据库定义语言),这些语句定义了不同的数据库,表,视图,索引等数据库对象,还可以用来创建,删除,修改数据库和数据表的结构</p>
<ul>
<li>主要的语句关键字包括<code>create</code> <code>drop</code> <code>alter</code>等</li>
</ul>
</li>
<li><p>DML(data manipulation language 数据操作语言),用于添加,删除,更新和查询数据库的记录,并检查数据的完整性</p>
<ul>
<li>主要的语句关键字包括<code>inset</code> <code>update</code> <code>delete</code> <code>select</code>等</li>
<li><code>select</code>是<code>sql</code>语言的基础,必须掌握</li>
</ul>
</li>
<li><p>DCL(data control language 数据控制语言),用于定义数据库,表,字段,用户的访问权限和安全级别</p>
<ul>
<li>主要的语句关键字包括<code>grant(授予)</code> <code>revoke(撤销)</code> <code>commit(提交)</code> <code>rollback(回滚)</code> <code>savepoint(保存)</code>等</li>
</ul>
<div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">因为查询语句使用的频率非常频繁,也有人把查询语句单独拎出来一类:DQL(data query language 数据查询语言),还有单独将 commit 和 rollback 取出来称为 TCL(transaction control langyage 事务控制语言)</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h4 id="distinct使用"><a href="#distinct使用" class="headerlink" title="distinct使用"></a><code>distinct</code>使用</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> department_id,salary <span class="keyword">from</span> employees;</span><br></pre></td></tr></table></figure></div>

<p>注意:</p>
<p><code>DISTINCT</code>需要放到所有列名的前面,如果写成<code>select salary DISTINCT department_id from employees</code>就会报错</p>
<p><code>DISTINCT</code>其实是对后面的所有列名的组合进行去重,你能看到最后的结果是74条,是因为这74个部门id不同,都有salary这个属性值,如果想要看都有哪些不同的部门(department_id),只需要些<code>DISTINCT department_id</code>即可,后面不需要再加其他的列名了</p>
<h4 id="空值参与运算"><a href="#空值参与运算" class="headerlink" title="空值参与运算"></a>空值参与运算</h4><ul>
<li>所有运算符或者列值遇到<code>null</code>值,运算的结果都为<code>null</code><ul>
<li>注意,在mysql中,空值不等于空字符串,一个空字符串的长度是<code>0</code>,而一个空值的长度是<code>空</code>.而且,在mysql中,空值是占用空间的.</li>
</ul>
</li>
</ul>
<h4 id="显示表结构"><a href="#显示表结构" class="headerlink" title="显示表结构"></a>显示表结构</h4><ul>
<li>使用<code>DESCRIBE</code>或者<code>DESC</code>命令,显示表结构</li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DESCRIBE</span> employees;</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">DESC</span> employees;</span><br></pre></td></tr></table></figure></div>

<h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><ul>
<li>一个数乘以1和除以1,仍得原数</li>
<li>一个数乘以浮点数1和除以浮点数1后变成浮点数,结果还是原数</li>
<li>一个数除以一个整数,不管是否能够除尽,结果都是浮点数</li>
<li>一个数除以另一个数,除不尽时,结果为一个浮点数,并保留到小数点后四位</li>
<li>乘法和除法优先级相同,先乘后除或者先除后乘结果相同</li>
<li>在数学运算中,<code>0</code>不能做除数,在mysql中,一个数除以<code>0</code>为<code>null</code>;</li>
</ul>
<h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><blockquote>
<p>比较运算符用来对表达式左边的操作数和右边的操作数进行比较，比较的结果为真则返回1，比较的结果为假则返回0，其他情况则返回NULL。</p>
<p>比较运算符经常被用来作为SELECT查询语句的条件来使用，返回符合条件的结果记录。</p>
</blockquote>
]]></content>
      <categories>
        <category>MySQL</category>
        <category>Basic</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL子查询</title>
    <url>/GSSBlog/2023/10/30/3.%E5%AD%90%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<p>子查询指一个查询语句嵌套在另一个查询语句内部的查询，这个特性从MySQL 4.1开始引入。</p>
<p>SQL 中子查询的使用大大增强了 SELECT 查询的能力，因为很多时候查询需要从结果集中获取数据，或者 </p>
<p>需要从同一个表中先计算得出一个数据结果，然后与这个数据结果（可能是某个标量，也可能是某个集 </p>
<p>合）进行比较。</p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ul>
<li>语法结构<ul>
<li>子查询(内查询)在主查询之前一次执行完成</li>
<li>子查询的结果被主查询(外查询)使用</li>
</ul>
</li>
<li>注意事项<ul>
<li>子查询要包含在括号内</li>
<li>将子查询放在比较条件的右侧</li>
<li>单行操作符对应单行子查询,多行操作符对应多行子查询</li>
</ul>
</li>
</ul>
<h2 id="子查询分类"><a href="#子查询分类" class="headerlink" title="子查询分类"></a>子查询分类</h2><ul>
<li>分类方式一<ul>
<li>根据内查询的结果返回一条还是多条记录,将子查询分为<code>单行子查询</code>和<code>多行子查询</code><ul>
<li>单行子查询</li>
<li>多行子查询</li>
</ul>
</li>
</ul>
</li>
<li>分类方式二<ul>
<li>根据内查询是否被执行多次,将子查询划分为<code>相关(或关联)子查询</code>和<code>不相关(或非关联)子查询</code><ul>
<li>子查询从数据表中查询了数据结果,如果这个数据结果只执行一次,然后这个数据结果作为主查询的条件进行执行,那么这样的子查询叫做不相关子查询</li>
<li>同样,如果子查询需要执行多次,即采用循环的方式,先从外部查询开始,每次都传入子查询进行查询,然后再将结果反馈给外部,这种嵌套的执行方式就称为相关子查询.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="单行子查询"><a href="#单行子查询" class="headerlink" title="单行子查询"></a>单行子查询</h3><h4 id="单行操作符"><a href="#单行操作符" class="headerlink" title="单行操作符"></a>单行操作符</h4><table>
<thead>
<tr>
<th>操作符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>&#x3D;</td>
<td>equal to</td>
</tr>
<tr>
<td>&gt;</td>
<td>greater than</td>
</tr>
<tr>
<td>&gt;&#x3D;</td>
<td>greater then or equal to</td>
</tr>
<tr>
<td>&lt;</td>
<td>less then</td>
</tr>
<tr>
<td>&lt;&#x3D;</td>
<td>less then or equal to</td>
</tr>
<tr>
<td>&lt;&gt;</td>
<td>not equal to</td>
</tr>
</tbody></table>
<ul>
<li>子查询中空值问题<ul>
<li>如果内查询中查询的结果还是空值,子查询不返回任何行</li>
</ul>
</li>
<li>非法使用子查询<ul>
<li>多行子查询使用单行比较符<ul>
<li>报错: 错误代码1242;Subquery returns more than 1 row</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="多行子查询"><a href="#多行子查询" class="headerlink" title="多行子查询"></a>多行子查询</h3><ul>
<li>也称为集合比较子查询</li>
<li>内查询返回多行</li>
<li>使用多行比较操作符</li>
</ul>
<h4 id="多行比较操作符"><a href="#多行比较操作符" class="headerlink" title="多行比较操作符"></a>多行比较操作符</h4><table>
<thead>
<tr>
<th>操作符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>IN</td>
<td>等于列表中的任意一个</td>
</tr>
<tr>
<td>ANY</td>
<td>需要和单行比较操作符一起使用,和子查询返回的某一个值比较</td>
</tr>
<tr>
<td>ALL</td>
<td>需要和单行比较操作符一起使用,和子查询返回的所有值比较</td>
</tr>
<tr>
<td>SOME</td>
<td>实际上是ANY的别名,作用相同,一般常用ANY</td>
</tr>
</tbody></table>
<blockquote>
<p>体会 ANY 和 ALL 的区别</p>
</blockquote>
<ul>
<li>ANY查询结果,比较<code>&gt;</code>就是<code>ANY</code>结果的<code>最小值</code>,<code>&lt;</code>就是<code>ANY</code>结果的<code>最大值</code></li>
<li>ALL查询结果,比较<code>&gt;</code>就是<code>ALL</code>结果的<code>最大值</code>,<code>&lt;</code>就是<code>ALL</code>结果的<code>最小值</code></li>
</ul>
<blockquote>
<p>空值问题</p>
</blockquote>
<ul>
<li>内查询中的结果不存在主查询中,会返回空值<ul>
<li>no rows selected</li>
</ul>
</li>
</ul>
<h3 id="相关子查询"><a href="#相关子查询" class="headerlink" title="相关子查询"></a>相关子查询</h3><h4 id="相关子查询执行流程"><a href="#相关子查询执行流程" class="headerlink" title="相关子查询执行流程"></a>相关子查询执行流程</h4><p>如果子查询的执行依赖于外部查询,通常情况下都是因为子查询中的表用到了外部的表,并进行了条件关联,因此每执行一次外部查询,子查询都要重新计算一次,这样的子查询就称之为<code>关联子查询</code></p>
<p>相关子查询按照一行接一行的顺序执行,主查询的每一行都执行一次子查询</p>
<p>GET 从主查询中获取候选列 &#x3D;&#x3D;&#x3D;&#x3D;&gt; EXECUTE 子查询使用主查询的数据 &#x3D;&#x3D;&#x3D;&#x3D;&gt; USE 如果满足子查询的条件则返回该行</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table1 <span class="keyword">outer</span></span><br><span class="line"><span class="keyword">WHERE</span> column1 operator</span><br><span class="line">					( <span class="keyword">SELECT</span> column1, column2</span><br><span class="line">                     <span class="keyword">FROM</span> table2</span><br><span class="line">                     <span class="keyword">WHERE</span> expr1 <span class="operator">=</span> outer.expr2);</span><br><span class="line">                     </span><br><span class="line"><span class="comment">-- 注意: 子查询使用主查询中的列</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>在FROM中使用子查询</li>
</ul>
<blockquote>
<p>FROM 型的子查询: 子查询是作为FROM的一部分, 子查询要用 <code>()</code>引起来, 并且要给这个子查询取别名, 把它当做一张”临时的虚拟的表”来使用</p>
</blockquote>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询员工中工资大于本部门平均工资的员工的last_name,salary和其department_id</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name, salary, emp1.department_id</span><br><span class="line"><span class="keyword">FROM</span> employees emp1,(<span class="keyword">SELECT</span> department_id,</span><br><span class="line"><span class="built_in">AVG</span>(salary) emp_avg_sal <span class="keyword">FROM</span> employees <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id) emp2</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">emp1.salary <span class="operator">&gt;</span> emp2.emp_avg_sal</span><br><span class="line"><span class="keyword">AND</span> emp1.department_id <span class="operator">=</span> emp2.department_id</span><br></pre></td></tr></table></figure></div>

<ul>
<li>在 GROUP BY 中使用子查询</li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询员工的id,salary,按照department_name 排序</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, salary</span><br><span class="line"><span class="keyword">FROM</span> employees e1</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> (</span><br><span class="line">			<span class="keyword">SELECT</span> department_name</span><br><span class="line">			<span class="keyword">FROM</span> departments d</span><br><span class="line">			<span class="keyword">WHERE</span> e1.department_id <span class="operator">=</span> d.department_id</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>

<h4 id="EXISTS和NOT-EXISTS关键字"><a href="#EXISTS和NOT-EXISTS关键字" class="headerlink" title="EXISTS和NOT EXISTS关键字"></a>EXISTS和NOT EXISTS关键字</h4><ul>
<li>关联子查询通常也会和<code>EXISTS</code>操作符一起来使用,用来检查在子查询中是否存在满足条件的行</li>
<li>如果在子查询中不存在满足条件的行<ul>
<li>条件返回	<code>FALSE</code></li>
<li>继续在子查询中查找</li>
</ul>
</li>
<li>如果在子查询中存在满足条件的行<ul>
<li>不在子查询中继续查找</li>
<li>条件返回<code>TRUE</code></li>
</ul>
</li>
<li>NOT EXISTS 关键字表示吐过不存在某种条件,则返回<code>TRUE</code>,否则返回<code>FALSE</code></li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询公司管理者的employee_id，last_name，job_id，department_id信息</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, job_id, department_id</span><br><span class="line"><span class="keyword">FROM</span> employees emp1</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees emp2 <span class="keyword">WHERE</span> emp1.employee_id <span class="operator">=</span> emp2.manager_id);</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询departments表中，不存在于employees表中的部门的department_id和department_name</span></span><br><span class="line"><span class="keyword">SELECT</span> department_id, department_name</span><br><span class="line"><span class="keyword">FROM</span> departments d1</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> d1.department_id <span class="operator">=</span> department_id);</span><br></pre></td></tr></table></figure></div>

<h4 id="相关拓展"><a href="#相关拓展" class="headerlink" title="相关拓展"></a>相关拓展</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--谁的工资比Abel的高？</span></span><br><span class="line"># 自连接</span><br><span class="line"><span class="keyword">SELECT</span> e2.last_name, e2.salary</span><br><span class="line"><span class="keyword">FROM</span> employees e1 , employees e2</span><br><span class="line"><span class="keyword">WHERE</span> e1.last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> e1.salary <span class="operator">&lt;=</span> e2.salary</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary;</span><br><span class="line"></span><br><span class="line"># 子查询</span><br><span class="line"><span class="keyword">SELECT</span> last_name, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;=</span> (<span class="keyword">SELECT</span> salary <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>哪种查询方式好<ul>
<li>以上的查询可以使用子查询,也可以使用自连接.一般情况建议使用自连接,因为在许多<code>DBMS</code>的处理过程中,对于自连接的处理速度要比子查询快得多</li>
<li>可以这样理解: 子查询实际上是通过为知表进行查询后的条件判断,而自连接是通过已知的自身数据表进行条件判断,因为在大部分<code>DBMS</code>中都对自连接处理进行了优化.</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
        <category>Basic</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL函数</title>
    <url>/GSSBlog/2023/10/30/2.mysql%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h2><ul>
<li>操作数据对象</li>
<li>接受参数返回一个结果</li>
<li>只对一行进行交换</li>
<li>每行返回一个结果</li>
<li>可以嵌套</li>
<li>参数可以是一列或者一个值</li>
</ul>
<h3 id="基本函数"><a href="#基本函数" class="headerlink" title="基本函数"></a>基本函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>ABS(X)</td>
<td>返回x的绝对值</td>
</tr>
<tr>
<td>SIGN(X)</td>
<td>返回x的符号.正数返回1,负数返回-1,0返回0</td>
</tr>
<tr>
<td>PI()</td>
<td>返回圆周率的值</td>
</tr>
<tr>
<td>CEIL(X),CEILING(X)</td>
<td>返回大于或者等于某个值的最小整数</td>
</tr>
<tr>
<td>FLOOR(X)</td>
<td>返回小于或者等于某个值的最大整数</td>
</tr>
<tr>
<td>LEAST(e1,e2,e3…)</td>
<td>返回列表中的最小值</td>
</tr>
<tr>
<td>GREATEST(e1,e2,e3…)</td>
<td>返回列表中的最大值</td>
</tr>
<tr>
<td>MOD(x,y)</td>
<td>返回x除以y后的余数</td>
</tr>
<tr>
<td>RAND()</td>
<td>返回0-1的随机数</td>
</tr>
<tr>
<td>RAND(X)</td>
<td>返回0-1的随机数,其中x的值用作种子值,相同的x值会产生相同的随机数</td>
</tr>
<tr>
<td>ROUND(X)</td>
<td>返回一个对x的值进行四舍五入后,最接近于x的整数</td>
</tr>
<tr>
<td>ROUND(X,Y)</td>
<td>返回一个对x的值进行四舍五入后最接近x的值,并保留到小数点后面y位</td>
</tr>
<tr>
<td>TRUNCATE(X,Y)</td>
<td>返回数字x截断为y位小数</td>
</tr>
<tr>
<td>SQRT(X)</td>
<td>返回x的平方根,当x的值为负数时,返回null</td>
</tr>
</tbody></table>
<h3 id="进制转换函数"><a href="#进制转换函数" class="headerlink" title="进制转换函数"></a>进制转换函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>BIN(X)</td>
<td>返回x的二进制编码</td>
</tr>
<tr>
<td>HEX(X)</td>
<td>返回x的十六进制编码</td>
</tr>
<tr>
<td>OCT(X)</td>
<td>返回x的八进制编码</td>
</tr>
<tr>
<td>CONV(X,F1,F2)</td>
<td>返回f1进制数变成f2进制数</td>
</tr>
</tbody></table>
<h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><blockquote>
<p>注意:mysql的索引都是从1开始的</p>
</blockquote>
<table>
<thead>
<tr>
<th>函数</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>ASCII(s)</td>
<td>返回字符串s中的第一个字符的ASCII码值</td>
</tr>
<tr>
<td>CHAR_LENGTH(s)</td>
<td>返回字符串s的字符数,作用于CHARACTER_LENGTH(s)相同</td>
</tr>
<tr>
<td>LENGTH(s)</td>
<td>返回字符串s的字节数,和字符集有关(一个汉字占三个字节)</td>
</tr>
<tr>
<td>CONCAT(s1,s2,s3….,sn)</td>
<td>连接s1,s2,…,sn为一个字符串</td>
</tr>
<tr>
<td>CONCAT_WS(x,s1,s2…,sn)</td>
<td>同CONCAT(s1,s2…)函数,但是每个字符串之间要加上x</td>
</tr>
<tr>
<td>INSERT(str,idx,len,replacestr)</td>
<td>将字符串str从第idx位置开始,len个字符长的子串替换为字符串replacestr</td>
</tr>
<tr>
<td>REPLACE(str,a,b)</td>
<td>用字符串b替换字符串str中所有出现的字符串a</td>
</tr>
<tr>
<td>UPPER(s)或UCASE(s)</td>
<td>将字符串s的所有字母转换成大写字母</td>
</tr>
<tr>
<td>LOWER(s)或LCASE(s)</td>
<td>将字符串s的所有字母转成成小写字母</td>
</tr>
<tr>
<td>LEFT(str,n)</td>
<td>返回字符串str最左边的n个字符</td>
</tr>
<tr>
<td>RIGHT(str,n)</td>
<td>返回字符串str最右边的n个字符</td>
</tr>
<tr>
<td>LPAD(str,len,pad)</td>
<td>用字符串pad对str最左边进行填充,直到str的长度为len个字符</td>
</tr>
<tr>
<td>RPAD(str,len,pad)</td>
<td>用字符串pad对str最右边进行填充,直到str的长度为len个字符</td>
</tr>
<tr>
<td>LTRIM(s)</td>
<td>去掉字符串s左侧的空格</td>
</tr>
<tr>
<td>RTRIM(s)</td>
<td>去掉字符串s右侧的空格</td>
</tr>
<tr>
<td>TRIM(s)</td>
<td>去掉字符串s开始与结尾的空格</td>
</tr>
<tr>
<td>TRIM(s1 FROM s)</td>
<td>去掉字符串s开始与结尾的s1</td>
</tr>
<tr>
<td>TRIM(LEADING s1 FROM s)</td>
<td>去掉字符串s开始处的s1</td>
</tr>
<tr>
<td>TRIM(TRAILING s1 FROM s)</td>
<td>去掉字符串s结尾处的s1</td>
</tr>
<tr>
<td>REPEAT(str,n)</td>
<td>返回str重复n次的结果</td>
</tr>
<tr>
<td>SPACE(n)</td>
<td>返回n个空格</td>
</tr>
<tr>
<td>STRCMP(s1,s2)</td>
<td>比较字符串s1,s2的ASCII码值的大小</td>
</tr>
<tr>
<td>SUBSTR(s,index,ken)</td>
<td>返回字符串s的index位置其len个字符,作用与SUBSTRING(s,n,len),MID(s,n,len)相同</td>
</tr>
<tr>
<td>LOCATE(substr,str)</td>
<td>返回字符串substr在字符串str中首次出现的位置,作用与POSITION(substr IN str),INSTR(str,substr)相同.未找到则返回0</td>
</tr>
<tr>
<td>ELT(m,s1,s2…,sn)</td>
<td>返回指定位置的字符串,如果m&#x3D;1,则返回s1,如果m&#x3D;2,则返回s2,如果m&#x3D;n,则返回sn</td>
</tr>
<tr>
<td>FIELT(s,s1,s2…,sn)</td>
<td>返回字符串s在字符串列表中第一次出现的位置</td>
</tr>
<tr>
<td>FIND_IN_SET(s1,s2)</td>
<td>返回字符串s1在字符串s2中出现的位置,其中,字符串s2是一个以逗号分隔的字符串</td>
</tr>
<tr>
<td>REVERSE(s)</td>
<td>返回s反转后的字符串</td>
</tr>
<tr>
<td>NULLIF(value1,value2)</td>
<td>比较两个字符串,如果value1和value2相等,则返回NULL,否则返回value1</td>
</tr>
</tbody></table>
<h3 id="日期和时间函数"><a href="#日期和时间函数" class="headerlink" title="日期和时间函数"></a>日期和时间函数</h3><h4 id="获取日期、时间"><a href="#获取日期、时间" class="headerlink" title="获取日期、时间"></a>获取日期、时间</h4><table>
<thead>
<tr>
<th>函数</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>CURDATE(), CURRENT_DATE()</td>
<td>返回当前日期,只包含年,月,日</td>
</tr>
<tr>
<td>CURTIME(), CURRENT_TIME()</td>
<td>返回当前时间,只包含时,分,秒</td>
</tr>
<tr>
<td>NOW(), SYSDATE(), CURRENT_TIMESTAMP(), LOCALTIME(), LOCALTIMESTAMP()</td>
<td>返回当前系统时间和日期</td>
</tr>
<tr>
<td>UTC_DATE()</td>
<td>返回UTC日期</td>
</tr>
<tr>
<td>UTC_TIME()</td>
<td>返回UTC时间</td>
</tr>
</tbody></table>
<h4 id="日期与时间戳的转换"><a href="#日期与时间戳的转换" class="headerlink" title="日期与时间戳的转换"></a>日期与时间戳的转换</h4><table>
<thead>
<tr>
<th>函数</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>UNIX_TIMESTAMP()</td>
<td>以UNIX时间戳的形式返回当前时间.</td>
</tr>
<tr>
<td>UNIX_TIMESTAMP(date)</td>
<td>将时间date以UNIX时间戳的形式返回</td>
</tr>
<tr>
<td>FROM_UNIXTIME(timestamp)</td>
<td>将UNIX时间戳的时间转为普通格式的时间</td>
</tr>
</tbody></table>
<h4 id="获取月份-星期-星期数-天数等函数"><a href="#获取月份-星期-星期数-天数等函数" class="headerlink" title="获取月份,星期,星期数,天数等函数"></a>获取月份,星期,星期数,天数等函数</h4><table>
<thead>
<tr>
<th>函数</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>YEAR(date)&#x2F;MONTH(date)&#x2F;DAY(date)</td>
<td>返回具体的日期值</td>
</tr>
<tr>
<td>HOUR(time)&#x2F;MINUTE(time)&#x2F;SECOND(time)</td>
<td>返回具体的时间值</td>
</tr>
<tr>
<td>MONTHNAME(date)</td>
<td>返回月份,January….</td>
</tr>
<tr>
<td>DAYNAME(date)</td>
<td>返回星期几,MONDAY,TUESDAY…</td>
</tr>
<tr>
<td>WEEKDAY(date)</td>
<td>返回周几,注意,周一是0,周二是1…周日是6</td>
</tr>
<tr>
<td>QUARTER(date)</td>
<td>返回日期对应的季度,范围是1-4</td>
</tr>
<tr>
<td>WEEK(date), WEEKOFYEAR(date)</td>
<td>返回一年中的第几周</td>
</tr>
<tr>
<td>DAYOFYEAR(date)</td>
<td>返回日期是一年中的第几天</td>
</tr>
<tr>
<td>DAYOFMONTH(date)</td>
<td>返回日期位于所在月份的第几天</td>
</tr>
<tr>
<td>DAYOFWEEK(date)</td>
<td>返回周几,注意,周日是1,周一是2…周六是7</td>
</tr>
</tbody></table>
<h4 id="日期的操作函数"><a href="#日期的操作函数" class="headerlink" title="日期的操作函数"></a>日期的操作函数</h4><table>
<thead>
<tr>
<th>函数</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>EXTRACT(type FROM date)</td>
<td>返回指定日期中特定的部分,type指定返回的值</td>
</tr>
</tbody></table>
<blockquote>
<p>type参数的取值和含义</p>
</blockquote>
<table>
<thead>
<tr>
<th>type取值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>MICROSECOND</td>
<td>返回毫秒值</td>
</tr>
<tr>
<td>SECOND</td>
<td>返回秒数</td>
</tr>
<tr>
<td>MINUTE</td>
<td>返回分钟数</td>
</tr>
<tr>
<td>HOUR</td>
<td>返回小时数</td>
</tr>
<tr>
<td>DAY</td>
<td>返回天数</td>
</tr>
<tr>
<td>WEEK</td>
<td>返回日期在一年中的第几个星期</td>
</tr>
<tr>
<td>MONTH</td>
<td>返回日期在一年中的第几个月</td>
</tr>
<tr>
<td>QUARTER</td>
<td>返回日期在一年中的第几个季度</td>
</tr>
<tr>
<td>YEAR</td>
<td>返回日期的年份</td>
</tr>
<tr>
<td>SECOND_MICROSECOND</td>
<td>返回秒和毫秒值</td>
</tr>
<tr>
<td>MINUTE_MICROSECOND</td>
<td>返回分钟和毫秒值</td>
</tr>
<tr>
<td>MINUTE_SECOND</td>
<td>返回分钟和秒值</td>
</tr>
<tr>
<td>HOUR_MICROSECOND</td>
<td>返回小时和毫秒值</td>
</tr>
<tr>
<td>HOUR_SECOND</td>
<td>返回小时和秒值</td>
</tr>
<tr>
<td>HOUR_MINUTE</td>
<td>返回小时和分钟值</td>
</tr>
<tr>
<td>DAY_MICROSECOND</td>
<td>返回天和毫秒值</td>
</tr>
<tr>
<td>DAY_SECOND</td>
<td>返回天和秒值</td>
</tr>
<tr>
<td>DAY_MINUTE</td>
<td>返回天和分钟值</td>
</tr>
<tr>
<td>DAY_HOUR</td>
<td>返回天和小时</td>
</tr>
<tr>
<td>YEAR_MONTH</td>
<td>返回年和月</td>
</tr>
</tbody></table>
<h4 id="时间和秒钟转换的函数"><a href="#时间和秒钟转换的函数" class="headerlink" title="时间和秒钟转换的函数"></a>时间和秒钟转换的函数</h4><table>
<thead>
<tr>
<th>函数</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>TIME_TO_SEC(time)</td>
<td>将time转化为秒并返回结果值.转化的公式为<code>小时*3600+分钟*60+秒</code></td>
</tr>
<tr>
<td>SEC_TO_TIME(seconds)</td>
<td>将seconds描述转化为包括小时,分钟和秒的时间</td>
</tr>
</tbody></table>
<h4 id="计算日期和时间的函数"><a href="#计算日期和时间的函数" class="headerlink" title="计算日期和时间的函数"></a>计算日期和时间的函数</h4><ul>
<li>第一组<ul>
<li>计算date与日期的时间相差值</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>函数</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>DATE_ADD(datetime, INTERVAL expr type),ADDDATE(date, INTERVAL expr type)</td>
<td>返回与给定日期时间相差INTERVAL时间段的日期时间</td>
</tr>
<tr>
<td>DATE_SUB(date, INTERVAL expr type),SUBDATE(date, INTERVAL expr type)</td>
<td>返回与date相差INTERVAL时间间隔的日期</td>
</tr>
</tbody></table>
<blockquote>
<p>上述函数中type的取值</p>
</blockquote>
<table>
<thead>
<tr>
<th>type取值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>HOUR</td>
<td>小时</td>
</tr>
<tr>
<td>MINUTE</td>
<td>分钟</td>
</tr>
<tr>
<td>SECOND</td>
<td>秒</td>
</tr>
<tr>
<td>YEAR</td>
<td>年</td>
</tr>
<tr>
<td>MONTH</td>
<td>月</td>
</tr>
<tr>
<td>DAY</td>
<td>日</td>
</tr>
<tr>
<td>YEAR_MONTH</td>
<td>年和月</td>
</tr>
<tr>
<td>DAY_HOUR</td>
<td>日和小时</td>
</tr>
<tr>
<td>DAY_MINUTE</td>
<td>日和分钟</td>
</tr>
<tr>
<td>DAY_SECOND</td>
<td>日和秒</td>
</tr>
<tr>
<td>HOUR_MINUTE</td>
<td>小时和分钟</td>
</tr>
<tr>
<td>HOUR_SECOND</td>
<td>小时和秒</td>
</tr>
<tr>
<td>MINUTE_SECOND</td>
<td>分钟和秒</td>
</tr>
</tbody></table>
<ul>
<li>第二组</li>
</ul>
<table>
<thead>
<tr>
<th>函数</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>ADDTIME(time1,time2)</td>
<td>返回time1加上time2的时间,当time2为一个数字时,代表的是<code>秒</code>,可以为负数</td>
</tr>
<tr>
<td>SUBTIME(time1,time2)</td>
<td>返回time1减去time2后的时间,当time2为一个数字时,代表的是<code>秒</code>,可以为负数</td>
</tr>
<tr>
<td>DATEDIFF(date1,date2)</td>
<td>返回date1-date2的日期间隔天数</td>
</tr>
<tr>
<td>TIMEDIFF(time1,time2)</td>
<td>返回time1-time2的时间间隔</td>
</tr>
<tr>
<td>FROM_DAYS(N)</td>
<td>返回从0000年1月1日起,N天以后的日期</td>
</tr>
<tr>
<td>TO_DAYS(date)</td>
<td>返回日期date距离0000年1月1日的天数</td>
</tr>
<tr>
<td>LAST_DAY(date)</td>
<td>返回date所在月份的最后一天的日期</td>
</tr>
<tr>
<td>MAKEDATE(year,n)</td>
<td>针对给定年份与所在年份中的天数返回的一个日期</td>
</tr>
<tr>
<td>MAKETIME(hour,minute,second)</td>
<td>将给定的小时,分钟和秒组合成时间并返回</td>
</tr>
<tr>
<td>PERIOD_ADD(time,n)</td>
<td>返回time加上n后的时间</td>
</tr>
</tbody></table>
<h4 id="日期的格式化与解析"><a href="#日期的格式化与解析" class="headerlink" title="日期的格式化与解析"></a>日期的格式化与解析</h4><table>
<thead>
<tr>
<th>函数</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>DATE_FORMAT(date,fmt)</td>
<td>按照字符串fmt格式化日期date值</td>
</tr>
<tr>
<td>TIME_FORMAT(time,fmt)</td>
<td>按照字符串fmt格式化时间time值</td>
</tr>
<tr>
<td>GET_FORMAT(date_type,format_type)</td>
<td>返回日期字符串的显示格式</td>
</tr>
<tr>
<td>STR_TO_DATE(str,fmt)</td>
<td>按照字符串fmt对str进行解析,解析为一个日期</td>
</tr>
</tbody></table>
<blockquote>
<p>上述函数中fmt参数格式和说明</p>
</blockquote>
<table>
<thead>
<tr>
<th>fmt格式符</th>
<th>说明</th>
<th>fmt格式符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>%Y</td>
<td>4位数字表示年份</td>
<td>%y</td>
<td>2位数字表示年份</td>
</tr>
<tr>
<td>%M</td>
<td>月名表示月份(January,…)</td>
<td>%m</td>
<td>2位数字表示月份(01,02…,12)</td>
</tr>
<tr>
<td>%b</td>
<td>缩写的月名(Jan,Feb…)</td>
<td>%c</td>
<td>数字表示月份(1,2,3….)</td>
</tr>
<tr>
<td>%D</td>
<td>英文后缀表示月中的天数(1st,2nd,3rd…)</td>
<td>%d</td>
<td>2位数字表示月中的天数(01,02…)</td>
</tr>
<tr>
<td>%e</td>
<td>数字形式表示月中的天数(1,2,3,4,5…)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>%H</td>
<td>2位数字表示小数,24小时制(01,02…)</td>
<td>%h和%I</td>
<td>2位数字表示小时,12小时制(01,02…)</td>
</tr>
<tr>
<td>%k</td>
<td>数字形式的小时,24小时制(1,2,3…)</td>
<td>%l</td>
<td>数字形式表示小时,12小时制(1,2,3…)</td>
</tr>
<tr>
<td>%i</td>
<td>2位数字表示分钟(00,01,02…)</td>
<td>%S和%s</td>
<td>2位数字表示秒(00,01,02…)</td>
</tr>
<tr>
<td>%W</td>
<td>一周中的星期名称(Sunday,…)</td>
<td>%a</td>
<td>一周中的星期缩写(Sun,Mon,Tues…)</td>
</tr>
<tr>
<td>%w</td>
<td>以数字表示周中的天数(0&#x3D;Sunday,1&#x3D;Monday…)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>%j</td>
<td>以3位数字表示年中的天数(001,002…)</td>
<td>%U</td>
<td>以数字表示年中的第几周,(1,2,3…)其中Sunday为周中第一天</td>
</tr>
<tr>
<td>%u</td>
<td>以数字表示年中的第几周(1,2,3…)其中Monday为周中第一天</td>
<td></td>
<td></td>
</tr>
<tr>
<td>%T</td>
<td>24小时制</td>
<td>%r</td>
<td>12小时制</td>
</tr>
<tr>
<td>%p</td>
<td>AM或PM</td>
<td>%%</td>
<td>表示%</td>
</tr>
</tbody></table>
<blockquote>
<p>GET_FORMAT函数中date_type和format_type参数取值如下</p>
</blockquote>
<table>
<thead>
<tr>
<th>日期类型</th>
<th>格式化类型</th>
<th>返回的格式化字符串</th>
</tr>
</thead>
<tbody><tr>
<td>DATE</td>
<td>USA</td>
<td>%m.%d.%Y</td>
</tr>
<tr>
<td>DATE</td>
<td>JIS</td>
<td>%Y-%m-%d</td>
</tr>
<tr>
<td>DATE</td>
<td>ISO</td>
<td>%Y-%m-%d</td>
</tr>
<tr>
<td>DATE</td>
<td>EUR</td>
<td>%d.%m.%Y</td>
</tr>
<tr>
<td>DATE</td>
<td>INTERVAL</td>
<td>%Y%m%d</td>
</tr>
<tr>
<td>TIME</td>
<td>USA</td>
<td>%h:%i:%s %P</td>
</tr>
<tr>
<td>TIME</td>
<td>JIS</td>
<td>%H:%i:%s</td>
</tr>
<tr>
<td>TIME</td>
<td>ISO</td>
<td>%H:%i:%s</td>
</tr>
<tr>
<td>TIME</td>
<td>EUR</td>
<td>%H:%i:%s</td>
</tr>
<tr>
<td>TIME</td>
<td>INTERVAL</td>
<td>%H%i%s</td>
</tr>
<tr>
<td>DATETIME</td>
<td>USA</td>
<td>%Y-%m-%d %H.%i.%s</td>
</tr>
<tr>
<td>DATETIME</td>
<td>JIS</td>
<td>%Y-%m-%d %H.%i.%s</td>
</tr>
<tr>
<td>DATETIME</td>
<td>ISO</td>
<td>%Y-%m-%d %H.%i.%s</td>
</tr>
<tr>
<td>DATETIME</td>
<td>EUR</td>
<td>%Y-%m-%d %H.%i.%s</td>
</tr>
<tr>
<td>DATETIME</td>
<td>INTERVAL</td>
<td>%Y%m%d %H%i%s</td>
</tr>
</tbody></table>
<h3 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h3><blockquote>
<p>流程处理函数可以根据不同的条件,执行不同的处理流程,可以实现不同的条件选择</p>
</blockquote>
<table>
<thead>
<tr>
<th>函数</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>IF(value,value1,value2)</td>
<td>如果value的值为TRUE,返回value1,否则返回value2</td>
</tr>
<tr>
<td>IFNULL(value1,value2)</td>
<td>如果value1不为NULL,返回value1,否则返回value2</td>
</tr>
<tr>
<td>CASE WHEN 条件1 THEN 结果1 WHEN 条件2 THEN 结果2 … [ELSE resultn] END</td>
<td>相当于Java中的 if..else if … else…</td>
</tr>
<tr>
<td>CASE expr WHEN 常量值1 THEN 值1 WHEN 常量值1 THEN 值1 … [ELSE 值n] END</td>
<td>相当于Java的switch…case…</td>
</tr>
</tbody></table>
<h3 id="MYSQL信息函数"><a href="#MYSQL信息函数" class="headerlink" title="MYSQL信息函数"></a>MYSQL信息函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>VERSION()</td>
<td>返回当前mysql数据库版本</td>
</tr>
<tr>
<td>CONNECTION_ID()</td>
<td>返回当前mysql服务器连接数</td>
</tr>
<tr>
<td>DATABASE(),SCHEMA()</td>
<td>返回mysql命令行当前所在数据库</td>
</tr>
<tr>
<td>USER(),CURRENT_USER(),SYSTEM_USER(),SESSION_USER()</td>
<td>返回当前mysql连接用户名,格式为”主机名@用户名”</td>
</tr>
<tr>
<td>CHARSET(value)</td>
<td>返回字符串value的字符集</td>
</tr>
<tr>
<td>COLLATION(value)</td>
<td>返回字符串value的比较规则</td>
</tr>
</tbody></table>
<h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>FORMAT(value,n)</td>
<td>返回对数字value进行格式化后的结果数据,n表示<code>四舍五入</code>后保留小数点后n位</td>
</tr>
<tr>
<td>CONV(value,from,to)</td>
<td>将value值进行不同进制转换</td>
</tr>
<tr>
<td>INET_ATON(ipvalue)</td>
<td>将以点分隔的ip地址转化为一个数字</td>
</tr>
<tr>
<td>INET_NTOA(value)</td>
<td>将数字形式的ip转化为以点分隔的地址</td>
</tr>
<tr>
<td>BENCHMARK(n,expr)</td>
<td>将表达式expr重复n边.用于测试mysql处理expr表达式所消耗的时间</td>
</tr>
<tr>
<td>CONVERT(value USING char_code)</td>
<td>将value的字符编码修改为char_code</td>
</tr>
</tbody></table>
<h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><ul>
<li>什么是聚合函数<ul>
<li>聚合函数作用于一组数据,并对一组数据返回一个值</li>
</ul>
</li>
</ul>
<h3 id="聚合函数类型"><a href="#聚合函数类型" class="headerlink" title="聚合函数类型"></a>聚合函数类型</h3><ul>
<li><p>AVG()</p>
</li>
<li><p>SUM()</p>
</li>
<li><p>MAX()</p>
</li>
<li><p>MIN()</p>
</li>
<li><p>COUNT()</p>
</li>
<li><p>聚合函数不能嵌套调用</p>
</li>
</ul>
<blockquote>
<p>比如<code>AVG(SUM())</code>这样调用</p>
</blockquote>
<ul>
<li>问题：用count(*)，count(1)，count(列名)谁好呢?</li>
</ul>
<blockquote>
<p>其实,对于<code>MyISAM</code>引擎的表是没有区别的.这种引擎内部有一个计数器在维护着行数</p>
<p><code>Innodb</code>引擎的表用<code>COUNT(*),COUNT(1)</code>直接读行数,复杂度是<code>O(n)</code>,因为<code>Innodb</code>真的要去读一遍,但好于具体的<code>COUNT(列名)</code></p>
</blockquote>
<ul>
<li>问题：能不能使用count(列名)替换count(*)?</li>
</ul>
<blockquote>
<p>不能使用<code>COUNT(列名)</code>来代替<code>COUNT(*)</code>,<code>COUNT(*)</code>是SQL92定义的标准统计行数的语法,跟数据库无关,跟NULL和非NULL无关</p>
<p>说明: <code>COUNT(*)</code>会统计值为NULL的行,而<code>COUNT(列名)</code>不会统计此列为NULL值的行</p>
</blockquote>
<h3 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h3><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><blockquote>
<p>可以使用<code>group by</code>将结果分为若干组</p>
</blockquote>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>, group_function(<span class="keyword">column</span>)</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">table</span></span><br><span class="line">[<span class="keyword">WHERE</span> <span class="keyword">condition</span>]</span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> group_by_expression]</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">column</span>];</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>注意: <code>WHERE</code>一定要放在<code>FROM</code>后面</p>
</blockquote>
<ul>
<li><p>在SELECT列表中所有未包含在组函数中的列都应该包含在 GROUP BY子句中</p>
</li>
<li><p>包含在 GROUP BY 子句中的列不必包含在SELECT 列表中</p>
</li>
</ul>
<h4 id="使用多个列分组"><a href="#使用多个列分组" class="headerlink" title="使用多个列分组"></a>使用多个列分组</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id dept_id, job_id, <span class="built_in">SUM</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id, job_id ;</span><br></pre></td></tr></table></figure></div>

<h4 id="GROUP-BY中使用WITH-ROLLUP"><a href="#GROUP-BY中使用WITH-ROLLUP" class="headerlink" title="GROUP BY中使用WITH ROLLUP"></a>GROUP BY中使用WITH ROLLUP</h4><blockquote>
<p> 使用 <code>WITH ROLLUP</code> 关键字之后，在所有查询出的分组记录之后增加一条记录，该记录计算查询出的所有记录的总和，即统计记录数量。</p>
</blockquote>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id,<span class="built_in">AVG</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">&gt;</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id <span class="keyword">WITH</span> <span class="keyword">ROLLUP</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询结果</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> department_id <span class="operator">|</span> <span class="built_in">AVG</span>(salary)  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+--------------+</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">90</span> <span class="operator">|</span> <span class="number">19333.333333</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">100</span> <span class="operator">|</span>  <span class="number">8600.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">110</span> <span class="operator">|</span> <span class="number">10150.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">11809.090909</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+--------------+</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>注意: 当使用<code>ROLLUP</code>时,不能同时使用<code>ORDER BY</code>子句进行结果排序,即<code>ROLLUP</code>和<code>ORDER BY</code>是互相排斥的</p>
</blockquote>
<h3 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h3><h4 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h4><p>过滤分组: HAVING子句</p>
<ul>
<li>行已经被分组</li>
<li>使用了聚合函数</li>
<li>满足HAVING子句中条件的分组将被显示</li>
<li>HAVING不能单独使用,必须跟GROUP BY一起使用</li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id, <span class="built_in">MAX</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MAX</span>(salary)<span class="operator">&gt;</span><span class="number">10000</span> ;</span><br></pre></td></tr></table></figure></div>

<h3 id="WHERE和HAVING的对比"><a href="#WHERE和HAVING的对比" class="headerlink" title="WHERE和HAVING的对比"></a>WHERE和HAVING的对比</h3><ul>
<li>WHERE 可以直接使用表中的字段作为筛选条件,但不能使用分组中的计算函数作为筛选条件;HAVING必须要与GROUP BY 配合使用,可以把分组计算的函数和分组字段作为筛选条件</li>
</ul>
<p>这就决定了,在需要对数据进行分组统计的时候,HAVING可以完成WHERE不能完成的任务.这是因为,在查询语法结构中,WHERE 在 GROUP BY 之前,所以无法对分组结果进行筛选,HAVING 在GROUP BY之后,可以使用分组字段和分组中的计算函数,对分组的结果集进行筛选,这个功能是WHERE无法完成的.另外,WHERE排除的记录不再包括在分组中.</p>
<ul>
<li>如果需要通过连接从关联表中获取需要的数据,WHERE是先筛选后连接,而HAVING是先连接后筛选</li>
</ul>
<p>这一点,就决定了在关联查询中,WHERE 比HAVING更高效.因为WHERE可以先筛选,用一个筛选后的较小数据集和关联表进行连接,这样占用的资源比较少,执行效率也比较高.HAVING则需要先把结果集准备好,也就是用未被筛选的数据集进行关联,然后对这个大的数据集进行筛选,这样占用的资源就比较多,执行效率也比较低.</p>
<p>总结</p>
<table>
<thead>
<tr>
<th></th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td>WHERE</td>
<td>先筛选数据再关联,执行效率高</td>
<td>不能使用分组中的计算函数进行筛选</td>
</tr>
<tr>
<td>HAVING</td>
<td>可以使用分组中的计算函数</td>
<td>在最后的结果集中进行筛选,执行效率低</td>
</tr>
</tbody></table>
<h3 id="SELECT的执行过程"><a href="#SELECT的执行过程" class="headerlink" title="SELECT的执行过程"></a>SELECT的执行过程</h3><h4 id="查询结构"><a href="#查询结构" class="headerlink" title="查询结构"></a>查询结构</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 方式1：</span></span><br><span class="line"><span class="keyword">SELECT</span> ...,....,...</span><br><span class="line"><span class="keyword">FROM</span> ...,...,....</span><br><span class="line"><span class="keyword">WHERE</span> 多表的连接条件</span><br><span class="line"><span class="keyword">AND</span> 不包含组函数的过滤条件</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> ...,...</span><br><span class="line"><span class="keyword">HAVING</span> 包含组函数的过滤条件</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ... <span class="keyword">ASC</span><span class="operator">/</span><span class="keyword">DESC</span></span><br><span class="line">LIMIT ...,...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式2：</span></span><br><span class="line"><span class="keyword">SELECT</span> ...,....,...</span><br><span class="line"><span class="keyword">FROM</span> ... <span class="keyword">JOIN</span> ...</span><br><span class="line"><span class="keyword">ON</span> 多表的连接条件</span><br><span class="line"><span class="keyword">JOIN</span> ...</span><br><span class="line"><span class="keyword">ON</span> ...</span><br><span class="line"><span class="keyword">WHERE</span> 不包含组函数的过滤条件</span><br><span class="line"><span class="keyword">AND</span><span class="operator">/</span><span class="keyword">OR</span> 不包含组函数的过滤条件</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> ...,...</span><br><span class="line"><span class="keyword">HAVING</span> 包含组函数的过滤条件</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ... <span class="keyword">ASC</span><span class="operator">/</span><span class="keyword">DESC</span></span><br><span class="line">LIMIT ...,...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 其中：</span></span><br><span class="line">#（<span class="number">1</span>）<span class="keyword">from</span>：从哪些表中筛选</span><br><span class="line">#（<span class="number">2</span>）<span class="keyword">on</span>：关联多表查询时，去除笛卡尔积</span><br><span class="line">#（<span class="number">3</span>）<span class="keyword">where</span>：从表中筛选的条件</span><br><span class="line">#（<span class="number">4</span>）<span class="keyword">group</span> <span class="keyword">by</span>：分组依据</span><br><span class="line">#（<span class="number">5</span>）<span class="keyword">having</span>：在统计结果中再次筛选</span><br><span class="line">#（<span class="number">6</span>）<span class="keyword">order</span> <span class="keyword">by</span>：排序</span><br><span class="line">#（<span class="number">7</span>）limit：分页</span><br></pre></td></tr></table></figure></div>

<h4 id="SELECT执行顺序"><a href="#SELECT执行顺序" class="headerlink" title="SELECT执行顺序"></a>SELECT执行顺序</h4><ul>
<li><p>关键字的顺序不能颠倒</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">FROM</span> ... <span class="keyword">WHERE</span> ... <span class="keyword">GROUP</span> <span class="keyword">BY</span> ... <span class="keyword">HAVING</span> ... <span class="keyword">ORDER</span> <span class="keyword">BY</span> ... LIMIT ...</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>SELECT 语句的执行顺序（在 MySQL 和 Oracle 中，SELECT 执行顺序基本相同）</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ... <span class="keyword">WHERE</span> ... <span class="keyword">GROUP</span> <span class="keyword">BY</span> ... <span class="keyword">HAVING</span> ... <span class="keyword">SELECT</span> 的字段 ... <span class="keyword">DISTINCT</span> ... <span class="keyword">ORDER</span> <span class="keyword">BY</span> ... LIMIT ...</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">FROM</span> <span class="operator">&lt;</span>left_table<span class="operator">&gt;</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">ON</span> <span class="operator">&lt;</span>join_condition<span class="operator">&gt;</span></span><br><span class="line"><span class="number">3</span> <span class="operator">&lt;</span>join_type<span class="operator">&gt;</span> <span class="keyword">JOIN</span> <span class="operator">&lt;</span>right_table<span class="operator">&gt;</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">WHERE</span> <span class="operator">&lt;</span>where_condition<span class="operator">&gt;</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>group_by_list<span class="operator">&gt;</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">HAVING</span> <span class="operator">&lt;</span>having_condition<span class="operator">&gt;</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">SELECT</span></span><br><span class="line"><span class="number">8</span> <span class="keyword">DISTINCT</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>order_by_condition<span class="operator">&gt;</span></span><br><span class="line"><span class="number">10</span> LIMIT <span class="operator">&lt;</span>limit_number<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>比如,这个sql执行的顺序</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> player_id, player_name, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> num <span class="comment">-- 顺序 5</span></span><br><span class="line"><span class="keyword">FROM</span> player <span class="keyword">JOIN</span> team <span class="keyword">ON</span> player.team_id <span class="operator">=</span> team.team_id <span class="comment">-- 顺序 1</span></span><br><span class="line"><span class="keyword">WHERE</span> height <span class="operator">&gt;</span> <span class="number">1.80</span> <span class="comment">-- 顺序 2</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> player.team_id <span class="comment">-- 顺序 3</span></span><br><span class="line"><span class="keyword">HAVING</span> num <span class="operator">&gt;</span> <span class="number">2</span> <span class="comment">-- 顺序 4</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> num <span class="keyword">DESC</span> <span class="comment">-- 顺序 6</span></span><br><span class="line">LIMIT <span class="number">2</span> <span class="comment">-- 顺序 7</span></span><br></pre></td></tr></table></figure></div>

<p>在 SELECT 语句执行这些步骤的时候，每个步骤都会产生一个 虚拟表 ，然后将这个虚拟表传入下一个步 </p>
<p>骤中作为输入。需要注意的是，这些步骤隐含在 SQL 的执行过程中，对于我们来说是不可见的。</p>
</li>
</ul>
<h4 id="SQL-的执行原理"><a href="#SQL-的执行原理" class="headerlink" title="SQL 的执行原理"></a>SQL 的执行原理</h4><p><code>SELECT</code> 是先执行 <code>FROM</code> 这一步的。在这个阶段，如果是多张表联查，还会经历下面的几个步骤： </p>
<ol>
<li><p>首先先通过 <code>CROSS JOIN</code> 求笛卡尔积，相当于得到虚拟表 <code>vt（virtual table）1-1</code>； </p>
</li>
<li><p>通过 <code>ON</code> 进行筛选，在虚拟表 <code>vt1-1</code> 的基础上进行筛选，得到虚拟表 <code>vt1-2</code>； </p>
</li>
<li><p>添加外部行。如果我们使用的是左连接、右链接或者全连接，就会涉及到外部行，也就是在虚拟表 <code>vt1-2</code> 的基础上增加外部行，得到虚拟表 <code>vt1-3</code>。</p>
</li>
</ol>
<p>当然如果我们操作的是两张以上的表，还会重复上面的步骤，直到所有表都被处理完为止。这个过程得到是我们的原始数据。 </p>
<p>当我们拿到了查询数据表的原始数据，也就是最终的虚拟表 <code>vt1</code> ，就可以在此基础上再进行 <code>WHERE </code>阶 段 。在这个阶段中，会根据<code> vt1</code> 表的结果进行筛选过滤，得到虚拟表 <code>vt2</code> 。 </p>
<p>然后进入第三步和第四步，也就是 <code>GROUP BY</code> 和 <code>HAVING</code> 阶段 。在这个阶段中，实际上是在虚拟表 <code>vt2 </code>的 基础上进行分组和分组过滤，得到中间的虚拟表 <code>vt3 </code>和<code>vt4</code>。 </p>
<p>当我们完成了条件筛选部分之后，就可以筛选表中提取的字段，也就是进入到 <code>SELECT </code>和 <code>DISTINCT</code> 阶段 。 </p>
<p>首先在 <code>SELECT</code> 阶段会提取想要的字段，然后在 <code>DISTINCT </code>阶段过滤掉重复的行，分别得到中间的虚拟表 <code>vt5-1 </code>和<code> vt5-2</code> 。 </p>
<p>当我们提取了想要的字段数据之后，就可以按照指定的字段进行排序,也就是<code>ORDER BY </code>阶段 ,得到虚拟表 <code>vt6</code> 。 </p>
<p>最后在<code>vt6</code>的基础上，取出指定行的记录，也就是 <code>LIMIT</code> 阶段 ，得到最终的结果，对应的是虚拟表 <code>vt7</code> 。 </p>
<p>当然我们在写 <code>SELECT</code> 语句的时候，不一定存在所有的关键字，<code>相应的阶段就会省略</code>。 </p>
<p>同时因为 SQL 是一门类似英语的结构化查询语言，所以我们在写 SELECT 语句的时候，还要注意相应的 关键字顺序，所谓<code>底层运行的原理</code>，就是我们刚才讲到的<code>执行顺序</code>。</p>
]]></content>
      <categories>
        <category>MySQL</category>
        <category>Basic</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL创建和管理数据库</title>
    <url>/GSSBlog/2023/10/30/4.%E5%88%9B%E5%BB%BA%E5%92%8C%E7%AE%A1%E7%90%86%E8%A1%A8/</url>
    <content><![CDATA[<h2 id="创建和管理数据库"><a href="#创建和管理数据库" class="headerlink" title="创建和管理数据库"></a>创建和管理数据库</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 方式一</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABSE	数据库名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式二</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE 数据库名 <span class="type">CHARACTER</span> UTF<span class="number">-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式三</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> 数据库名; (推荐使用方式) </span><br></pre></td></tr></table></figure></div>

<h3 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h3><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看当前所有数据库</span></span><br><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看当前正在使用的数据库</span></span><br><span class="line"><span class="keyword">select</span> database();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看指定数据库下的所有数据表</span></span><br><span class="line"><span class="keyword">show</span> tables <span class="keyword">from</span> 数据库名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看数据库的创建信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">create</span> database 数据库名;</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">create</span> database 数据库名\G;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用\切换数据库</span></span><br><span class="line">use 数据库名;</span><br></pre></td></tr></table></figure></div>

<h3 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h3><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 更改数据库字符集</span></span><br><span class="line"><span class="keyword">alter</span> database 数据库名 <span class="type">character</span> <span class="keyword">set</span> 字符集; # 比如: GBK,UTF<span class="number">-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除数据库</span></span><br><span class="line"><span class="comment">-- 方式一</span></span><br><span class="line"><span class="keyword">drop</span> database 数据库名;</span><br><span class="line"><span class="comment">-- 方式二</span></span><br><span class="line"><span class="keyword">drop</span> database if <span class="keyword">exists</span> 数据库名;(推荐使用)</span><br></pre></td></tr></table></figure></div>

<h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> [if <span class="keyword">not</span> <span class="keyword">exists</span>] 表名 (</span><br><span class="line">	字段<span class="number">1</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">    ...</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 加上了 [if not exists] 关键字,则表示: 如果当前数据库中不存在要 创建的数据表,则创建数据表;如果当前数据库中已经存在要创建的数据表,则忽略建表语句,不再创建数据表.</span></span><br></pre></td></tr></table></figure></div>

<h3 id="查看数据表结构"><a href="#查看数据表结构" class="headerlink" title="查看数据表结构"></a>查看数据表结构</h3><blockquote>
<p>MySQL支持使用<code>DESCRIBE</code>和<code>DESC</code>语句查看数据表结构,也支持<code>SHOW CREATE TABLE 数据表</code>语句查看数据表结构</p>
</blockquote>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名;</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名\G;</span><br></pre></td></tr></table></figure></div>

<h3 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h3><blockquote>
<p>修改表是指修改数据库中已经存在的数据表的结构</p>
</blockquote>
<ul>
<li>使用<code>ALTER TABLE</code>语句可以实现<ul>
<li>向已有的表中添加列</li>
<li>修改现有表中的列</li>
<li>删除现有表中的列</li>
<li>重命名现有表中的列</li>
</ul>
</li>
</ul>
<h4 id="追加一个列"><a href="#追加一个列" class="headerlink" title="追加一个列"></a>追加一个列</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> [<span class="keyword">COLUMN</span>] 字段名 字段类型 [<span class="keyword">FIRST</span><span class="operator">|</span>AFTER 字段名]</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 举例</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> my_table1 <span class="keyword">add</span> last_name <span class="type">varchar</span>(<span class="number">255</span>);</span><br></pre></td></tr></table></figure></div>

<h4 id="修改一个列"><a href="#修改一个列" class="headerlink" title="修改一个列"></a>修改一个列</h4><ul>
<li>可以修改列的数据类型,长度,默认值和位置</li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIYF [<span class="keyword">COLUMN</span>] 字段名<span class="number">1</span> 字段类型 [<span class="keyword">DEFAULT</span> 默认值] [<span class="keyword">FIRST</span><span class="operator">|</span>AFTER 字段名];</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 举例</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> my_table1 modify last_name <span class="type">varchar</span>(<span class="number">50</span>);</span><br></pre></td></tr></table></figure></div>

<h4 id="重命名一个列"><a href="#重命名一个列" class="headerlink" title="重命名一个列"></a>重命名一个列</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 CHANGE [<span class="keyword">COLUMN</span>] 列名 新列名 新数据类型;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 举例</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> my_table1 change last_name l_name <span class="type">varchar</span>(<span class="number">50</span>);</span><br></pre></td></tr></table></figure></div>

<h4 id="删除一个列"><a href="#删除一个列" class="headerlink" title="删除一个列"></a>删除一个列</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> [<span class="keyword">COLUMN</span>] 字段名</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 举例</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> my_table1 <span class="keyword">drop</span> l_name;</span><br></pre></td></tr></table></figure></div>

<h3 id="重命名表"><a href="#重命名表" class="headerlink" title="重命名表"></a>重命名表</h3><ul>
<li>方式一: 使用 rename</li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">RENAME <span class="keyword">TABLE</span> 旧表名 <span class="keyword">TO</span> 新表名;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>方式二</li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 旧表名 RENAME [<span class="keyword">TO</span>] 新表名;</span><br></pre></td></tr></table></figure></div>

<h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><ul>
<li>在MySQL中,当一张数据表<code>没有与其他任何数据表形成关联关系</code>时,可以将当前数据表直接删除</li>
<li>数据和结构都被删除</li>
<li>所有正在运行的相关事务被提交</li>
<li>所有相关索引被删除</li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [IF <span class="keyword">EXISTS</span>] 数据表<span class="number">1</span> [, 数据表<span class="number">2</span>, ...数据表n]</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>if exists 的含义: 如果当前数据库中存在相应的数据表,则删除数据表;如果当前数据库中不存在相应的数据表,则忽略删除语句,不在执行删除数据表的操作</p>
</blockquote>
<blockquote>
<p>DROP TABLE 语句不能回滚</p>
</blockquote>
<h3 id="清空表"><a href="#清空表" class="headerlink" title="清空表"></a>清空表</h3><ul>
<li>TRUNCATE TABLE 语句:<ul>
<li>删除表中所有的数据</li>
<li>释放表的存储空间</li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p><code>truncate</code> 语句不能回滚,而使用<code>delete</code>语句删除数据,<code>可以回滚</code></p>
</li>
<li><p>对比</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="literal">FALSE</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> my_table1;</span><br><span class="line"><span class="comment">-- TRUNCATE TABLE my_table1;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> my_table1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> my_table1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 验证结果: TRUNCATE 操作不能回滚</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
        <category>Basic</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据类型</title>
    <url>/GSSBlog/2023/10/30/5.MySQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><table>
<thead>
<tr>
<th>类型</th>
<th>类型举例</th>
</tr>
</thead>
<tbody><tr>
<td>整数类型</td>
<td>TINYINT、SMALLINT、MEDIUMINT、INT(INTEGER)、BIGINT</td>
</tr>
<tr>
<td>浮点类型</td>
<td>FLOAT, DOUBLE</td>
</tr>
<tr>
<td>定点数类型</td>
<td>DECIMAL</td>
</tr>
<tr>
<td>位类型</td>
<td>BIT</td>
</tr>
<tr>
<td>日期和时间类型</td>
<td>YEAR, TIME, DATE, DATATIME, TIMESTAMP</td>
</tr>
<tr>
<td>文本字符串类型</td>
<td>CHAR, VARCHAR, TINYTEXT, TEXT, MEDIUMTEXT, LONGTEXT</td>
</tr>
<tr>
<td>枚举类型</td>
<td>ENUM</td>
</tr>
<tr>
<td>集合类型</td>
<td>SET</td>
</tr>
<tr>
<td>二进制字符串类型</td>
<td>BINARY, VARBINARY, TINYBLOB, BLOB, MEDIUMBLOB, LONGBLOB</td>
</tr>
<tr>
<td>JSON类型</td>
<td>JSON对象, JSON数组</td>
</tr>
<tr>
<td>空间数据类型</td>
<td>单值类型: GEOMETRY, POINT, LINESTRING, POLYGON;集合类型: MULTIPOINT, MULTILINESPRING, MULTIPOLYGON, GEOMETRYCOLLECTION</td>
</tr>
</tbody></table>
<h3 id="常见数据类型的属性"><a href="#常见数据类型的属性" class="headerlink" title="常见数据类型的属性"></a>常见数据类型的属性</h3><table>
<thead>
<tr>
<th>MySQL关键字</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>NULL</td>
<td>数据列可包含NULL值</td>
</tr>
<tr>
<td>NOT NULL</td>
<td>数据列不允许包含NULL值</td>
</tr>
<tr>
<td>DEFAULT</td>
<td>默认值</td>
</tr>
<tr>
<td>PRIMARY KEY</td>
<td>主键</td>
</tr>
<tr>
<td>AUTO_INCREMENT</td>
<td>自动递增,适用于整数类型</td>
</tr>
<tr>
<td>UNSIGNED</td>
<td>无符号</td>
</tr>
<tr>
<td>CHARACTER SET ‘字符集’</td>
<td>指定一个字符集</td>
</tr>
</tbody></table>
<h2 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h2><h3 id="类型介绍"><a href="#类型介绍" class="headerlink" title="类型介绍"></a>类型介绍</h3><blockquote>
<p>整数类型一共有5种,包括<code>TINYINT</code>,<code>SMALLINT</code>,<code>MEDIUMINT</code>,<code>INT(INTEGER)</code>和<code>BIGINT</code></p>
</blockquote>
<table>
<thead>
<tr>
<th>整数类型</th>
<th>字节</th>
<th>有符号数取值范围</th>
<th>无符号数取值范围</th>
</tr>
</thead>
<tbody><tr>
<td>TINYINT</td>
<td>1</td>
<td>-128-127</td>
<td>0-255</td>
</tr>
<tr>
<td>SMALLINT</td>
<td>2</td>
<td>-32768-32767</td>
<td>0-65535</td>
</tr>
<tr>
<td>MEDIUMINT</td>
<td>3</td>
<td>-8388608-8388607</td>
<td>0-16777215</td>
</tr>
<tr>
<td>INT(INTEGER)</td>
<td>4</td>
<td>-2147483648-2147483647</td>
<td>0-4294967295</td>
</tr>
<tr>
<td>BIGINT</td>
<td>8</td>
<td>-9223372036854775808-9223372036854775807</td>
<td>0-18446744073709551615</td>
</tr>
</tbody></table>
<h3 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h3><blockquote>
<p>整数类型的可选属性有三个</p>
</blockquote>
<ul>
<li><h4 id="M"><a href="#M" class="headerlink" title="M"></a>M</h4><code>M</code>: 表示宽度,M的取值范围是(0-255).例如:int(5):当数据宽度小于5位的时候,在数字前面需要用字符填满宽度.该项功能需要配合<code>ZEROFILL</code>使用,表示用”0”填满宽度,否则指定显示宽度无效</li>
</ul>
<blockquote>
<p>如果设置显示宽度,那么插入的数据宽度超过显示宽度的限制,会不会截断或者插入失败?</p>
</blockquote>
<p><code>答案</code>: 不会对插入的数据有任何影响,还是按照类型的实际宽度进行保存,即<code>显示宽度与类型可以存储的值范围无关</code>.<code>从MySQL8.0.17开始,整数数据类型不推荐使用显示宽度属性</code>.</p>
<p>整数数据类型可以在定义表结构时指定所需要的的显示宽度,如果不指定,则系统会为每一种类型指定默认的宽度值.</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 举例</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_int1 ( x TINYINT, y <span class="type">SMALLINT</span>, z MEDIUMINT, m <span class="type">INT</span>, n <span class="type">BIGINT</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">DESC</span> test_int1;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> x <span class="operator">|</span> tinyint(<span class="number">4</span>) <span class="operator">|</span> YES <span class="operator">|</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> y <span class="operator">|</span> <span class="type">smallint</span>(<span class="number">6</span>) <span class="operator">|</span> YES <span class="operator">|</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> z <span class="operator">|</span> mediumint(<span class="number">9</span>) <span class="operator">|</span> YES <span class="operator">|</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> m <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>) <span class="operator">|</span> YES <span class="operator">|</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> n <span class="operator">|</span> <span class="type">bigint</span>(<span class="number">20</span>) <span class="operator">|</span> YES <span class="operator">|</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">	</span><br></pre></td></tr></table></figure></div>

<ul>
<li><h4 id="UNSIGNED"><a href="#UNSIGNED" class="headerlink" title="UNSIGNED"></a>UNSIGNED</h4></li>
</ul>
<p><code>UNSIGNED</code>: 无符号类型(非负), 所有的整数数据类型都有一个可选的属性UNSIGNED(无符号属性),无符号整数类型的最小取值为0.所以,如果需要在MySQL数据库中保存非负整数值时,可以将整数类型设置为无符号类型.</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- int类型默认显示宽度为int(11)，无符号int类型默认显示宽度为int(10)。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_int3(</span><br><span class="line">f1 <span class="type">INT</span> UNSIGNED</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DESC</span> test_int3;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> f1 <span class="operator">|</span> <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="operator">|</span> YES <span class="operator">|</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ul>
<li><h4 id="ZEROFILL"><a href="#ZEROFILL" class="headerlink" title="ZEROFILL"></a>ZEROFILL</h4></li>
</ul>
<p><code>ZEROFILL</code>: 0填充,(如果某列是zerofill,那么MySQL会自动为当前列添加UNSIGNED属性),如果指定了ZEROFILL知识表示不够M位时,用0在左边填充,如果超过M位,只要不超过数据存储范围即可.</p>
<p>原来,在int(M)中,M的值跟int(M)所占用多少存储空间并无任何关系.int(3),int(4),int(8)在磁盘上都是占用4bytes的存储空间.也就是说,<code>int(M),必须和 UNSIGNED ZEROFILL 一起使用才有意义.</code>如果整数值超过M位,就按照实际位数存储.只是无须再用字符0进行填充.</p>
<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p><code>TINYINT</code> ：一般用于枚举数据，比如系统设定取值范围很小且固定的场景。 </p>
<p><code>SMALLINT</code> ：可以用于较小范围的统计数据，比如统计工厂的固定资产库存数量等。 </p>
<p><code>MEDIUMINT</code> ：用于较大整数的计算，比如车站每日的客流量等。 </p>
<p><code>INT、INTEGER</code> ：取值范围足够大，一般情况下不用考虑超限问题，用得最多。比如商品编号。 </p>
<p><code>BIGINT</code> ：只有当你处理特别巨大的整数时才会用到。比如双十一的交易量、大型门户网站点击量、证券公司衍生产品持仓等。</p>
<h3 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h3><p>在评估用哪种整数类型的时候，你需要考虑 存储空间 和 可靠性 的平衡问题：一方 面，用占用字节数少的整数类型可以节省存储空间；另一方面，要是为了节省存储空间， 使用的整数类型取值范围太小，一旦遇到超出取值范围的情况，就可能引起 系统错误 ，影响可靠性。</p>
<p>举个例子，商品编号采用的数据类型是 INT。原因就在于，客户门店中流通的商品种类较多，而且，每天都有旧商品下架，新商品上架，这样不断迭代，日积月累。 </p>
<p>如果使用 SMALLINT 类型，虽然占用字节数比 INT 类型的整数少，但是却不能保证数据不会超出范围65535。相反，使用 INT，就能确保有足够大的取值范围，不用担心数据超出范围影响可靠性的问题。</p>
<p>你要注意的是，在实际工作中，系统故障产生的成本远远超过增加几个字段存储空间所产生的成本。因此，我建议你首先确保数据不会超过取值范围，在这个前提之下，再去考虑如何节省存储空间。</p>
<h2 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h2><h3 id="类型介绍-1"><a href="#类型介绍-1" class="headerlink" title="类型介绍"></a>类型介绍</h3><blockquote>
<p>浮点数和定点数类型的特点是可以<code>处理小数</code>,你可以把整数看成小数的一个特例.因此,浮点数和定点数使用场景比整数大多了.MySQL支持的浮点数类型分别是<code>FLOAT</code>,<code>DOUBLE</code>,<code>REAL</code></p>
</blockquote>
<ul>
<li>FLOAT表示单精度浮点数</li>
<li>DOUBLE表示双精度浮点数</li>
</ul>
<table>
<thead>
<tr>
<th>类型</th>
<th>字节</th>
<th>有符号数取值范围</th>
<th>无符号数取值范围</th>
</tr>
</thead>
<tbody><tr>
<td>FLOAT</td>
<td>4</td>
<td>-3.402823466E+38～-1.175494351E-38</td>
<td>0 , (1.175494351E-38～3.402823466E+38)</td>
</tr>
<tr>
<td>DOUBLE</td>
<td>8</td>
<td>-1.7976931348623157E+308～-2.2250738585072014E-308</td>
<td>0 和 (2.2250738585072014E-308～1.7976931348623157E+308)</td>
</tr>
</tbody></table>
<blockquote>
<p>REAL默认就是 DOUBLE。如果你把 SQL 模式设定为启用“ REAL_AS_FLOAT ”，那 么，MySQL 就认为 REAL 是 FLOAT。如果要启用“REAL_AS_FLOAT”，可以通过以下 SQL 语句实现：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> sql_mode <span class="operator">=</span> “REAL_AS_FLOAT”;</span><br></pre></td></tr></table></figure></div>
</blockquote>
<h2 id="定点数类型"><a href="#定点数类型" class="headerlink" title="定点数类型"></a>定点数类型</h2><h3 id="类型介绍-2"><a href="#类型介绍-2" class="headerlink" title="类型介绍"></a>类型介绍</h3><blockquote>
<p>MySQL中,定点类型只有<code>	DECIMAL</code>一种</p>
</blockquote>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>字节</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>DECIMAL(M,D),DEC,NUMERIC</td>
<td>M+2字节</td>
<td>有效范围由M和D决定</td>
</tr>
</tbody></table>
<blockquote>
<p>使用 DECIMAL(M,D) 的方式表示高精度小数。其中，M被称为精度，D被称为标度。0&lt;&#x3D;M&lt;&#x3D;65， 0&lt;&#x3D;D&lt;&#x3D;30，D&lt;M。例如，定义DECIMAL（5,2）的类型，表示该列取值范围是-999.99~999.99。</p>
</blockquote>
<ul>
<li><p>定点数在MySQL内部是以 <code>字符串</code> 的形式进行存储，这就决定了它一定是精准的。</p>
</li>
<li><p>当DECIMAL类型不指定精度和标度时，其默认为DECIMAL(10,0)。当数据的精度超出了定点数类型的精度范围时，则MySQL同样会进行四舍五入处理。</p>
</li>
</ul>
<p><code>浮点数 vs 定点数</code></p>
<ul>
<li><p>浮点数相对于定点数的优点是在长度一定的情况下，浮点类型取值范围大，但是不精准，适用于需要取值范围大，又可以容忍微小误差的科学计算场景（比如计算化学、分子建模、流体动力学等） </p>
</li>
<li><p>定点数类型取值范围相对小，但是精准，没有误差，适合于对精度要求极高的场景 （比如涉及金额计算的场景）</p>
</li>
</ul>
<h2 id="位类型-BIT"><a href="#位类型-BIT" class="headerlink" title="位类型: BIT"></a>位类型: BIT</h2><h3 id="类型介绍-3"><a href="#类型介绍-3" class="headerlink" title="类型介绍"></a>类型介绍</h3><blockquote>
<p>BIT类型中存储的是二进制值，类似010110。 </p>
</blockquote>
<table>
<thead>
<tr>
<th>二进制字符串类型</th>
<th>长度</th>
<th>长度范围</th>
<th>占用空间</th>
</tr>
</thead>
<tbody><tr>
<td>BIT(M)</td>
<td>M</td>
<td>1&lt;&#x3D; M &lt;&#x3D; 64</td>
<td>约为(M+7)&#x2F;8个字节</td>
</tr>
</tbody></table>
<blockquote>
<p>BIT类型，如果没有指定(M)，默认是1位。这个1位，表示只能存1位的二进制值。这里(M)是表示二进制的位数，位数最小值为1，最大值为64。 </p>
<h4 id="使用SELECT命令查询位字段时，可以用-BIN-或-HEX-函数进行读取。"><a href="#使用SELECT命令查询位字段时，可以用-BIN-或-HEX-函数进行读取。" class="headerlink" title="使用SELECT命令查询位字段时，可以用 BIN() 或 HEX() 函数进行读取。"></a>使用SELECT命令查询位字段时，可以用 BIN() 或 HEX() 函数进行读取。</h4><h4 id="使用b-0查询数据时，可以直接查询出存储的十进制数据的值。"><a href="#使用b-0查询数据时，可以直接查询出存储的十进制数据的值。" class="headerlink" title="使用b+0查询数据时，可以直接查询出存储的十进制数据的值。"></a>使用b+0查询数据时，可以直接查询出存储的十进制数据的值。</h4></blockquote>
<h2 id="日期与时间类型"><a href="#日期与时间类型" class="headerlink" title="日期与时间类型"></a>日期与时间类型</h2><h3 id="类型介绍-4"><a href="#类型介绍-4" class="headerlink" title="类型介绍"></a>类型介绍</h3><blockquote>
<p>MySQL有多种表示日期和时间的数据类型，不同的版本可能有所差异，MySQL8.0版本支持的日期和时间类型主要有：YEAR类型、TIME类型、DATE类型、DATETIME类型和TIMESTAMP类型。 </p>
</blockquote>
<ul>
<li><code>YEAR</code>类型通常用来表示年</li>
<li><code>DATE</code>类型通常用来表示年,月,日</li>
<li><code>TIME</code>类型通常用来表示时,分,秒</li>
<li><code>DATETIME</code>类型通常用来表示年,月,日,时,分,秒</li>
<li><code>TIMESTAMP</code>类型通常用来表示带时区的年,月,日,时,分,秒</li>
</ul>
<table>
<thead>
<tr>
<th>类型</th>
<th>名称</th>
<th>字节</th>
<th>日期格式</th>
<th>最小值</th>
<th>最大值</th>
</tr>
</thead>
<tbody><tr>
<td>YEAR</td>
<td>年</td>
<td>1</td>
<td>YYYY或者YY</td>
<td>1901</td>
<td>2155</td>
</tr>
<tr>
<td>TIME</td>
<td>时间</td>
<td>3</td>
<td>HH:MM:SS</td>
<td>-838:59:59</td>
<td>838:59:59</td>
</tr>
<tr>
<td>DATE</td>
<td>日期</td>
<td>3</td>
<td>YYYY-MM-DD</td>
<td>1000-01-01</td>
<td>9999-12-03</td>
</tr>
<tr>
<td>DATETIME</td>
<td>日期时间</td>
<td>8</td>
<td>YYYY-MM-DD HH:MM:SS</td>
<td>1000-01-01 00:00:00</td>
<td>9999-12-31 23:59:59</td>
</tr>
<tr>
<td>TIMESTAMP</td>
<td>日期时间</td>
<td>4</td>
<td>YYYY-MM-DD HH:MM:SS</td>
<td>1970-01-01 00:00:00 UTC</td>
<td>2038-01-19 03:14:07 UTC</td>
</tr>
</tbody></table>
<blockquote>
<p>为什么时间类型 TIME 的取值范围不是 -23:59:59～23:59:59 呢？原因是 MySQL 设计的 TIME 类型，不光表 示一天之内的时间，而且可以用来表示一个时间间隔，这个时间间隔可以超过 24 小时。</p>
</blockquote>
<blockquote>
<p>可以看到，不同数据类型表示的时间内容不同、取值范围不同，而且占用的字节数也不一样，你要根据实际需要灵活选取。</p>
</blockquote>
<h3 id="DATETIME-类型"><a href="#DATETIME-类型" class="headerlink" title="DATETIME 类型"></a>DATETIME 类型</h3><blockquote>
<p>DATETIME类型在所有的日期时间类型中占用的存储空间最大，总共需要 8 个字节的存储空间。在格式上为DATE类型和TIME类型的组合，可以表示为 YYYY-MM-DD HH:MM:SS ，其中YYYY表示年份，MM表示月份，DD表示日期，HH表示小时，MM表示分钟，SS表示秒。</p>
</blockquote>
<h3 id="TIMESTAMP-类型"><a href="#TIMESTAMP-类型" class="headerlink" title="TIMESTAMP 类型"></a>TIMESTAMP 类型</h3><blockquote>
<p>TIMESTAMP类型也可以表示日期时间，其显示格式与DATETIME类型相同，都是 YYYY-MM-DD HH:MM:SS，需要4个字节的存储空间。但是TIMESTAMP存储的时间范围比DATETIME要小很多，只能存储“1970-01-01 00:00:01 UTC”到“2038-01-19 03:14:07 UTC”之间的时间。其中，UTC表示世界统一时间，也叫作世界标准时间</p>
<h4 id="存储数据的时候需要对当前时间所在的时区进行转换，查询数据的时候再将时间转换回当前的时区。因此，使用TIMESTAMP存储的同一个时间值，在不同的时区查询时会显示不同的时间。"><a href="#存储数据的时候需要对当前时间所在的时区进行转换，查询数据的时候再将时间转换回当前的时区。因此，使用TIMESTAMP存储的同一个时间值，在不同的时区查询时会显示不同的时间。" class="headerlink" title="存储数据的时候需要对当前时间所在的时区进行转换，查询数据的时候再将时间转换回当前的时区。因此，使用TIMESTAMP存储的同一个时间值，在不同的时区查询时会显示不同的时间。"></a>存储数据的时候需要对当前时间所在的时区进行转换，查询数据的时候再将时间转换回当前的时区。因此，使用TIMESTAMP存储的同一个时间值，在不同的时区查询时会显示不同的时间。</h4></blockquote>
<h3 id="TIMESTAMP和DATETIME的区别"><a href="#TIMESTAMP和DATETIME的区别" class="headerlink" title="TIMESTAMP和DATETIME的区别"></a>TIMESTAMP和DATETIME的区别</h3><ul>
<li>TIMESTAMP 存储空间比较小,表示的日期时间范围也比较小</li>
<li>底层存储方式不同, TIMESTAMP 底层存储的是<code>毫秒值</code>, 距离 1970-01-01 00:00:00 0 毫秒的毫秒值</li>
<li>两个日期比较大小或者日期计算时, TIMESTAMP 更方便,更快</li>
<li>TIMESTAMP 和时区有关. TIMESTAMP 会根据用户的时区不同,显示不同的结果. 而 DATETIME 则只能反映出插入时当地的时区,其他时区的人查看数据必然会有误差的</li>
</ul>
<h2 id="文本字符串类型"><a href="#文本字符串类型" class="headerlink" title="文本字符串类型"></a>文本字符串类型</h2><blockquote>
<p>MySQL中，文本字符串总体上分为 CHAR 、 VARCHAR 、 TINYTEXT 、 TEXT 、 MEDIUMTEXT 、LONGTEXT 、 ENUM 、 SET 等类型。</p>
</blockquote>
<table>
<thead>
<tr>
<th>文本字符串类型</th>
<th>值的长度</th>
<th>长度范围</th>
<th>占用的存储空间</th>
</tr>
</thead>
<tbody><tr>
<td>CHAR(M)</td>
<td>M</td>
<td>0&lt;&#x3D; M &lt;&#x3D;255</td>
<td>M个字节</td>
</tr>
<tr>
<td>VARCAHR(M)</td>
<td>M</td>
<td>0&lt;&#x3D; M &lt;&#x3D; 65535</td>
<td>M+1个字节</td>
</tr>
<tr>
<td>TINYTEXT</td>
<td>L</td>
<td>0&lt;&#x3D; L &lt;&#x3D; 255</td>
<td>L+2个字节</td>
</tr>
<tr>
<td>TEXT</td>
<td>L</td>
<td>0&lt;&#x3D; L &lt;&#x3D; 65535</td>
<td>L+2个字节</td>
</tr>
<tr>
<td>MEDIUMTEXT</td>
<td>L</td>
<td>0&lt;&#x3D; L &lt;&#x3D; 16777215</td>
<td>L+3个字节</td>
</tr>
<tr>
<td>LONGTEXT</td>
<td>L</td>
<td>0&lt;&#x3D; L &lt;&#x3D; 4294967295</td>
<td>L+4个字节</td>
</tr>
<tr>
<td>ENUM</td>
<td>L</td>
<td>1&lt;&#x3D; L &lt;&#x3D;65535</td>
<td>1或2个字节</td>
</tr>
<tr>
<td>SET</td>
<td>L</td>
<td>0&lt;&#x3D; L &lt;&#x3D;64</td>
<td>1,2,3,4或8个字节</td>
</tr>
</tbody></table>
<h3 id="CHAR和VARCAHR类型"><a href="#CHAR和VARCAHR类型" class="headerlink" title="CHAR和VARCAHR类型"></a>CHAR和VARCAHR类型</h3><blockquote>
<p>CHAR和VARCHAR类型都可以存储比较短的字符串</p>
</blockquote>
<table>
<thead>
<tr>
<th>文本字符串类型</th>
<th>特点</th>
<th>值的长度</th>
<th>长度范围</th>
<th>占用的存储空间</th>
</tr>
</thead>
<tbody><tr>
<td>CHAR(M)</td>
<td>固定长度</td>
<td>M</td>
<td>0&lt;&#x3D; M &lt;&#x3D;255</td>
<td>M个字节</td>
</tr>
<tr>
<td>VARCAHR(M)</td>
<td>可变长度</td>
<td>M</td>
<td>0&lt;&#x3D; M &lt;&#x3D; 65535</td>
<td>M+1个字节</td>
</tr>
</tbody></table>
<ul>
<li><h3 id="CHAR-类型"><a href="#CHAR-类型" class="headerlink" title="CHAR 类型"></a>CHAR 类型</h3><ul>
<li>CHAR(M) 类型一般需要预先定义字符串长度,如果不指定M,则表示默认长度是1个字节</li>
<li>如果保存时,数据的时间长度比CHAR类型声明的长度小,则会在<code>右侧填充</code>空格以达到指定的长度.当MySQL检索CHAR 类型的数据时,CHAR类型的字段会去除尾部的空格</li>
<li>定义CHAR类型字段时,声明的长度即为CHAR类型字段所占的存储空间的字节数</li>
</ul>
</li>
<li><h3 id="VARCHAR-类型"><a href="#VARCHAR-类型" class="headerlink" title="VARCHAR 类型"></a>VARCHAR 类型</h3><ul>
<li>VARCHAR(M) 定义时,<code>必须指定</code>长度M,否则报错</li>
<li>MySQL4.0版本一下,VARCHAR(20):指的是20字节,如果存放UTF8汉字时,只能存6个(每个汉字占3个字节);MySQL5.0版本以上,VARCHAR(20):指的是20个字符</li>
<li>检索VARCHAR类型的字段数据时,会保留数据尾部的空格. VARCHAR类型的字段所占用的存储空间为字符串时间长度加1个字节</li>
</ul>
</li>
</ul>
<h3 id="CHAR-和-VARCHAR-类型"><a href="#CHAR-和-VARCHAR-类型" class="headerlink" title="CHAR 和 VARCHAR 类型"></a>CHAR 和 VARCHAR 类型</h3><table>
<thead>
<tr>
<th>类型</th>
<th>特点</th>
<th>空间上</th>
<th>时间上</th>
<th>适用场景</th>
</tr>
</thead>
<tbody><tr>
<td>CAHR(M)</td>
<td>固定长度</td>
<td>浪费存储空间</td>
<td>效率高</td>
<td>存储不大,速度要求高</td>
</tr>
<tr>
<td>VARCHAR(M)</td>
<td>可变长度</td>
<td>节省存储空间</td>
<td>效率低</td>
<td>非CHAR场景</td>
</tr>
</tbody></table>
<ul>
<li>情况1：存储很短的信息。比如门牌号码101，201……这样很短的信息应该用char，因为varchar还要占个 byte用于存储信息长度，本来打算节约存储的，结果得不偿失。</li>
<li>情况2：固定长度的。比如使用uuid作为主键，那用char应该更合适。因为他固定长度，varchar动态根据长度的特性就消失了，而且还要占个长度信息。</li>
<li>情况3：十分频繁改变的column。因为varchar每次存储都要有额外的计算，得到长度等工作，如果一个非常频繁改变的，那就要有很多的精力用于计算，而这些对于char来说是不需要的。</li>
<li>情况4：具体存储引擎中的情况：<ul>
<li><code>MyISAM </code>数据存储引擎和数据列：MyISAM数据表，最好使用固定长度(CHAR)的数据列代替可变长 度(VARCHAR)的数据列。这样使得整个表静态化，从而使 数据检索更快 ，用空间换时间。</li>
<li><code>MEMORY</code>存储引擎和数据列：MEMORY数据表目前都使用固定长度的数据行存储，因此无论使用 CHAR或VARCHAR列都没有关系，两者都是作为CHAR类型处理的。 </li>
<li><code>InnoDB</code> 存储引擎，建议使用VARCHAR类型。因为对于InnoDB数据表，内部的行存储格式并没有区分固定长度和可变长度列（所有数据行都使用指向数据列值的头指针），而且主要影响性能的因素是数据行使用的存储总量，由于char平均占用的空间多于varchar，所以除了简短并且固定长度的,其他考虑varchar。这样节省空间，对磁盘I&#x2F;O和数据存储总量比较好。</li>
</ul>
</li>
</ul>
<h2 id="JSON-类型"><a href="#JSON-类型" class="headerlink" title="JSON 类型"></a>JSON 类型</h2><p>JSON（JavaScript Object Notation）是一种轻量级的 数据交换格式 。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。它易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。JSON 可以将 JavaScript 对象中表示的一组数据转换为字符串，然后就可以在网络或者程序之间轻松地传递这个字符串，并在需要的时候将它还原为各编程语言所支持的数据格式。</p>
]]></content>
      <categories>
        <category>MySQL</category>
        <category>Basic</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL约束</title>
    <url>/GSSBlog/2023/10/30/6.MySQL%E7%BA%A6%E6%9D%9F/</url>
    <content><![CDATA[<h2 id="约束介绍"><a href="#约束介绍" class="headerlink" title="约束介绍"></a>约束介绍</h2><blockquote>
<p>数据完整性(Data Integrity) 是指数据的准确性(Accuracy) 和可靠性 (Reliability) 它是防止数据库中存在不符合语义规定的数据和防止因错误信息的输入输出造成无效操作或信息而提出的.</p>
</blockquote>
<blockquote>
<p>为了保证数据的完整性,SQL规范以约束的方式对<code>表数据进行额外的条件限制</code></p>
<ul>
<li><code>实体完整性 (Entity Integrity)</code>如:同一个表中,不能存在两条完全相同无法区分的记录</li>
<li><code>域完整性 (Domain Integrity)</code>如:年龄范围0-120;性别范围”男&#x2F;女”</li>
<li><code>引用完整性 (Referential Integrity)</code>如:员工所在部门,在部门表中要能找到这个部门</li>
<li><code>用户自定义完整性 (User-defined Integrity)</code>如:用户名唯一,密码不能为空等</li>
</ul>
</blockquote>
<h2 id="什么是约束"><a href="#什么是约束" class="headerlink" title="什么是约束"></a>什么是约束</h2><blockquote>
<p>约束是表级的强制规定</p>
<p>可以在<code>创建表时候规定约束 (通过 CREATE TABLE 语句)</code>或者在<code>表创建之后 (通过 ALTER TABLE 语句)</code>规定约束</p>
</blockquote>
<h2 id="约束的分类"><a href="#约束的分类" class="headerlink" title="约束的分类"></a>约束的分类</h2><ul>
<li>根据约束数据的列限制;分为<ul>
<li>单列约束: 每个约束之约束一列</li>
<li>多列约束: 每个约束可约束多列数据</li>
</ul>
</li>
<li>根据约束的作用范围;分为<ul>
<li>列级约束: 只能作用在一个列上,跟在列定义后面</li>
<li>表级约束: 可以作用在多个列上,不与列一起,但是单独定义</li>
</ul>
</li>
<li>根据约束起的作用;分为<ul>
<li><code>NOT NULL</code>非空约束,规定某个字段不能为空</li>
<li><code>UNIQUE</code>唯一约束,规定某个字段在整个表中是唯一的</li>
<li><code>PRIMARY KEY</code>主键(非空且唯一)约束</li>
<li><code>FOREIGN KEY</code>外键约束</li>
<li><code>CHECK</code>检查约束</li>
<li><code>DEFAULT</code>默认值约束</li>
</ul>
</li>
</ul>
<blockquote>
<p>注意: MySQL不支持check 约束,但可以使用check,而没有效果</p>
</blockquote>
<ul>
<li><p>查看某个表已有的约束</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- information_schema 数据库名(系统库)</span></span><br><span class="line"><span class="comment">-- table_constraints (专门存储各个表的约束)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.table_constraints <span class="keyword">WHERE</span> table_name <span class="operator">=</span> <span class="string">&#x27;表名称&#x27;</span>;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h3><blockquote>
<p>限制某个字段&#x2F;某列的值不允许为空</p>
</blockquote>
<ul>
<li><p>关键字</p>
<p>NOT NULL</p>
</li>
<li><p>特点</p>
<ul>
<li>默认,所有的类型的值都可以还是NULL,包括INT,FLOAT 等数据类型</li>
<li>非空约束只能出现在表对象的列上,<code>只能是某个列单独限定非空,不能组合非空</code></li>
<li>一个表可以有很多列都分别限定了非空</li>
<li>空字符串<code>不等于NULL,0也不等于NULL</code></li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建表时添加非空约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名称 (</span><br><span class="line">	字段名 数据类型,</span><br><span class="line">    字段名 数据类型 <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    字段名 数据类型 <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 建表后添加非空约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 MODIFY 字段名 数据类型 <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除非空约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称	MODIFY 字段名 数据类型 <span class="keyword">NULL</span> (或者 去掉 <span class="keyword">NOT</span> <span class="keyword">NULL</span>);</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="唯一性约束"><a href="#唯一性约束" class="headerlink" title="唯一性约束"></a>唯一性约束</h3><blockquote>
<p>用来限制某个字段&#x2F;某列的值不能重复</p>
</blockquote>
<ul>
<li><p>关键字</p>
<p>UNIQUE</p>
</li>
<li><p>特点</p>
<ul>
<li>同一个表可以有多个唯一约束</li>
<li>唯一约束可以是某一个列的值唯一,也可以多个列组合的值唯一</li>
<li>唯一性约束允许列值为空</li>
<li>在创建唯一约束的时候,如果不给唯一约束命名,就默认和列名相同</li>
<li><code>MySQL会给唯一约束的列上默认创建一个唯一索引</code></li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表时添加</span></span><br><span class="line"><span class="comment">-- 方式一</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名称(</span><br><span class="line">	字段名 数据类型,</span><br><span class="line">    字段名 数据类型 <span class="keyword">UNIQUE</span>,</span><br><span class="line">    字段名 数据类型 <span class="keyword">UNIQUE</span> KEY</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 方式二</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名称(</span><br><span class="line">	字段名 数据类型,</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    [<span class="keyword">CONSTRAINT</span> 约束名] <span class="keyword">UNIQUE</span> KEY (字段名,[字段名])</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 建表后添加约束</span></span><br><span class="line"><span class="comment">-- 方式一</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> KEY (字段列表);</span><br><span class="line"><span class="comment">-- 方式二</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 MODIFY 字段名 数据类型 <span class="keyword">UNIQUE</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>删除唯一约束</p>
<ul>
<li><code>添加唯一约束的列也会自动创建唯一索引</code></li>
<li>删除唯一约束只能通过删除唯一索引的方式删除</li>
<li>删除时需要自定唯一索引名,唯一索引名就和唯一约束名一样</li>
<li>如果创建唯一约束时没有指定名称,如果是单列,就默认和列名相同;如果是组合列,那么默认和()中排在第一个列名相同.也可以自定义唯一性约束名.</li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看一个数据表都有哪些约束</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schame.table_constraints <span class="keyword">WHERE</span> table_name <span class="operator">=</span> <span class="string">&#x27;表名&#x27;</span>;</span><br><span class="line"><span class="comment">-- 也可以通过第二种方式查看表的索引</span></span><br><span class="line"><span class="keyword">show</span> index <span class="keyword">from</span> 表名称;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除唯一约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称</span><br><span class="line"><span class="keyword">DROP</span> INDEX 索引名;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="主键约束-PRIMARY-KEY"><a href="#主键约束-PRIMARY-KEY" class="headerlink" title="主键约束(PRIMARY KEY)"></a>主键约束(PRIMARY KEY)</h3><blockquote>
<p>用来唯一标识表中的一行数据</p>
</blockquote>
<ul>
<li><p>关键字</p>
<p>PRIMARY KEY</p>
</li>
<li><p>特点</p>
<ul>
<li>主键约束相当于<code>唯一约束+非空约束</code>的组合,主键约束列不允许重复,也不允许出现空值.</li>
<li>一个表最多只能有一个主键约束,建立主键约束可在列级别创建,也可以在表级别上创建</li>
<li>主键约束对应着表中的一列或多列</li>
<li>如果是多列组合的复合主键约束,那么这些列都不允许为空值,并且组合的值不允许重复</li>
<li>MySQL的主键名总是<code>PRIMARY</code>就算自己命名了主键约束也不生效</li>
<li>当创建主键约束时,系统默认会在所在的列或者列组合上建立对应的<code>主键索引</code>(能够根据主键查询的,就根据主键查询,效率更高).如果删除主键约束了,主键约束对应的索引就自动删除了</li>
<li>需要注意一点的,不要修改主键字段的值.因为主键是数据记录的唯一标识,如果修改了主键的值,就可能会破坏数据的完整性.</li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建表时添加主键约束</span></span><br><span class="line"><span class="comment">-- 方式一(列级模式)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名称(</span><br><span class="line">	字段名 数据类型 <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    字段名 数据类型</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 方式二(表级模式)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名称(</span><br><span class="line">	字段名 数据类型,</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    [<span class="keyword">CONSTRAINT</span> 约束名] <span class="keyword">PRIMARY</span> KEY(字段名)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 建表后添加主键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY(字段列表); # 字段列表可以是一个字段,也可以是多个字段,如果是多个字段的话,就是复合主键</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>关于复合主键</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建方式</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名称(</span><br><span class="line">	字段名 数据类型,</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (字段名<span class="number">1</span>,字段名<span class="number">2</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>删除主键约束</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<h3 id="注意-删除主键约束-不需要指定主键名-因为一个表只有一个主键-删除主键约束后-非空还存在"><a href="#注意-删除主键约束-不需要指定主键名-因为一个表只有一个主键-删除主键约束后-非空还存在" class="headerlink" title="注意: 删除主键约束,不需要指定主键名,因为一个表只有一个主键,删除主键约束后,非空还存在."></a>注意: 删除主键约束,不需要指定主键名,因为一个表只有一个主键,删除主键约束后,非空还存在.</h3></blockquote>
</li>
</ul>
<h3 id="自增列-AUTO-INCREMENT"><a href="#自增列-AUTO-INCREMENT" class="headerlink" title="自增列( AUTO_INCREMENT)"></a>自增列( AUTO_INCREMENT)</h3><blockquote>
<p>某个字段的值自增</p>
</blockquote>
<ul>
<li><p>关键字</p>
<p>AUTO_INCREMENT</p>
</li>
<li><p>特点和要求</p>
<ul>
<li>一个表最多只能有一个自增长列</li>
<li>当需要产生唯一标识符或顺序值时,可设置自增长</li>
<li>自增长列约束的列必须是键列(<code>主键列,唯一键列</code>)</li>
<li>自增约束的列的数据类型必须是整数类型</li>
<li>如果自增列指定了<code>0和NULL</code>,会在当前最大值的基础上自增;如果自增列手动指定了具体值,直接赋值为具体值.</li>
</ul>
</li>
<li><p>如何指定自增约束</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建表时指定自增约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名称(</span><br><span class="line">	字段名 数据类型 <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">    字段名 数据类型 <span class="keyword">UNIQUE</span> KEY <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    字段名 数据类型 <span class="keyword">UNIQUE</span> KEY,</span><br><span class="line">    字段名 数据类型 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> 默认值</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 建表后指定自增约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 MODIFY 字段名 数据类型 AUTO_INCREMENT;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除自增约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 MODIFY 字段名 数据类型; ## 去掉 auto_increment 相当于删除</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>MySQL8.0新特性-自增变化的持久化</p>
<blockquote>
<p>在MySQL 8.0之前,自增主键<code>auto_increment</code>的值如果大于<code>max(primary key)+1</code>,在MySQL重启后,会重置<code>auto_increment=max(primary key)+1</code>,这种现象在某些情况下会导致业务主键冲突或者其他难以发现的问题.</p>
</blockquote>
<p>demo</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建的数据表中包含自增主键的id字段</span></span><br><span class="line"><span class="comment">-- 基于MySQL 5.7服务测试</span></span><br><span class="line"><span class="comment">-- 1</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test1(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 2</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test1</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">0</span>),(<span class="number">0</span>),(<span class="number">0</span>),(<span class="number">0</span>);</span><br><span class="line"><span class="comment">-- 3</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test1; <span class="comment">-- 结果: 1,2,3,4</span></span><br><span class="line"><span class="comment">-- 4</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> test1 <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"><span class="comment">-- 5</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test1 <span class="keyword">VALUES</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">-- 6</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test1; <span class="comment">-- 结果: 1,2,3,5</span></span><br><span class="line"><span class="comment">-- 7</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> test1 <span class="keyword">where</span> id<span class="operator">=</span><span class="number">5</span>;</span><br><span class="line"><span class="comment">-- 重启数据库,重新插入一个新值</span></span><br><span class="line"><span class="comment">-- 8</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test1 <span class="keyword">values</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">-- 9</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test1; <span class="comment">-- 结果: 1,2,3,4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 基于MySQL 8.0服务测试</span></span><br><span class="line"><span class="comment">-- 重新执行上面的步骤</span></span><br><span class="line"><span class="comment">-- 9</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test1; <span class="comment">-- 结果: 1,2,3,6</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>结论: 从结果可以看出,自增变量已经持久化了</p>
<p>MySQL 8.0将自增主键的计数器持久化到<code>重做日志</code>中.每次计数器发生变化,都会将其写入重做日志中.如果数据库重启,InooDB会根据重做日志中的信息来初始化计数器的内存值.</p>
</blockquote>
</li>
</ul>
<h3 id="外键约束-FOREIGN-KEY"><a href="#外键约束-FOREIGN-KEY" class="headerlink" title="外键约束( FOREIGN KEY)"></a>外键约束( FOREIGN KEY)</h3><blockquote>
<p>限定某个表的某个字段的应用完整性</p>
</blockquote>
<ul>
<li><p>关键字</p>
<p>FOREIGN KEY</p>
</li>
<li><p>特点</p>
<ul>
<li>从表的外键列,必须引用&#x2F;参考主表的主键或唯一约束的列</li>
<li>在创建外键约束时,如果不给外键约束命名,<code>默认名不是列名,而是自动产生的一个外键名</code></li>
<li>创建表时就指定外键约束的话,要先创建主表,再创建从表</li>
<li>删表时.先删从表,再删主表</li>
<li>当主表的记录被从表参照时，主表的记录将不允许删除，如果要删除数据，需要先删除从表中依赖该记录的数据，然后才可以删除主表的数据 </li>
<li>在“从表”中指定外键约束，并且一个表可以建立多个外键约束</li>
<li>从表的外键列与主表被参照的列名字可以不相同，但是数据类型必须一样，逻辑意义一致。如果类型不一样，创建子表时，就会出现错误“ERROR 1005 (HY000): Can’t create table’database.tablename’(errno: 150)”。</li>
<li>当创建外键约束时，系统默认会在所在的列上建立对应的普通索引。但是索引名是外键的约束名</li>
<li>删除外键约束后，必须<code>手动</code>删除对应的索引</li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表时指定外键约束</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 主表名称(</span><br><span class="line">	字段<span class="number">1</span> 数据类型 <span class="keyword">primary</span> key,</span><br><span class="line">	字段<span class="number">2</span> 数据类型</span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 从表名称(</span><br><span class="line">	字段<span class="number">1</span> 数据类型 <span class="keyword">primary</span> key,</span><br><span class="line">	字段<span class="number">2</span> 数据类型,</span><br><span class="line">	[<span class="keyword">CONSTRAINT</span> <span class="operator">&lt;</span>外键约束名称<span class="operator">&gt;</span>] <span class="keyword">FOREIGN</span> KEY（从表的某个字段) <span class="keyword">references</span> 主表名(被参考字段)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- FOREIGN KEY: 在表级指定子表中的列</span></span><br><span class="line"><span class="comment">-- REFERENCES: 标示在父表中的列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表后指定外键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 从表名 <span class="keyword">ADD</span> [<span class="keyword">CONSTRAINT</span> 约束名] <span class="keyword">FOREIGN</span> KEY (从表的字段) <span class="keyword">REFERENCES</span> 主表名(被引用字段) [<span class="keyword">on</span> <span class="keyword">update</span> xx][<span class="keyword">on</span> <span class="keyword">delete</span> xx];</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>约束等级</p>
<ul>
<li><code>Cascade方式</code>: 在父表上update&#x2F;delete纪录时,同步update&#x2F;delete掉子表的匹配记录</li>
<li><code>Set NULL方式</code>: 在父表上update&#x2F;delete记录时,将子表上匹配记录的列设为null;但是主要子表的外键不能为<code>NOT NULL</code>;</li>
<li><code>No action方式</code>: 如果子表中有匹配记录,则不允许父表对应候选键进行update&#x2F;delete操作.</li>
<li><code>Restrict方式</code>: 同no action,都是立即检查外键约束</li>
<li><code>Set dedault方式</code>:父表有变更时,子表将外键列设置成一个默认的值,但InnoDB不能识别</li>
</ul>
<p>如果没有指定等级,就相当于Restrict方式.</p>
</li>
</ul>
<p>对于外键约束,最好是采用<code> ON UPDATE CASCADE ON DELETE RESTRICT</code>的方式 </p>
<ul>
<li><p>删除外键约束</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 第一步先查看约束名和删除外键约束</span></span><br><span class="line"><span class="comment">-- 查看某个表的约束名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.table_constraints <span class="keyword">WHERE</span> table_name <span class="operator">=</span> <span class="string">&#x27;表名称&#x27;</span>;</span><br><span class="line"><span class="comment">-- 删除外键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY 外键约束名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 第二步查看索引名和删除索引。（注意，只能手动删除）</span></span><br><span class="line"><span class="comment">-- 查看某个表的索引名</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> 表名称;</span><br><span class="line"><span class="comment">-- 删除索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 <span class="keyword">DROP</span> INDEX 索引名;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>在 MySQL 里，外键约束是有成本的，需要消耗系统资源。对于大并发的 SQL 操作，有可能会不适 </p>
<p>合。比如大型网站的中央数据库，可能会 <code>因为外键约束的系统开销而变得非常慢 </code>。所以， MySQL 允 </p>
<p>许你不使用系统自带的外键约束，在<code>应用层面</code>完成检查数据一致性的逻辑。也就是说，即使你不 </p>
<p>用外键约束，也要想办法通过应用层面的附加逻辑，来实现外键约束的功能，确保数据的一致性。</p>
</blockquote>
</li>
<li><p>阿里开发规范</p>
<ul>
<li>【 强制 】不得使用外键与级联，一切外键概念必须在应用层解决。<ul>
<li>说明：（概念解释）学生表中的 student_id 是主键，那么成绩表中的 student_id 则为外键。如果更新新学生表中的 student_id，同时触发成绩表中的 student_id 更新，即为级联更新。外键与级联更新适用于单机低并发 ，不适合 分布式 、 高并发集群 ；级联更新是强阻塞，存在数据库 更新风暴 的风险；外键影响数据库的 插入速度 。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="CHECK约束"><a href="#CHECK约束" class="headerlink" title="CHECK约束"></a>CHECK约束</h3><blockquote>
<p>检查某个字段的值是否符合xx要求,一般指的是值的范围</p>
</blockquote>
<ul>
<li><p>关键字</p>
<p>CHECK</p>
</li>
<li><p>说明: MySQL 5.7 不支持</p>
<p>MySQL 5.7可以使用check 约束,但check约束对数据验证没有任何作用.添加数据时,没有任何错误或者警告</p>
<p>MySQL 8.0之后可以使用check约束</p>
</li>
<li><p>使用</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表字段约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名称(</span><br><span class="line">	字段名 数据类型,</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    字段名 数据类型 <span class="keyword">check</span>(<span class="string">&#x27;条件&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="DEFAULT约束"><a href="#DEFAULT约束" class="headerlink" title="DEFAULT约束"></a>DEFAULT约束</h3><blockquote>
<p>给某个字段&#x2F;某列指定默认值,一旦设置默认值,在插入数据时,如果此字段没有显式赋值,则赋值为默认值</p>
</blockquote>
<ul>
<li><p>关键字</p>
<p>DEFAULT</p>
</li>
<li><p>使用</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表时添加约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名称(</span><br><span class="line">	字段名 数据类型 <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    字段名 数据类型 <span class="keyword">unique</span> ket <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    字段名 数据类型 <span class="keyword">unique</span> key,</span><br><span class="line">    字段名 数据类型 <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="string">&#x27;默认值&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 说明: 默认值约束一般不在唯一键和主键列上加;</span></span><br><span class="line"><span class="comment">-- 字段名 数据类型 not null default &#x27;&#x27;; # 默认是空字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 建表后添加默认约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 MODIFY 字段名 数据类型 <span class="keyword">default</span> 默认值;</span><br><span class="line"><span class="comment">-- 如果这个字段原来有非空约束,你还要保留非空约束,那么在加默认值约束时,还得保留非空约束,否则非空约束就被删除了;</span></span><br><span class="line"><span class="comment">-- 同理,再给某个字段加非空约束也一样,如果这个字段原来有默认值约束,你想保留,也要在modify语句中保留默认值约束,否则就删除了</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 MODIFY 字段名 数据类型 <span class="keyword">default</span> <span class="string">&#x27;默认值&#x27;</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>删除默认值约束</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除默认值约束</span></span><br><span class="line"><span class="keyword">ALTER</span> TBALE 表名称 MODIFY 字段名 数据类型 ; # 删除默认值约束,也不保留非空约束</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 MODIFY 字段名 数据类型 <span class="keyword">not</span> <span class="keyword">null</span>; # 删除默认值约束,保留非空约束</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ul>
<li><p>tip1</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">a: 为什么建表时,加 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> 或 DEFAULE <span class="number">0.</span></span><br><span class="line">b: 不想让表中出现 <span class="keyword">NULL</span> 值</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>tip2</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">a: 为什么不想要 <span class="keyword">NULL</span> 值</span><br><span class="line">b: <span class="number">1</span>;不好比较.<span class="keyword">NULL</span>是一种特殊值,比较时只能用专门的 <span class="keyword">IS</span> <span class="keyword">NULL</span> 和 <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> 来比较.碰到运算符,通常返回 <span class="keyword">NULL</span></span><br><span class="line"><span class="number">2</span>;效率不高.影响提高索引效果.因此,在建表时加入 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> 或者 <span class="keyword">DEFAULT</span> <span class="number">0.</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>tip3</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">a: 带 AUTO_INCREMENT 约束的字段值是从<span class="number">1</span>开始的嘛?</span><br><span class="line">b: 在MySQL中,默认auto_increment的初始值是<span class="number">1</span>,每新增一条记录,字段值自动加<span class="number">1.</span>设置自增属性(AUTO_INCREMENT)的时候,还可以指定第一条插入记录的自增字段的值,这样新插入的记录的自增字段值从初始值开始递增,如在表中插入第一条记录,同时指定id值为<span class="number">5</span>,则以后插入的记录的id值就会从<span class="number">6</span>开始往上增加.添加主键约束时,往往需要设置字段自动增加属性.</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>tip4</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">a: 并不是每个表都可以任意选择存储引擎</span><br><span class="line">外键约束(<span class="keyword">foreign</span> key) 不能跨引擎使用.在MySQL中,支持多种存储引擎,每一个表都可以指定一个不同的存储引擎,需要注意的是:外键约束是用来保存数据的参照完整性的,如果表之前需要关联外键,却指定了不同的存储引擎,那么这些表之间是不能创建外键约束的.所以说,存储引擎的选择也是不完全随意的.</span><br></pre></td></tr></table></figure></div></li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
        <category>Basic</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL视图(VIEW)</title>
    <url>/GSSBlog/2023/10/30/7.MySQL%E8%A7%86%E5%9B%BE/</url>
    <content><![CDATA[<h2 id="常见的数据库对象"><a href="#常见的数据库对象" class="headerlink" title="常见的数据库对象"></a>常见的数据库对象</h2><table>
<thead>
<tr>
<th>对象</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>表(TABLE)</td>
<td>表是存储数据的逻辑单元,以行和列的形式存在,列就是字段,行就是记录.</td>
</tr>
<tr>
<td>数据字典</td>
<td>就是系统表,存在数据库相关信息的表.系统表的数据通常由数据库系统维护,程序员通常不修改,只做查看</td>
</tr>
<tr>
<td>约束(CONSTRAINT)</td>
<td>执行数据校验的规则,用于保证数据完整性的规则</td>
</tr>
<tr>
<td>视图(VIEW)</td>
<td>一个或者多个数据表里的数据的逻辑显示,视图并不存储数据</td>
</tr>
<tr>
<td>索引(INDEX)</td>
<td>用于提高查询性能,相当于书的目录</td>
</tr>
<tr>
<td>存储过程(PROCEDURE)</td>
<td>用于完成一次完整的业务处理,没有返回值,但可以通过传出参数将多个值传给调用环境</td>
</tr>
<tr>
<td>存储函数(FUNCTION)</td>
<td>用于完成一次特定的计算,具有一个返回值</td>
</tr>
<tr>
<td>触发器(TRIGGER)</td>
<td>相当于一个事件监听器,当数据库发生特定事件后,触发器被触发,完成相应的处理</td>
</tr>
</tbody></table>
<h2 id="视图概述"><a href="#视图概述" class="headerlink" title="视图概述"></a>视图概述</h2><ul>
<li>视图是一种虚拟表,本身是不具有数据的,占用很少的内存空间,它是SQL中的一个重要概念.</li>
<li>视图建立在已有表的基础上,视图赖以建立的这些表称为基表</li>
<li>视图的创建和删除只影响视图本身,不影响对应的基表.但是当对视图中的数据进行增加,删除,修改操作时,数据表中的数据会相应得发生变化,反之亦然.</li>
<li>向视图提供数据内容的语句为SELECT语句,可以将试图理解为存储起来的SELECT语句<ul>
<li>在数据库中,视图不会保存数据,数据真正保存在数据表中,当对视图中的数据进行增加,删除,修改操作时,数据表中的数据会相应得发生变化,反之亦然.</li>
</ul>
</li>
<li>视图,是向用户提供基表数据的另一种表现形式,通常情况下,小型项目的数据库可以不使用视图,但是在大型项目中,以及数据表比较复杂的情况下,视图的价值就凸显出来了,他可以帮助我们把经常查询的结果集放在虚拟表中,提升使用效率,理解和使用起来都非常方便.</li>
</ul>
<h2 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h2><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 在 CREATE VIEW 语句中嵌入子查询</span></span><br><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">OR</span> REPLACE]</span><br><span class="line">[ALGORITHM <span class="operator">=</span> &#123;UNDEFINED <span class="operator">|</span> <span class="keyword">MERGE</span> <span class="operator">|</span> TEMPTABLE&#125;]</span><br><span class="line"><span class="keyword">VIEW</span> 视图名称 [(字段列表)]</span><br><span class="line"><span class="keyword">AS</span> 查询语句</span><br><span class="line">[<span class="keyword">WITH</span> [<span class="keyword">CASCADED</span><span class="operator">|</span><span class="keyword">LOCAL</span><span class="operator">|</span> <span class="keyword">CHECK</span> OPTION]</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 精简版</span></span><br><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> 视图名称</span><br><span class="line"> <span class="keyword">AS</span> 查询语句</span><br></pre></td></tr></table></figure></div>

<h2 id="查询视图"><a href="#查询视图" class="headerlink" title="查询视图"></a>查询视图</h2><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看数据库的表对象,视图对象</span></span><br><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看视图结构</span></span><br><span class="line"><span class="keyword">DESC</span> <span class="operator">/</span> <span class="keyword">DESCRIBE</span> 视图名称;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看视图的属性信息</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;视图名称&#x27;</span>\G; # 执行结果显示,注释Commet为<span class="keyword">VIEW</span>,说明改表为视图,其他信息为<span class="keyword">NULL</span>,说明这是一个虚表</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看视图的详细定义信息</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> 视图名称;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="视图更新数据"><a href="#视图更新数据" class="headerlink" title="视图更新数据"></a>视图更新数据</h2><blockquote>
<p>MySQL支持使用INSERT,UPDATE,DELETE语句对视图中的数据进行新增,修改和删除等操作.当视图中数据发生变化时,数据表中的数据也会发生变化,反之亦然.</p>
</blockquote>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 操作demo自行测试</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 先建立一个数据表,添加数据进去</span></span><br><span class="line"><span class="comment">-- 在创建一个视图</span></span><br><span class="line"><span class="comment">-- 对视图的数据进行增加,修改,删除等操作对比基表的数据变化</span></span><br><span class="line"><span class="comment">-- 对基表的数据进行增加,修改,删除等操作对比视图的数据变化</span></span><br></pre></td></tr></table></figure></div>

<h3 id="不可更新的视图"><a href="#不可更新的视图" class="headerlink" title="不可更新的视图"></a>不可更新的视图</h3><blockquote>
<p>要使视图可更新,视图中的行和底层基本表中的行之间必须存在一对一关系,另外当视图定义出现如下情况时,视图不支持更新操作:</p>
</blockquote>
<ul>
<li>在定义视图的时候,指定了”ALGORITHM &#x3D; TEMPTABLE” ,视图将不支持INSET和DELETE操作</li>
<li>视图中不包含基表中所有被定义为非空又为指定默认值的列,视图将不支持INSET操作</li>
<li>在定义视图的SELECT语句中使用了<code>JOIN联合查询</code>,视图将不支持INSET和DELETE操作</li>
<li>在定义视图的SELECT语句后的字段列表中使用了<code>数字表达式</code>或者<code>子查询</code>,视图将不支持INSET,也不支持UPDATE使用了数字表达式,子查询的字段值</li>
<li>在定义视图的SELECT语句后的字段列表中使用<code>DISTINCT</code>,<code>聚合函数</code>,<code>GROUP BY</code>,<code>HAVING</code>,<code>UNION</code>等,视图将不支持INSET,UPDATE,DELETE</li>
<li>在定义视图的SELECT语句中包含了子查询,而子查询中应用了FROM后面的表,视图将不支持INSET,UPDATE,DELETE</li>
<li>视图定义基于一个不可更新的视图</li>
<li>常量视图</li>
</ul>
<blockquote>
<h3 id="虽然可以更新视图数据-但总的来说-视图作为一个虚拟表-主要用于方便查询-不建议更新视图的数据-对视图数据的更改-都是通过对实际数据表里的数据操作来完成的"><a href="#虽然可以更新视图数据-但总的来说-视图作为一个虚拟表-主要用于方便查询-不建议更新视图的数据-对视图数据的更改-都是通过对实际数据表里的数据操作来完成的" class="headerlink" title="虽然可以更新视图数据,但总的来说,视图作为一个虚拟表,主要用于方便查询,不建议更新视图的数据,对视图数据的更改,都是通过对实际数据表里的数据操作来完成的"></a>虽然可以更新视图数据,但总的来说,视图作为一个<code>虚拟表</code>,主要用于<code>方便查询</code>,不建议更新视图的数据,<code>对视图数据的更改,都是通过对实际数据表里的数据操作来完成的</code></h3></blockquote>
<h2 id="修改-删除视图"><a href="#修改-删除视图" class="headerlink" title="修改,删除视图"></a>修改,删除视图</h2><h3 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h3><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 方式一: 使用CREATE OR REPLACE VIEW 子句 修改视图</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> <span class="string">&#x27;视图名称&#x27;</span></span><br><span class="line">(字段列表)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">(查询语句); # <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> 子句中各列的别名应和子查询中各列相对应</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式二: ALTER VIEW</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> 视图名称</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">查询语句;</span><br></pre></td></tr></table></figure></div>

<h3 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h3><ul>
<li>删除视图只是删除视图的定义,并不会删除基表的数据</li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除视图的语法是</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> IF <span class="keyword">EXISTS</span> <span class="string">&#x27;视图名称&#x27;</span>;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><h4 id="说明-基于视图a-b创建的视图c-如果将视图a或者视图b删除-会导致视图c的查询失败-这样的视图c需要手动删除或者修改-否则影响使用"><a href="#说明-基于视图a-b创建的视图c-如果将视图a或者视图b删除-会导致视图c的查询失败-这样的视图c需要手动删除或者修改-否则影响使用" class="headerlink" title="说明:基于视图a,b创建的视图c,如果将视图a或者视图b删除,会导致视图c的查询失败.这样的视图c需要手动删除或者修改,否则影响使用."></a>说明:基于视图a,b创建的视图c,如果将视图a或者视图b删除,会导致视图c的查询失败.这样的视图c需要手动删除或者修改,否则影响使用.</h4></li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>操作简单<ul>
<li>将经常使用的查询操作定义为视图,可以极大简化开发人员对数据库的操作</li>
</ul>
</li>
<li>减少数据冗余<ul>
<li>视图跟实际数据表不一样,它存储的是查询语句.所以,在使用的时候,我们通过定义视图的查询语句来获取结果集.而视图本身不存储数据,不占用数据存储的资源,减少数据冗余</li>
</ul>
</li>
<li>数据安全<ul>
<li>MySQL将用户对数据的访问限制在某些数据的结果集上.隔离了真实数据表</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
        <category>Basic</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL变量、流程控制、游标</title>
    <url>/GSSBlog/2023/10/30/9.MySQL%E5%8F%98%E9%87%8F,%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6,%E6%B8%B8%E6%A0%87/</url>
    <content><![CDATA[<blockquote>
<p>在MySQL数据库的存储过程和函数中,可以使用变量来存储查询或计算的中间结果数据,或者输出最终的结果数据</p>
<p>在MySQL数据库中,变量分为 <code>系统变量</code>以及<code>用户自定义变量</code></p>
</blockquote>
<h2 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h2><blockquote>
<p>系统变量有系统定义,属于<code>服务器</code>层面&#x2F;这些系统变量的值要么是<code>编译MySQL时参数</code>的默认值,要么是<code>配置文件(my.ini)</code>中的参数值;可以通过连接查看<code>https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html </code></p>
</blockquote>
<h3 id="系统变量分类"><a href="#系统变量分类" class="headerlink" title="系统变量分类"></a>系统变量分类</h3><blockquote>
<p>系统变量分为全局系统变量(需要添加<code>global</code>关键字)以及会话系统变量(需要添加<code>session</code>关键字);</p>
<p>全局系统变量也称为<code>全局变量</code>,会话系统变量也称为<code>local变量</code>;<code>如果不写,默认会话级别</code>;静态变量(在MySQL服务实例运行期间他们的值不能使用set动态修改)属于特殊的全局系统变量.</p>
</blockquote>
<ul>
<li>全局系统变量针对于所有会话(连接)有效,但<code>不能跨重启</code></li>
<li>会话系统变量仅针对于当前会话(连接)有效,会话期间,当前会话对某个会话系统变量值的修改,不会影响其他会话同一个会话系统变量的值</li>
<li>会话1对某个全局系统变量值的修改会导致会话2中同一个全局系统变量值的修改</li>
</ul>
<p>在MySQL中有些系统变量只能是全局的，例如 max_connections 用于限制服务器的最大连接数；有些系 统变量作用域既可以是全局又可以是会话，例如 character_set_client 用于设置客户端的字符集；有些系统变量的作用域只能是当前会话，例如 pseudo_thread_id 用于标记当前会话的 MySQL 连接 ID。 </p>
<h3 id="查看系统变量"><a href="#查看系统变量" class="headerlink" title="查看系统变量"></a>查看系统变量</h3><ul>
<li><p>查看所有或部分系统变量</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看所有全局变量</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> VARIABLES;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看所有会话变量</span></span><br><span class="line"><span class="keyword">SHOW</span> SESSION VARIABLES;</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看满足条件的部分系统变量</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%标识符%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看满足条件的部分会话变量</span></span><br><span class="line"><span class="keyword">SHOW</span> SESSION VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%标识符%&#x27;</span>;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看指定系统变量</p>
<blockquote>
<p>作为MySQL 编码规范,MySQL中的系统变量以<code>两个@</code>开头,其中<code>@@global</code>仅用于标记全局系统变量,<code>@@session</code>仅用于标记会话系统变量</p>
<p><code>@@</code>首先标记会话系统变量,如果会话系统变量不存在,则标记全局系统变量</p>
</blockquote>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看指定的系统变量的值</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@global</span>.变量名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看指定的会话变量的值</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@session</span>.变量名;</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">SELECT</span> @@变量名;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>修改系统变量的值</p>
<blockquote>
<p>有些时候,数据库管理员需要修改系统变量的默认值,以便修改当前会话或者MySQL服务实例的属性特性</p>
</blockquote>
<ul>
<li>方式一: 修改MySQL<code>配置文件</code>继而修改MySQL系统变量的值(该方法需要重启MySQL服务)</li>
<li>方式二: 在MySQL服务运行期间,使用”SET”命令重新设置系统变量的值</li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 为某个系统变量赋值</span></span><br><span class="line"><span class="comment">-- 方式1</span></span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@global</span>.变量名<span class="operator">=</span>变量值;</span><br><span class="line"><span class="comment">-- 方式2</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> 变量名<span class="operator">=</span>变量值;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 为某个会话变量赋值</span></span><br><span class="line"><span class="comment">-- 方式1</span></span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@session</span>.变量名<span class="operator">=</span>变量值;</span><br><span class="line"><span class="comment">--方式2</span></span><br><span class="line"><span class="keyword">SET</span> SESSION 变量名<span class="operator">=</span>变量值;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h2><h3 id="用户变量分类"><a href="#用户变量分类" class="headerlink" title="用户变量分类"></a>用户变量分类</h3><blockquote>
<p>用户变量是用户自己定义的,作为MySQL编码规范,MySQL的用户变量以<code>一个&quot;@&quot;</code>开头</p>
</blockquote>
<blockquote>
<p>根据作用范围不同,分为<code>会话用户变量</code>和<code>局部变量</code></p>
</blockquote>
<ul>
<li>会话用户变量: 作用域和会话变量一样,只对<code>当前连接</code>会话有效</li>
<li>局部变量: 只在 begin和end语句块中有效,局部变量只能在<code>存储过程和函数</code>中使用</li>
</ul>
<h3 id="会话用户变量"><a href="#会话用户变量" class="headerlink" title="会话用户变量"></a>会话用户变量</h3><ul>
<li><p>变量定义</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 方式一: &quot;=&quot;或者&quot;:=&quot;</span></span><br><span class="line"><span class="keyword">SET</span> @用户变量 <span class="operator">=</span> 值;</span><br><span class="line"><span class="keyword">SET</span> @用户变量 :<span class="operator">=</span> 值;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式二: &quot;:=&quot;或者 INTO 关键字</span></span><br><span class="line"><span class="keyword">SELECT</span> @用户变量 :<span class="operator">=</span> 表达式 [<span class="keyword">FROM</span> 等子句]</span><br><span class="line"><span class="keyword">SELECT</span> 表达式 <span class="keyword">INTO</span> @用户变量 [<span class="keyword">FROM</span> 等子句]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看用户变量的值 (查看,比较,运算等)</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 结构语句</span></span><br><span class="line"><span class="keyword">SELECT</span> @用户变量</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 举例</span></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@a</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@num</span> :<span class="operator">=</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@num</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@big</span>; <span class="comment">-- 查看某个未声明的变量时,将得到 NULL 值</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><blockquote>
<p>定义方式: 使用<code>DECLARE</code>语句定义一个局部变量</p>
<p>作用域: 仅仅在定义它的<code>BEGIN ... END</code>中有效</p>
<p>位置: 只能放在<code>BEGIN ... END</code>中,而且只能放在第一句</p>
</blockquote>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 示例</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="comment">-- 声明局部变量</span></span><br><span class="line">	<span class="keyword">DECLARE</span> 变量名<span class="number">1</span> 变量数据类型 [<span class="keyword">DEFAULT</span> 变量默认值];</span><br><span class="line">	<span class="keyword">DECLARE</span> 变量名<span class="number">2</span> 变量数据类型 [<span class="keyword">DEFAULT</span> 变量默认值];</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- 为局部变量赋值</span></span><br><span class="line">	<span class="keyword">SET</span> 变量名<span class="number">1</span> <span class="operator">=</span> <span class="string">&#x27;值&#x27;</span>;</span><br><span class="line">	<span class="keyword">SELECT</span> 值 <span class="keyword">INTO</span> 变量名<span class="number">2</span> [<span class="keyword">FROM</span> 子句];</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- 查看局部变量的值</span></span><br><span class="line">	<span class="keyword">SELECT</span> 变量<span class="number">1</span>, 变量<span class="number">2</span>, 变量<span class="number">3</span>;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>定义变量</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> 变量名 类型 [<span class="keyword">DEFAULT</span> 值]; <span class="comment">-- 如果没有DEFAULT子句,初始值为 NULL;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>变量赋值</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 方式一: 一般用于赋简单的值</span></span><br><span class="line"><span class="keyword">SET</span> 变量名 <span class="operator">=</span> 值;</span><br><span class="line"><span class="keyword">SET</span> 变量名 :<span class="operator">=</span> 值;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式二: 一般用于赋表中的字段值</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段名或者表达式 <span class="keyword">INTO</span> 变量名 <span class="keyword">FROM</span> 表;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>使用变量 (查看,比较,运算等)</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 局部变量名;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="对比会话用户变量和局部变量"><a href="#对比会话用户变量和局部变量" class="headerlink" title="对比会话用户变量和局部变量"></a>对比会话用户变量和局部变量</h3><table>
<thead>
<tr>
<th></th>
<th>作用域</th>
<th>定义位置</th>
<th>语法</th>
</tr>
</thead>
<tbody><tr>
<td>会话用户变量</td>
<td>当前会话</td>
<td>会话的任何地方</td>
<td>加@符号,不用指定类型</td>
</tr>
<tr>
<td>局部变量</td>
<td>定义它的BEGIN .. END中</td>
<td>BEGIN .. END 的第一句</td>
<td>一般不用加@符号,需要指定类型</td>
</tr>
</tbody></table>
<h1 id="定义条件与处理程序"><a href="#定义条件与处理程序" class="headerlink" title="定义条件与处理程序"></a>定义条件与处理程序</h1><blockquote>
<p>定义条件是事先定义程序执行过程中可能遇到的问题,处理程序定义了在遇到问题时应当采取的处理方式,并且保证存储过程或函数在遇到警告或错误时能够继续执行.这样可以增强程序处理问题的能力,避免程序异常停止运行</p>
<p>说明: 定义条件和处理程序在存储过程,存储函数中都是支持的</p>
</blockquote>
<h2 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h2><blockquote>
<p>案例分析: 创建一个名称为 “UpdateDataNoCondition”的存储过程;代码如下</p>
</blockquote>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建存储过程</span></span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> UpdateDataNoCondition()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SET</span> <span class="variable">@x</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> email <span class="operator">=</span> <span class="keyword">NULL</span> <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span>;</span><br><span class="line">	<span class="keyword">SET</span> <span class="variable">@x</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> email <span class="operator">=</span> <span class="string">&#x27;abc&#x27;</span> <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span>;</span><br><span class="line">	<span class="keyword">SET</span> <span class="variable">@x</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMTER ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用存储过程</span></span><br><span class="line"><span class="keyword">CALL</span> UpdateDataNoCondition();</span><br><span class="line"><span class="comment">-- 执行报错 ERROR 1048 (23000): Column &#x27;email&#x27; cannot be null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看执行结果</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@X</span>;</span><br><span class="line"><span class="comment">-- 结果  x = 1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>结论: 此时@x变量的值为1.结合创建存储过程的sql语句代码可以得出:储存过程中未定义条件和处理程序,且当存储过程中执行的sql语句报错时,mysql数据库会抛出错误,并退出当前sql逻辑,不再向下继续执行</p>
</blockquote>
<h2 id="定义条件"><a href="#定义条件" class="headerlink" title="定义条件"></a>定义条件</h2><blockquote>
<p>定义条件就是给mysql中的错误码命名,这有助于存储的程序代码更清晰.它将一个<code>错误名字</code>和<code>指定的错误条件</code>关联起来.这个名字可以随后被用在定义处理程序的<code>DECLARE HANDLER</code>语句中</p>
</blockquote>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 定义条件 使用 DECLARE 语句,语法格式:</span></span><br><span class="line"><span class="keyword">DECLARE</span> 错误名称 <span class="keyword">CONDITION</span> <span class="keyword">FOR</span> 错误码(或错误条件);</span><br></pre></td></tr></table></figure></div>

<blockquote>
<h3 id="错误码说明"><a href="#错误码说明" class="headerlink" title="错误码说明"></a>错误码说明</h3></blockquote>
<ul>
<li><code>MySQL_error_code</code>和<code>sqlstate_value</code>都可以表示MySQL的错误<ul>
<li>MySQL_error_code 是数值类型错误代码</li>
<li>sqlstate_value 是长度为5的字符串类型错误代码</li>
</ul>
</li>
<li>例如: 在ERROR 1418 (HY00) 中, 1418 是MySQL_error_code, “HY000”是sqlstate_value</li>
</ul>
<blockquote>
<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3></blockquote>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 定义 &quot;Field_Not_Be_NULL&quot; 错误名与MySQL中违反非空约束的错误类型是&quot;ERROR 1048 (2300)&quot;对应</span></span><br><span class="line"><span class="comment">-- 使用MySQL_error_code</span></span><br><span class="line"><span class="keyword">DECLARE</span> Field_Not_Be_NULL <span class="keyword">CONDITION</span> <span class="keyword">FOR</span> <span class="number">1048</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用sqlstate_value</span></span><br><span class="line"><span class="keyword">DECLARE</span> Field_Not_Be_NULL <span class="keyword">CONDITION</span> <span class="keyword">FOR</span> <span class="keyword">SQLSTATE</span> &quot;23000&quot;;</span><br></pre></td></tr></table></figure></div>

<h2 id="定义处理程序"><a href="#定义处理程序" class="headerlink" title="定义处理程序"></a>定义处理程序</h2><blockquote>
<p>可以为SQL执行过程中发生的某种类型的错误定义特殊的处理程序.定义处理程序时,使用 DECLARE 语句</p>
</blockquote>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法结构</span></span><br><span class="line"><span class="keyword">DECLARE</span> 处理方式 HANDLER <span class="keyword">FOR</span> 错误类型 处理语句;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>处理方式: 处理方式有3个取值: CONTINUE, EXIT, UNDO.<ul>
<li><code>CONTINUE</code>: 表示遇到错误不处理,继续执行</li>
<li><code>EXIT</code>: 表示遇到错误马上退出</li>
<li><code>UNDO</code>: 表示遇到错误后撤回之前的操作.MySQL中暂时不支持这样的操作.</li>
</ul>
</li>
<li>错误类型(即条件) 可以有如下取值:<ul>
<li><code>SQLSTATE &#39;字符串错误码&#39;</code>: 表示长度为5的sqlstate_value类型的错误代码</li>
<li><code>MySQL_error_code</code>: 匹配数值类型错误代码</li>
<li><code>错误名称</code>: 表示 DECLARE … CONDITION 定义的错误条件名称</li>
<li><code>SQLWARNING</code>: 匹配所有以 01 开头的 SQLSTATE 错误代码</li>
</ul>
</li>
<li>处理语句: 如果出现上述条件之一,则采用对应的处理方式,并执行指定的处理语句.语句可以是像<code> SET 变量 = 值</code>这样简单语句,也可以是使用<code>BEGIN ... END</code>编写的复合语句</li>
</ul>
<blockquote>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3></blockquote>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 方式一: 捕获sqlstate_value</span></span><br><span class="line"><span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;42S02&#x27;</span> <span class="keyword">SET</span> <span class="variable">@info</span> <span class="operator">=</span> <span class="string">&#x27;NO_SUCH_TABLE&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式二: 捕获mysql_error_code</span></span><br><span class="line"><span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="number">1146</span> <span class="keyword">SET</span> <span class="variable">@info</span> <span class="operator">=</span> <span class="string">&#x27;NO_SUCH_TABLE&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式三: 先定义条件,再调用</span></span><br><span class="line"><span class="keyword">DECLARE</span> no_such_table <span class="keyword">CONDITION</span> <span class="keyword">FOR</span> <span class="number">1146</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> NO_SHCH_TABLE <span class="keyword">SET</span> <span class="variable">@info</span> <span class="operator">=</span> <span class="string">&#x27;NO_SUCH_TABLE&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式四: 使用sqlwarning</span></span><br><span class="line"><span class="keyword">DECLARE</span> EXIT HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLWARNING</span> <span class="keyword">SET</span> <span class="variable">@info</span> <span class="operator">=</span> <span class="string">&#x27;ERROR&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式五: 使用 NOT FOUND</span></span><br><span class="line"><span class="keyword">DECLARE</span> EXIT HANDLER <span class="keyword">FOR</span> <span class="keyword">NOT</span> FOUND <span class="keyword">SET</span> <span class="variable">@info</span> <span class="operator">=</span> <span class="string">&#x27;NO_SUCH_TABLE&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式六: 使用SQLEXCEPTION</span></span><br><span class="line"><span class="keyword">DECLARE</span> EXIT HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLEXCEPTION</span> <span class="keyword">SET</span> <span class="variable">@info</span> <span class="operator">=</span> <span class="string">&#x27;ERROR&#x27;</span>;</span><br></pre></td></tr></table></figure></div>

<h2 id="案例解决"><a href="#案例解决" class="headerlink" title="案例解决"></a>案例解决</h2><blockquote>
<p>在存储过程中,定义处理程序,捕获sqlstate_value值,当遇到MySQL_error_code值为1048时,执行CONTINUE操作,并且将@proc_value值设置为-1</p>
</blockquote>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建存储过程,加入处理程序</span></span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> UpdateDataNoCondition ()</span><br><span class="line">	<span class="keyword">BEGIN</span></span><br><span class="line">		<span class="comment">-- 定义处理程序</span></span><br><span class="line">        <span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="number">1048</span> <span class="keyword">SET</span> <span class="variable">@proc_value</span> <span class="operator">=</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">SET</span> <span class="variable">@x</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> email <span class="operator">=</span> <span class="keyword">NULL</span> <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span>;</span><br><span class="line">        <span class="keyword">SET</span> <span class="variable">@x</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> email <span class="operator">=</span> <span class="string">&#x27;abc@126.com&#x27;</span> <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span>;</span><br><span class="line">        <span class="keyword">SET</span> <span class="variable">@x</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用存储过程</span></span><br><span class="line"><span class="keyword">CALL</span> UpdateDataNoCondition();</span><br><span class="line"><span class="comment">-- 查看变量</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@x</span>,<span class="variable">@proc_value</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="variable">@x</span> <span class="operator">|</span> <span class="variable">@proc_value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>  <span class="operator">|</span> <span class="number">-1</span>          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+</span></span><br></pre></td></tr></table></figure></div>

<h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="分支结构之IF"><a href="#分支结构之IF" class="headerlink" title="分支结构之IF"></a>分支结构之IF</h2><ul>
<li><p>IF语句的语法结构</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">IF 表达式<span class="number">1</span> <span class="keyword">THEN</span> 操作<span class="number">1</span></span><br><span class="line">[ELSEIF 表达式<span class="number">2</span> <span class="keyword">THEN</span> 操作<span class="number">2</span>] ...</span><br><span class="line">[<span class="keyword">ELSE</span> 操作N]</span><br><span class="line"><span class="keyword">END</span> IF</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>根据表达式的结果为TRUE或者FALSE执行相应的语句,’[]’中的内容是可选的</p>
</blockquote>
<ul>
<li><p>特点: 1不同的表达式对应不同的操作;2使用在begin end 中</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 举例</span></span><br><span class="line">IF val <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line">	<span class="keyword">THEN</span> <span class="keyword">SELECT</span> <span class="string">&#x27;val is null&#x27;</span>;</span><br><span class="line"><span class="keyword">ELSE</span> <span class="keyword">SELECT</span> <span class="string">&#x27;val is not null&#x27;</span>;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
</ul>
<h2 id="分支结构之CASE"><a href="#分支结构之CASE" class="headerlink" title="分支结构之CASE"></a>分支结构之CASE</h2><ul>
<li><p>CASE语句的语法结构</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 情况一: 类似于switch</span></span><br><span class="line"><span class="keyword">CASE</span> 表达式</span><br><span class="line"><span class="keyword">WHEN</span> 值<span class="number">1</span> <span class="keyword">THEN</span> 结果<span class="number">1</span>或者语句<span class="number">1</span>(如果是语句,需要加分号)</span><br><span class="line"><span class="keyword">WHEN</span> 值<span class="number">2</span> <span class="keyword">THEN</span> 结果<span class="number">2</span>或者语句<span class="number">2</span>(如果是语句,需要加分号)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">ELSE</span> 结果n或者语句n(如果是语句,需要加分号)</span><br><span class="line"><span class="keyword">END</span> [<span class="keyword">case</span>] (如果是放在<span class="keyword">begin</span> <span class="keyword">end</span> 中需要加上<span class="keyword">case</span>,如果放在<span class="keyword">SELECT</span>后面不需要)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 情况二: 类似于多重if</span></span><br><span class="line"><span class="keyword">CASE</span></span><br><span class="line"><span class="keyword">WHEN</span> 条件<span class="number">1</span> <span class="keyword">THEN</span> 结果<span class="number">1</span>或者语句<span class="number">1</span>(如果是语句,需要加分号)</span><br><span class="line"><span class="keyword">WHEN</span> 条件<span class="number">2</span> <span class="keyword">THEN</span> 结果<span class="number">2</span>或者语句<span class="number">2</span>(如果是语句,需要加分号)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">ELSE</span> 结果n或者语句n(如果是语句,需要加分号)</span><br><span class="line"><span class="keyword">END</span> [<span class="keyword">CASE</span>] (如果是放在 <span class="keyword">begin</span> <span class="keyword">end</span> 中需要加上 <span class="keyword">CASE</span> ,如果放在<span class="keyword">select</span>中则不需要)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 举例</span></span><br><span class="line"><span class="keyword">CASE</span> val</span><br><span class="line">	<span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> <span class="keyword">SELECT</span> <span class="string">&#x27;val is 1&#x27;</span>;</span><br><span class="line">	<span class="keyword">WHEN</span> <span class="number">2</span> <span class="keyword">THEN</span> <span class="keyword">SELECT</span> <span class="string">&#x27;val is 2&#x27;</span>;</span><br><span class="line">	<span class="keyword">ELSE</span> <span class="keyword">SELECT</span> <span class="string">&#x27;val is not 1 or 2&#x27;</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h1 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h1>]]></content>
      <categories>
        <category>MySQL</category>
        <category>Basic</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL存储过程(PROCEDURE)</title>
    <url>/GSSBlog/2023/10/30/8.MySQL%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="存储过程概述"><a href="#存储过程概述" class="headerlink" title="存储过程概述"></a>存储过程概述</h2><blockquote>
<p>含义: 存储过程的英文是<code>stored procedure</code>,它的思想很简单,就是一组经过<code>预先编译</code>的SQL语句的封装</p>
</blockquote>
<ul>
<li><p>执行过程</p>
<ul>
<li>存储过程预先存储在MySQL服务器上,需要执行的时候,客户端只需要向服务器端发出调用存储过程的命令,服务器端就可以把预先存储好的这一系列的SQL语句全部执行</li>
</ul>
</li>
<li><p>好处</p>
<ul>
<li>简化操作,提高sql语句的重用性,减少了开发程序员的压力</li>
<li>减少操作过程的失误,提高效率</li>
<li>减少网络传输量(客户端不需要把所有的sql语句通过网络发给客户端)</li>
<li>减少了sql语句暴露在网上的风险,也提高了数据查询的安全性</li>
</ul>
</li>
<li><p>分类</p>
<blockquote>
<p>存储过程的参数类型可以是<code>IN</code>,<code>OUT</code>和<code>INOUT</code></p>
</blockquote>
<ul>
<li>没有参数(无参无返回值)</li>
<li>仅仅带 IN 类型 (有参无返回值)</li>
<li>仅仅带 OUT 类型(无参有返回值)</li>
<li>有 IN 类型也有 OUT 类型 (有参有返回值)</li>
<li>带 INOUT 类型(有参有返回值)</li>
</ul>
</li>
</ul>
<h2 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h2><ul>
<li><p>创建语法</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名( <span class="keyword">IN</span><span class="operator">|</span> <span class="keyword">OUT</span><span class="operator">|</span> <span class="keyword">INOUT</span> 参数名 参数类型, ...)</span><br><span class="line">[characteristics]</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	存储过程体</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure></div>

<p>参数解析</p>
<ul>
<li><code>IN</code>:表示入参</li>
<li><code>OUT</code>:表示出参</li>
<li><code>INOUT</code>: 表示当前参数可是出参,也可以是入参</li>
</ul>
<blockquote>
<p>形参类型可以是mysql数据库中的任意类型</p>
</blockquote>
<p><code>characteristics</code>表示创建存储过程时指定对存储过程的约束条件,取值有</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">LANGUAGE</span> <span class="keyword">SQL</span></span><br><span class="line"><span class="operator">|</span> [<span class="keyword">NOT</span>] <span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="operator">|</span> &#123; <span class="keyword">CONTAINS</span> <span class="keyword">SQL</span> <span class="operator">|</span> <span class="keyword">NO</span> <span class="keyword">SQL</span> <span class="operator">|</span> <span class="keyword">READS</span> <span class="keyword">SQL</span> DATA <span class="operator">|</span> <span class="keyword">MODIFIES</span> <span class="keyword">SQL</span> DATA&#125;</span><br><span class="line"><span class="operator">|</span> <span class="keyword">SQL</span> SECURITY &#123;DEFINER <span class="operator">|</span> INVOKER&#125;</span><br><span class="line"><span class="operator">|</span> COMMENT <span class="string">&#x27;STRING&#x27;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>LANGUAGE SQL</code>: 说明存储过程执行体是由sql组成的,当前系统支持的语言为sql</li>
<li><code>[NOT] DETERMINISTIC</code>: 指明存储过程执行的结果是否确定. DETERMINISTIC 表示结果是确定的.每次执行存储过程时,相同的输入会得到相同的输出. NOT DETERMINISTIC 表示结果是不确定的,相同的输入可能得到不同的输出.如果没有指定任意一个值,默认为<code>NOT DETERMINISTIC</code></li>
<li><code>&#123; CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA&#125;</code>:指明子程序使用sql语句的限制<ul>
<li><code>CONTAINS SQL</code>表示当前存储过程的子程序包含sql语句,但是并不包含读写数据的sql语句</li>
<li><code>NO SQL</code>表示当前存储过程的子程序不包含任何sql语句</li>
<li><code>READS SQL DATA</code>表示当前存储过程的子程序中包含读数据的sql语句</li>
<li><code>MODIFIES SQL DATA</code>表示当前存储过程的子程序中包含写数据的sql语句</li>
<li>默认情况下 系统会指定为 CONTAINS SQL</li>
</ul>
</li>
<li><code>SQL SECURITY &#123;DEFINER | INVOKER&#125;</code>执行当前存储过程的权限,即指明哪些用户能够执行当前的存储过程<ul>
<li><code>DEFINER</code>表示只有当前存储过程的创建者或者定义者才能执行当前存储过程</li>
<li><code>INVOKER</code>表示拥有当前存储过程的访问权限的用户能够执行当前存储过程</li>
<li>如果没有设置相关的值,则MySQL默认指定为<code>DERFINER</code></li>
</ul>
</li>
<li><code>COMMENT &#39;STRING&#39;</code>:注释信息,可以用来描述存储过程</li>
</ul>
<blockquote>
<p>存储过程体中可以有多条sql语句,如果仅仅一条sql语句,则可以省略 begin 和 end</p>
</blockquote>
<p>编写存储过程并不是一件简单的事,可能存储过程中需要复杂的sql语句</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">begin</span> ... <span class="keyword">end</span> : <span class="keyword">begin</span> ... <span class="keyword">end</span> 中间包含多个语句,每个语句都以(;)号为结束符</span><br><span class="line"><span class="number">2.</span> <span class="keyword">declare</span>: 用来声明变量,使用的位置位于 <span class="keyword">begin</span> ..<span class="keyword">end</span> 语句中间,而且需要在其它语句使用之前进行变量的声明</span><br><span class="line"><span class="number">3.</span> <span class="keyword">set</span>:赋值语句,用于对变量进行赋值</span><br><span class="line"><span class="number">4.</span> <span class="keyword">select</span> ... <span class="keyword">into</span> : 把从数据表中查询的结果存放到变量中,也就是为变量赋值</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>需要设置新的结束标记</p>
</blockquote>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER 新的结束标记</span><br><span class="line"><span class="comment">-- 因为mysql默认的语句结束符号是&quot;;&quot;,为了避免与存储过程中sql语句结束符冲突,需要使用 delimiter 改变存储过程的结束符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 比如: &quot;delimiter // &quot;语句的作用就是将mysql的结束符设置为 // ,并以 &quot;end //&quot;结束存储过程</span></span><br><span class="line"><span class="comment">-- 当使用DELIMITER命令时，应该避免使用反斜杠（‘\’）字符，因为反斜线是MySQL的转义字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 实例</span></span><br><span class="line">DELIMTER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名(<span class="keyword">IN</span><span class="operator">|</span><span class="keyword">OUT</span><span class="operator">|</span><span class="keyword">INOUT</span> 参数名 参数类型, ...)</span><br><span class="line">[characteristic]</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SQL</span> 语句<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">SQL</span> 语句<span class="number">2</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h2><h3 id="调用格式"><a href="#调用格式" class="headerlink" title="调用格式"></a>调用格式</h3><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 存储过程有多种调用方法.存储过程必须使用 CALL 语句调用,并且存储过程和数据库相关.如果要执行其他数据库中的存储过程,需要指定数据库名称;如: CALL dbname.procname.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> 存储过程名(实参列表)</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>方式1: IN方法</p>
</blockquote>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span> SP1(<span class="string">&#x27;值&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>方式2: OUT方法</p>
</blockquote>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="variable">@name</span>;</span><br><span class="line"><span class="keyword">CALL</span> sp2(<span class="variable">@name</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@name</span>;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>方式3: INOUT方法</p>
</blockquote>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="variable">@name</span><span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">CALL</span> sp3(<span class="variable">@name</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@name</span>;</span><br></pre></td></tr></table></figure></div>

<h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>在 MySQL 中，存储过程不像普通的编程语言（比如 VC++、Java 等）那样有专门的集成开发环境。因 </p>
<p>此，你可以通过 SELECT 语句，把程序执行的中间结果查询出来，来调试一个 SQL 语句的正确性。调试 </p>
<p>成功之后，把 SELECT 语句后移到下一个 SQL 语句之后，再调试下一个 SQL 语句。这样 逐步推进 ，就可 </p>
<p>以完成对存储过程中所有操作的调试了。当然，你也可以把存储过程中的 SQL 语句复制出来，逐段单独 </p>
<p>调试。</p>
<h1 id="存储函数"><a href="#存储函数" class="headerlink" title="存储函数"></a>存储函数</h1><h2 id="语法解析"><a href="#语法解析" class="headerlink" title="语法解析"></a>语法解析</h2><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法格式</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> 函数名 (参数名 参数类型 , ...)</span><br><span class="line"><span class="keyword">RETURNS</span> 返回值类型</span><br><span class="line">[characteristics ...]</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	函数体 <span class="comment">-- 函数体中肯定得有 return 语句</span></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure></div>

<p>说明:</p>
<p>1, 参数列表: 指定参数为 IN,OUT,INOUT只对procedure 是合法的, function 中总是默认为 in参数</p>
<p>2, returns type 语句表示函数返回数据的类型</p>
<p>3, characteristics 创建函数时指定的对函数的约束,取值与创建存储过程时相同</p>
<p>4, 函数体也可以用 begin .. end 来表示sql代码的开始和结束.如果函数体只有一条语句,可以省略 begin …end</p>
<h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><blockquote>
<p>在MySQL中,存储函数的使用方法与MySQL的内部函数的使用方式是一样的.换言之,用户自己定义的存储函数与MySQL内部函数是一个性质的.区别在于,存储函数是用户自己定义的,而内部函数是MySQL的开发者定义的</p>
</blockquote>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 函数名(实参列表)</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>注意: 如果在创建存储函数中报错 “you might want to use the less safe log_bin_trust_funtion_creators variable” 有两种处理方式</p>
<p>方式一: 加上必要的函数特性 “[NOT] DETERMINISTIC” 和 “{CONTAINS SQL | NOT SQL | READS SQL DATA | MODIFIES SQL DATA}”</p>
<p>方式二: 在服务端执行命令行  “SET GLOBAL log_bin_trust_funtion_creators &#x3D; 1”</p>
</blockquote>
<h2 id="对比存储过程和存储函数"><a href="#对比存储过程和存储函数" class="headerlink" title="对比存储过程和存储函数"></a>对比存储过程和存储函数</h2><table>
<thead>
<tr>
<th></th>
<th>关键字</th>
<th>调用语法</th>
<th>返回值</th>
<th>应用场景</th>
</tr>
</thead>
<tbody><tr>
<td>存储过程</td>
<td>PROCEDURE</td>
<td>CALL 存储过程()</td>
<td>理解为有0个或者多个</td>
<td>一般用于更新</td>
</tr>
<tr>
<td>存储函数</td>
<td>FUNCTION</td>
<td>SELECT 存储函数()</td>
<td>只能是一个</td>
<td>一般用于查询结果为一个值并返回时</td>
</tr>
</tbody></table>
<blockquote>
<p>此外,存储函数可以放在查询语句中使用,存储过程不行.反之,存储过程的功能更加强大,包括能够执行对表的操作(比如创建表,删除表)和事务操作,这些功能是存储函数不具备的</p>
</blockquote>
<h1 id="存储过程和函数的查看-修改-删除"><a href="#存储过程和函数的查看-修改-删除" class="headerlink" title="存储过程和函数的查看,修改,删除"></a>存储过程和函数的查看,修改,删除</h1><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><blockquote>
<p>创建完成过后,如何知道存储函数和存储过程是否成功了呢</p>
<p>用户可以使用 SHOW STATUS 语句或者	SHOW CREATE 语句来查看,也可以直接从系统的 information_schema 数据库中查询</p>
</blockquote>
<ul>
<li><p>使用SHOW CREATE 语句查看存储过程和函数的创建信息</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语句结构</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> &#123;<span class="keyword">PROCEDURE</span> <span class="operator">|</span> <span class="keyword">FUNCTION</span>&#125; 存储过程名或者函数名</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 举例</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> FUNCATION test_function \G;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>使用SHOW STATUS 语句查看存储过程和函数的状态信息</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法结构</span></span><br><span class="line"><span class="keyword">SHOW</span> &#123;<span class="keyword">PROCEDURE</span> <span class="operator">|</span> <span class="keyword">FUNCTION</span>&#125; STATUS [<span class="keyword">LIKE</span> <span class="string">&#x27;pattern&#x27;</span>]</span><br><span class="line"><span class="comment">-- 这个语句返回子程序的特征,如数据库,名字,类型,创建者以及创建和修改时间</span></span><br><span class="line"><span class="comment">-- [LIKE &#x27;pattern&#x27;]: 匹配存储过程或函数的名称,可以省略.当省略不写时,会列出MySQL数据库中存在的所有存储过程或函数的信息.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 举例</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">PROCEDURE</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;SELECT%&#x27;</span> \G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">Db: test_db</span><br><span class="line">Name: SelectAllData</span><br><span class="line">Type: <span class="keyword">PROCEDURE</span></span><br><span class="line">Definer: root<span class="variable">@localhost</span></span><br><span class="line">Modified: <span class="number">2021</span><span class="number">-10</span><span class="number">-16</span> <span class="number">15</span>:<span class="number">55</span>:<span class="number">07</span></span><br><span class="line">Created: <span class="number">2021</span><span class="number">-10</span><span class="number">-16</span> <span class="number">15</span>:<span class="number">55</span>:<span class="number">07</span></span><br><span class="line">Security_type: DEFINER</span><br><span class="line">Comment:</span><br><span class="line">character_set_client: utf8mb4</span><br><span class="line">collation_connection: utf8mb4_general_ci</span><br><span class="line">Database <span class="keyword">Collation</span>: utf8mb4_general_ci</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>从 information_schema.Routines表中查看存储过程和函数信息</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--Mysql中存储过程和函数的信息都存储在 information_schema 数据库下的 Routines 表中.可以通过查询该表的记录来查询存储过程和函数的信息</span></span><br><span class="line"><span class="comment">-- 语法结构</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.Routines</span><br><span class="line"><span class="keyword">WHERE</span> ROUTINE_NAME <span class="operator">=</span> <span class="string">&#x27;存储过程或函数名&#x27;</span> [<span class="keyword">AND</span> ROUTINE_TYPE <span class="operator">=</span> &#123;<span class="string">&#x27;PROCEDURE | FUNCTION&#x27;</span>&#125;];</span><br><span class="line"><span class="comment">-- 注意: 如果在MySQL数据库中存在存储过程和函数名称相同的情况,最好指定routine_type查询条件来说明查询的是存储过程还是函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 举例</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.Routines</span><br><span class="line"><span class="keyword">WHERE</span> ROUTINE_NAME <span class="operator">=</span><span class="string">&#x27;count_by_id&#x27;</span> <span class="keyword">AND</span> ROUTINE_TYPE <span class="operator">=</span> <span class="string">&#x27;FUNCTION&#x27;</span> \G</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><blockquote>
<p>修改存储过程或者函数,不影响存储过程或者函数功能,只是修改相关特性,使用ALTER 语句实现</p>
</blockquote>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法结构</span></span><br><span class="line"><span class="keyword">ALTER</span> &#123;<span class="keyword">PROCEDURE</span> <span class="operator">|</span> <span class="keyword">FUNCTION</span>&#125; 存储过程名或者存储函数名 [characteristic ...]</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 其中 characteristic 指定存储过程或者函数的特性,其读取信息与创建存储过程,函数时的取值信息略有不同</span></span><br><span class="line">&#123; CONSTAINS <span class="keyword">SQL</span> <span class="operator">|</span> <span class="keyword">NO</span> <span class="keyword">SQL</span> <span class="operator">|</span> <span class="keyword">READS</span> <span class="keyword">SQL</span> DATA <span class="operator">|</span> <span class="keyword">MODIFIES</span> <span class="keyword">SQL</span> DATA&#125;</span><br><span class="line"><span class="operator">|</span> <span class="keyword">SQL</span> SECURITY &#123; DEFINER <span class="operator">|</span> INVOKER&#125;</span><br><span class="line"><span class="operator">|</span> COMMENT <span class="string">&#x27;string&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改存储过程使用`ALTER PROCEDURE`语句,修改存储函数使用`ALTER FUNCTION`语句.但是,这两个语句的结构是一样的,语句中的所有参数也是一样的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 举例</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">PROCEDURE</span> countProc</span><br><span class="line"><span class="keyword">MODIFIES</span> <span class="keyword">SQL</span> DATA</span><br><span class="line"><span class="keyword">SQL</span> SECURITY INVOKER;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改后查询</span></span><br><span class="line"><span class="keyword">SELECT</span> specific_name, sql_data_access, security_type</span><br><span class="line"><span class="keyword">FROM</span> information_schema.<span class="string">&#x27;ROUTINES&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> routine_name <span class="operator">=</span> <span class="string">&#x27;countProc&#x27;</span> ADN routine_type <span class="operator">=</span> <span class="string">&#x27;PROCEDURE&#x27;</span>;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>CONSTAINS SQL</code>: 表示子程序包含sql语句,但不包含读或者写数据的语句</li>
<li><code>NO SQL</code>: 表示子程序不包含sql语句</li>
<li><code>READS SQL DATA</code>: 表示子程序中包含读数据的语句</li>
<li><code>MODIFIES SQL DATA</code>: 表示子程序中包含写数据的语句</li>
<li><code>SQL SECURITY &#123;DEFINER | INVOKER&#125;</code>:指明谁有权限来执行<ul>
<li><code>DEFINER</code>: 表示只有定义者自己才能执行</li>
<li><code>INVOKER</code>: 表示调用者可以执行</li>
</ul>
</li>
<li><code>COMMENT &#39;string&#39; </code>: 表示注释信息</li>
</ul>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><blockquote>
<p>删除存储过程和函数,可以使用 drop 语句</p>
</blockquote>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法结构</span></span><br><span class="line"><span class="keyword">DROP</span> &#123;<span class="keyword">PROCEDURE</span> <span class="operator">|</span> <span class="keyword">FUNCTION</span>&#125; [IF <span class="keyword">EXISTS</span>] 存储过程或函数的名</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>IF EXISTS</code>: 如果程序或者函数不存在,它可以防止发生错误,产生一个用SHOW WARNINGS查看的警告</li>
</ul>
<h1 id="存储过程的优缺点"><a href="#存储过程的优缺点" class="headerlink" title="存储过程的优缺点"></a>存储过程的优缺点</h1><blockquote>
<p>存储过程的使用,一直存在很多争议.比如有些公司对于大型项目要求使用存储过程,而有些公司是明确禁止使用存储过程的.</p>
</blockquote>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li><code>存储过程可以一次编译多次使用</code>.存储过程只在创建时进行编译,之后的使用都不需要重新编译,可以提升sql的执行效率</li>
<li><code>可以减少开发工作量</code>将代码封装成模块,实际上是编程的核心思想之一,这样可以把复杂的问题拆解成不同的模块,然后模块之间可以重复使用,在减少开发工作量的同时,还能保证代码的结构清晰</li>
<li><code>存储过程的安全性强</code>.我们在设定存储过程的时候可以<code>设置对用户的使用权限</code>,这样就和视图一样具有较强的安全性</li>
<li><code>可以减少网络传输量</code>.因为代码封装到存储过程中,每次使用只需要调用存储过程即可,这样就可以减少网络传输量</li>
<li><code>良好的封装性</code>.在进行相对复杂的数据库操作时,原本需要一条一条的sql语句,可能要连接多次数据库才能完成的操作,现在变成了一次存储过程,只需要<code>连接一次即可</code></li>
</ul>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><blockquote>
<p>基于上面这些优点，不少大公司都要求大型项目使用存储过程，比如微软、IBM 等公司。但是国内的阿里并不推荐开发人员使用存储过程，这是为什么呢？</p>
<p>阿里开发规范 </p>
<p>【强制】禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。 </p>
</blockquote>
<ul>
<li><code>可移植性差</code> 存储过程不能跨数据库移植,比如在 MySQL,Oracle 和 SQL Server 里编写的存储过程,再换成其他数据库时就需要重新编写</li>
<li><code>调试困难</code>,只有少数的DBMS支持存储过程的调试,对于复杂的存储过程来说,开发和维护都不容易,虽然也有一些第三方工具可以对存储过程进行调试,但是收费</li>
<li><code>存储过程的版本管理很困难</code>.比如数据表索引发生变化了,可能会导致存储过程失效,我们在开发软件的时候往往需要进行版本管理,但是存储过程本身没有版本控制,版本迭代更新很麻烦</li>
<li><code>它不适合高并发的场景</code>.高并发的场景需要减少数据库的压力,有时数据库会采用分库分表的方式,而且对可扩展性要求很高,在这种情况下,存储过程会变得难以维护,<code>增加数据库的压力</code>,显然就不适用了</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
        <category>Basic</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL服务安装配置</title>
    <url>/GSSBlog/2023/10/30/0.0.CentOS%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</url>
    <content><![CDATA[<ul>
<li><h3 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/hostname</span><br></pre></td></tr></table></figure></div>
</li>
<li><h3 id="重启虚拟机"><a href="#重启虚拟机" class="headerlink" title="重启虚拟机"></a>重启虚拟机</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure></div>
</li>
<li><h3 id="修改IP地址"><a href="#修改IP地址" class="headerlink" title="修改IP地址"></a>修改IP地址</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line"></span><br><span class="line"><span class="comment">## 需要重启网络</span></span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure></div>
</li>
<li><h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 网卡1: Intel PRO/1000 NT 桌面 (网络地址转换NAT)</span></span><br><span class="line"><span class="comment">## 网卡2: Intel PRO/1000 NT 桌面 (仅主机(Host-Only)网络,`VirtualBox Host-Only Ethernet Adapter #2`)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 网卡配置</span></span><br><span class="line"><span class="comment">#### ifcfg-enp0s3</span></span><br><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=dhcp</span><br><span class="line">DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=<span class="built_in">yes</span></span><br><span class="line">IPV6_AUTOCONF=<span class="built_in">yes</span></span><br><span class="line">IPV6_DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=enp0s3</span><br><span class="line">UUID=4259702f-ac5e-4d2d-b40f-5f54c5835fdf</span><br><span class="line">DEVICE=enp0s3</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### ifcfg-enp0s8</span></span><br><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=<span class="built_in">yes</span></span><br><span class="line">IPV6_AUTOCONF=<span class="built_in">yes</span></span><br><span class="line">IPV6_DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=enp0s8</span><br><span class="line">UUID=a06102b9-85fa-4548-b759-961475ae6e5c</span><br><span class="line">DEVICE=enp0s8</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line">IPADDR=192.168.33.103</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.33.2</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置yum源</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 备份 yum源</span></span><br><span class="line"><span class="built_in">mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用新 yum 源</span></span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.163.com/.help/CentOS7-Base-163.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成缓存</span></span><br><span class="line">yum makecache</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h1 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h1><blockquote>
<h2 id="vmare准备"><a href="#vmare准备" class="headerlink" title="vmare准备"></a>vmare准备</h2><p><strong>VMware 16 下载地址：</strong><br><a class="link"   href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html" >https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<blockquote>
<h2 id="CentOS7准备"><a href="#CentOS7准备" class="headerlink" title="CentOS7准备"></a>CentOS7准备</h2><h3 id="centos7下载源"><a href="#centos7下载源" class="headerlink" title="centos7下载源"></a>centos7下载源</h3><p>linux源: <a class="link"   href="http://isoredirect.centos.org/centos/7/isos/x86_64/" >http://isoredirect.centos.org/centos/7/isos/x86_64/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>阿里服务源: <a class="link"   href="http://mirrors.aliyun.com/centos/7/isos/x86_64/" >http://mirrors.aliyun.com/centos/7/isos/x86_64/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<ul>
<li><p>使用VirtualBox下安装CentOS7</p>
<ul>
<li><p>新建虚拟机</p>
</li>
<li><p>选择CentOS7.iso文件</p>
</li>
<li><p>开通第二个虚拟网卡</p>
</li>
<li><p>运行虚拟机</p>
</li>
<li><p>配置账号</p>
</li>
<li><p>登录账号</p>
</li>
<li><p>修改动态ip</p>
<ul>
<li><p><code>/etc/sysconfig/network-scripts</code>文件下<code>ifcfg-enp0s3</code>,<code>ifcfg-enpos8</code>两文件</p>
<ul>
<li><p><code>ifcfg-enp0s3</code>文件不需要动</p>
</li>
<li><p><code>ifcfg-enp0s8</code>修改</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static  <span class="comment"># 需要修改</span></span><br><span class="line">DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=<span class="built_in">yes</span></span><br><span class="line">IPV6_AUTOCONF=<span class="built_in">yes</span></span><br><span class="line">IPV6_DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=2c2371f1-ef29-4514-a568-c4904bd11c82</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=<span class="literal">true</span>  <span class="comment"># 需要修改</span></span><br><span class="line"><span class="comment">## 添加一下配置</span></span><br><span class="line">IPADDR=192.168.23.129   --&gt;对应子网ip地址</span><br><span class="line">NETMASK=255.255.255.0    --&gt;子网掩码地址</span><br><span class="line">GATEWAY=192.168.73.254    --&gt;网关对应子网ip</span><br><span class="line">DNS1=192.168.73.254       --&gt;对应网关ip <span class="comment"># 选填</span></span><br><span class="line">DNS2=114.14.114.114        --&gt;固定ip <span class="comment"># 选填</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
<li><p>重启网卡</p>
<ul>
<li>执行命令<code>service network restart</code></li>
</ul>
</li>
</ul>
</li>
<li><p>ping 物理机是否成功</p>
</li>
<li><p>物理机ping虚拟机是否成功</p>
</li>
<li><p>完成</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
        <category>Advanced</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL服务安装包下载</title>
    <url>/GSSBlog/2023/10/30/0.01.%E4%B8%8B%E8%BD%BDMySQL%E5%AE%89%E8%A3%85%E5%8C%85/</url>
    <content><![CDATA[<h2 id="MySQL的4大版本"><a href="#MySQL的4大版本" class="headerlink" title="MySQL的4大版本"></a>MySQL的4大版本</h2><ul>
<li><code>MySQL Community Server</code>社区版本,开源免费,自由下载,但不提供官方技术支持,适用于大多数普通用户</li>
<li><code>MySQL Enterprise Edition</code>企业版本,需付费,不能在线下载,可以试用30天.提供了更多的功能和更完备的技术支持,更适合于对数据库的功能和可靠性要求较高的企业客户</li>
<li><code>MySQL Cluster</code>集群版,开源免费,用于架设集群服务器,可将几个MySQL Server 封装成一个Server.需要在社区版或企业版的基础上试用</li>
<li><code>MySQL Cluster CGE</code>高级集群版,需要付费</li>
</ul>
<blockquote>
<h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><h3 id="官网-https-www-mysql-com"><a href="#官网-https-www-mysql-com" class="headerlink" title="官网: https://www.mysql.com/"></a>官网: <a class="link"   href="https://www.mysql.com/" >https://www.mysql.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3></blockquote>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul>
<li><p>打开官网</p>
</li>
<li><p>点击<code>MySQL Community Server</code></p>
</li>
<li><p>在General Availability(GA) Releases中选择适合的版本</p>
<ul>
<li><p>如果安装Windows 系统下MySQL ，推荐下载 MSI安装程序 ；点击 Go to Download Page 进行下载 </p>
<p>即可</p>
</li>
<li><p>Windows下的MySQL安装有两种安装程序</p>
<ul>
<li>mysql-installer-web-community-8.0.25.0.msi 下载程序大小：2.4M；安装时需要联网安装组件</li>
<li>mysql-installer-community-8.0.25.0.msi 下载程序大小：435.7M；安装时离线安装即可。推荐。</li>
</ul>
</li>
</ul>
</li>
<li><p>Linux系统下安装MySQL的几种方式</p>
<ul>
<li>Linux系统下安装软件的常用三种方式<ul>
<li>rpm命令安装</li>
<li>yum命令安装<ul>
<li>需要联网,从互联网获取yum源,直接试用yum命令安装</li>
</ul>
</li>
<li>编译安装源码包<ul>
<li>针对<code>tar.gz</code>这样的压缩包,要使用<code>tar</code>命令来解压</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>这里不能直接选择CentOS 7系统的版本，所以选择与之对应的 Red Hat Enterprise Linux </p>
</li>
<li><p><a class="link"   href="https://downloads.mysql.com/archives/community/" >https://downloads.mysql.com/archives/community/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 直接点Download下载RPM Bundle全量包。包括了所有下面的组件。不需要一个一个下载了。</p>
</li>
<li><p>下载后的zip压缩包,解压打开</p>
<ul>
<li>使用到压缩包文件中的部分文件<ul>
<li>mysql-community-client-8.0.25-1.el7.x86_64.rpm</li>
<li>mysql-community-client-plugins-8.0.25-1.el7.x86_64.rpm</li>
<li>mysql-community-common-8.0.25-1.el7.x86_64.rpm</li>
<li>mysql-community-libs-8.0.25-1.el7.x86_64.rpm</li>
<li>mysql-community-server-8.0.25-1.el7.x86_64.rpm</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
        <category>Advanced</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL服务卸载</title>
    <url>/GSSBlog/2023/10/30/1.1.Linux%E4%B8%8B%E5%8D%B8%E8%BD%BDMySQL%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="查看是否安装过MySQL"><a href="#查看是否安装过MySQL" class="headerlink" title="查看是否安装过MySQL"></a>查看是否安装过MySQL</h2><ul>
<li><p>如果是用rpm安装,检查一下 <code>rpm package</code></p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep -i mysql <span class="comment"># -i 忽略大小写</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>检查mysql service</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl status mysqld.service <span class="comment"># 检查mysql服务状态</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="MySQL卸载"><a href="#MySQL卸载" class="headerlink" title="MySQL卸载"></a>MySQL卸载</h2><ul>
<li><p>关闭MySQL服务</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl stop mysql.service</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>检查当前MySQL安装状况</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep -i mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"></span><br><span class="line">yum list installed | grep mysql</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>卸载上述命令查询出的已安装的程序</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">yum remove mysql--xxx</span><br><span class="line"><span class="comment"># 务必卸载干净,反复执行 &#x27;npm -qa | grep -i mysql&#x27;确实是否有卸载残留 </span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>卸载mysql相关文件</p>
<ul>
<li><p>查找相关文件</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">find / -name mysql</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>删除上述命令查询出的相关文件</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf xxx</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
<li><p>删除 my.cnf</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># my.cnf 文件就是 windows下的 my.ini 配置文件</span></span><br><span class="line"><span class="comment"># 存放在 /etc/my.cnf</span></span><br><span class="line"><span class="built_in">rm</span> -rf /etc/my.cnf</span><br></pre></td></tr></table></figure></div></li>
</ul>
<p>至此卸载完成!!! 可以重新再次安装MySQL服务</p>
]]></content>
      <categories>
        <category>MySQL</category>
        <category>Advanced</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL服务安装</title>
    <url>/GSSBlog/2023/10/30/1.2.Linux%E4%B8%8B%E5%AE%89%E8%A3%85MySQL%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="安装前检查MySQL依赖"><a href="#安装前检查MySQL依赖" class="headerlink" title="安装前检查MySQL依赖"></a>安装前检查MySQL依赖</h2><h3 id="检查-tmp临时目录权限（必不可少）"><a href="#检查-tmp临时目录权限（必不可少）" class="headerlink" title="检查&#x2F;tmp临时目录权限（必不可少）"></a>检查&#x2F;tmp临时目录权限（必不可少）</h3><blockquote>
<p>由于mysql安装过程中，会通过mysql用户在&#x2F;tmp目录下新建tmp_db文件，所以请给&#x2F;tmp较大的权限。 </p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 执行命令,授予权限</span></span><br><span class="line"><span class="built_in">chmod</span> -R 777 /tmp</span><br></pre></td></tr></table></figure></div>

<h3 id="检查依赖"><a href="#检查依赖" class="headerlink" title="检查依赖"></a>检查依赖</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 检查依赖</span></span><br><span class="line">rpm -qa | grep libaio</span><br><span class="line"></span><br><span class="line">rpm -qa | grep net-tools</span><br><span class="line"></span><br><span class="line"><span class="comment">## 如果不存在需要到CentOS中进行rpm安装</span></span><br></pre></td></tr></table></figure></div>







<h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><blockquote>
<h2 id="将之前下载好的文件-上传到-opt-mysql80文件夹下"><a href="#将之前下载好的文件-上传到-opt-mysql80文件夹下" class="headerlink" title="将之前下载好的文件,上传到 /opt/mysql80文件夹下"></a>将之前下载好的文件,上传到 <code>/opt/mysql80</code>文件夹下</h2></blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 执行安装命令</span></span><br><span class="line"><span class="comment">## 注意: 必须按照我下列文件顺序执行安装</span></span><br><span class="line"></span><br><span class="line">rpm-ivh mysql-community-common-8.0.25-1.el7.x86_64.rpm</span><br><span class="line">rpm-ivh mysql-community-client-plugins-8.0.25-1.el7.x86_64.rpm </span><br><span class="line">rpm-ivh mysql-community-libs-8.0.25-1.el7.x86_64.rpm</span><br><span class="line">rpm-ivh mysql-community-client-8.0.25-1.el7.x86_64.rpm</span><br><span class="line">rpm-ivh mysql-community-server-8.0.25-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>rpm</code>是 Redhat Package Manage缩写,通过rpm的管理,用户可以把源代码包装成以rpm为扩展名的文件形式,易于安装</li>
<li><code>-i</code> –instll安装软件包</li>
<li><code>-v</code> –verbose提供更多的详细信息输出</li>
<li><code>-h</code> –hash 软件包安装的时候列出哈希标记(和-v一起使用效果更好),展示进度条</li>
</ul>
<h1 id="注意-安装中可能会报错"><a href="#注意-安装中可能会报错" class="headerlink" title="注意: 安装中可能会报错"></a>注意: 安装中可能会报错</h1><ul>
<li><h2 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h2></li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 报错信息</span></span><br><span class="line">mariadb-libs被 mysql-community-libs-8.0.25-1.e17.X86_64 取代</span><br><span class="line"></span><br><span class="line"><span class="comment">## 解决方案</span></span><br><span class="line">yum remove mysql-libs <span class="comment"># 清除之前安装过得依赖</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><h2 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h2></li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 报错信息</span></span><br><span class="line">mysql-community-client(x86-64) &gt;= 5.7.9 被 mysql-community-server-5.7.30-1.e17.x86_64 需要</span><br><span class="line"></span><br><span class="line"><span class="comment">## 解决方案</span></span><br><span class="line"><span class="comment">#在安装指令末尾加上 --nodeps --force ，即安装时不检查依赖关系</span></span><br><span class="line">rpm -ivh mysql-community-client-5.7.30-1.el7.x86_64.rpm --nodeps --force</span><br></pre></td></tr></table></figure></div>

<ul>
<li><h2 id="案例三"><a href="#案例三" class="headerlink" title="案例三"></a>案例三</h2></li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server mysql-5.7.22]<span class="comment"># rpm -ivh mysql-community-server-5.7.22-1.el7.x86_64.rpm </span></span><br><span class="line">警告：mysql-community-server-5.7.22-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY</span><br><span class="line">错误：依赖检测失败：</span><br><span class="line">	/usr/bin/perl 被 mysql-community-server-5.7.22-1.el7.x86_64 需要</span><br><span class="line">	net-tools 被 mysql-community-server-5.7.22-1.el7.x86_64 需要</span><br><span class="line">	perl(Getopt::Long) 被 mysql-community-server-5.7.22-1.el7.x86_64 需要</span><br><span class="line">	perl(strict) 被 mysql-community-server-5.7.22-1.el7.x86_64 需要</span><br><span class="line"></span><br><span class="line"><span class="comment">###根据以上内容显示：perl、net-tools 被需要！个人感觉缺少组件，尝试用 yum install 了一下：</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># yum -y install perl.x86_64</span></span><br><span class="line"><span class="comment"># yum -y install net-tools.x86_64</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><h2 id="案例四"><a href="#案例四" class="headerlink" title="案例四"></a>案例四</h2></li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 如果是 MySQL8 版本，连接时还会出现如下问题：</span></span><br><span class="line"><span class="comment">#### 配置新连接报错：错误号码 2058，分析是 mysql 密码加密方法变了。</span></span><br><span class="line"><span class="comment">##### 解决方法：Linux下 mysql -u root -p 登录你的 mysql 数据库，然后 执行这条SQL：</span></span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;你的密码&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">### 然后就可以连接工具了</span></span><br></pre></td></tr></table></figure></div>



<h3 id="查看MySQL版本"><a href="#查看MySQL版本" class="headerlink" title="查看MySQL版本"></a>查看MySQL版本</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 执行如下命令，如果成功表示安装mysql成功。类似java-version如果打出版本等信息</span></span><br><span class="line">mysql --version</span><br><span class="line">或</span><br><span class="line">mysqladmin	--version</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 检查安装包</span></span><br><span class="line">rpm-qa|grep-imysql</span><br></pre></td></tr></table></figure></div>

<h3 id="服务初始化"><a href="#服务初始化" class="headerlink" title="服务初始化"></a>服务初始化</h3><blockquote>
<p>为了保证数据库目录与文件的所有者为mysql登录用户，如果你是以root身份运行mysql服务，需要执行下面的命令初始化：</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">mysqld --initialize --user=mysql</span><br><span class="line"><span class="comment">## 说明：--initialize选项默认以“安全”模式来初始化，则会为root用户生成一个密码并将该密码标记为已过期,登录后需要重新设置一个新的密码,生成的临时密码会往日志中记录一份</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 查看密码</span></span><br><span class="line"><span class="built_in">cat</span> /var/log/mysqld.log</span><br><span class="line"></span><br><span class="line"><span class="comment">### A temporary password is generated for root@localhost: ;hT!hHgWd52&gt;</span></span><br><span class="line"><span class="comment">### 这个  &#x27;;hT!hHgWd52&gt;&#x27;   就是临时密码</span></span><br></pre></td></tr></table></figure></div>

<h3 id="服务启动"><a href="#服务启动" class="headerlink" title="服务启动"></a>服务启动</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加不加.service后缀都可以</span></span><br><span class="line">启动：systemctl start mysqld.service</span><br><span class="line">关闭：systemctl stop mysqld.service</span><br><span class="line">重启：systemctl restar tmysqld.service</span><br><span class="line">查看状态：systemctl status mysqld.service</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 查看服务进程</span></span><br><span class="line">ps -ef | grep -i mysql</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 查看MySQL服务是否自启动</span></span><br><span class="line">systemctl list-unit-files |grep mysqld.service</span><br><span class="line"></span><br><span class="line"><span class="comment">### 默认是enabled</span></span><br><span class="line"><span class="comment">#### 如果不是enabled可以运行如下命令设置自启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> mysqld.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 如果希望不进行自启动，运行如下命令设置</span></span><br><span class="line">systemctldisablemysqld.service</span><br></pre></td></tr></table></figure></div>

<h3 id="MySQL登录"><a href="#MySQL登录" class="headerlink" title="MySQL登录"></a>MySQL登录</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p <span class="string">&#x27;密码&#x27;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 修改密码</span></span><br><span class="line"><span class="comment">#### 因为初始化密码默认是过期的，所以查看数据库会报错</span></span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;你的新密码&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">##### 5.7版本之后（不含5.7），mysql加入了全新的密码安全机制。设置新密码太简单会报错。</span></span><br></pre></td></tr></table></figure></div>

<h3 id="设置远程登录"><a href="#设置远程登录" class="headerlink" title="设置远程登录"></a>设置远程登录</h3><blockquote>
<p>出现的问题 :</p>
<p>在用SQLyog或Navicat中配置远程连接Mysql数据库时遇到如下报错信息，这是由于Mysql配置了不支持远程连接引起的。</p>
</blockquote>
<ul>
<li><p>步骤一</p>
<ul>
<li><code>物理机 ping 虚拟机 ip</code><ul>
<li><code>ping 192.168.23.112</code></li>
</ul>
</li>
<li><code>物理机 telnet 虚拟机 ip 端口号</code><ul>
<li><code>开启telnet</code></li>
<li><code>控制面板</code>—&gt;<code>所有控制面板项</code>—-&gt;<code>程序和功能</code>—-&gt;<code>启用或关闭Windows功能</code>—-&gt;<code>找到 Telnet客户端</code>—&gt;<code>开启 Telnet客户端</code></li>
<li><code>telnet 192.168.23.112 3306</code></li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 如果物理机ping不同,解决网路问题</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 如果telnet不同,解决端口问题</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>步骤二</p>
<ul>
<li>检查防火墙</li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 防火墙基础命令</span></span><br><span class="line"><span class="comment">### firewalld.service后缀 .service可不加</span></span><br><span class="line">systemctl start firewalld.service <span class="comment"># 开启防火墙</span></span><br><span class="line">systemctl stop firewalld.service <span class="comment"># 关闭防火墙</span></span><br><span class="line">systemctl status firewalld.service <span class="comment"># 查看防火墙状态</span></span><br><span class="line">systemctl <span class="built_in">enable</span> firewalld.service <span class="comment"># 设置开机启动防火墙</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service <span class="comment"># 设置开机禁用防火墙</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 如果提示: Unit firewalld.service could not be found .说明没有安装防火墙,需要安装</span></span><br><span class="line">yum install firewalld firewall-config</span><br><span class="line"></span><br><span class="line"><span class="comment">##### 注意: centos7下默认的防火墙是firewall,替代了之前的iptables,firewall有图形化管理界面和命令行管理两种方式.</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>添加放行端口</li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 添加3306端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line"></span><br><span class="line"><span class="comment">## 刷新防火墙</span></span><br><span class="line"><span class="comment">### 一定要刷新,否则不生效</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看firewall状态</span></span><br><span class="line">firewall-cmd --state</span><br></pre></td></tr></table></figure></div>

<ul>
<li>附加指令</li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 查看防火墙放行规则</span></span><br><span class="line">firewall-cmd --list-all</span><br><span class="line"></span><br><span class="line"><span class="comment">## 添加放行服务</span></span><br><span class="line">firewall-cmd --zone=public --add-service=http --permanent</span><br><span class="line"></span><br><span class="line"><span class="comment">## 列出支持的zone</span></span><br><span class="line">firewall-cmd --get-zone</span><br><span class="line"></span><br><span class="line"><span class="comment">## 列出支持的服务,在列表中放行的</span></span><br><span class="line">firewall-cmd --get-services</span><br><span class="line"></span><br><span class="line"><span class="comment">## 移除放行的端口</span></span><br><span class="line">firewall-cmd --remove-port=80/tcp --permanent</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看已经放行的端口</span></span><br><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>步骤三</p>
<ul>
<li>在linux系统下修改用户主机信息</li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询当前用户的信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span>, host <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改当前用户host</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span> <span class="keyword">SET</span> host <span class="operator">=</span> <span class="string">&#x27;%&#x27;</span> <span class="keyword">WHERE</span> <span class="keyword">user</span> <span class="operator">=</span> <span class="string">&#x27;root&#x27;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>修改后执行<code>flush privileges</code>使配置立即生效</li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>此时到此基本上已经可以,但是</p>
</li>
<li><p>如果是MySQL5.7版本,可以直接使用SQLyog或者Navicat成功连接MySQL服务了</p>
</li>
<li><p>如果是MySQL8.0版本,会因为密码的加密规则调整,致使连接失败</p>
<ul>
<li><p>错误信息如下</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">错误号码2058</span><br><span class="line">Plugin caching_sha0_password could net be loaded: <span class="string">&#x27;乱码&#x27;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>分析: mysql密码加密方法变了</p>
</li>
<li><p>解决办法</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 在linux下登录mysql服务,执行以下sql语句</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;root&#x27;</span>;</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
<li><p>至此完成远程登录设置</p>
</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
        <category>Advanced</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL字符集配置</title>
    <url>/GSSBlog/2023/10/30/1.3.MySQL%E5%AD%97%E7%AC%A6%E9%9B%86%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="修改MySQL5-7字符集"><a href="#修改MySQL5-7字符集" class="headerlink" title="修改MySQL5.7字符集"></a>修改MySQL5.7字符集</h2><blockquote>
<p>在MySQL 8.0版本之前，默认字符集为 latin1 ，utf8字符集指向的是 utf8mb3 。网站开发人员在数据库 </p>
<p>设计的时候往往会将编码修改为utf8字符集。如果遗忘修改默认的编码，就会出现乱码的问题。从MySQL </p>
<p>8.0开始，数据库的默认编码将改为 utf8mb4 ，从而避免上述乱码的问题。</p>
</blockquote>
<ul>
<li><p>查看默认使用的字符集</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%character%&#x27;</span>;</span><br><span class="line">或</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%char%&#x27;</span>;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>重要的关注返回的数据</p>
<p><code>character_set_server</code></p>
<p><code>character_set_database</code></p>
</blockquote>
</li>
</ul>
<p>如果使用默认5.7的latin1字符集,保存中文的时候会报错</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看数据库的创建</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE <span class="string">&#x27;数据库名&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看数据表的创建</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">&#x27;数据表名&#x27;</span>;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>修改默认字符集</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/my.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment">## 在MySQL5.7或之前版本中,在文件中加上中文字符集的设置</span></span><br><span class="line">character_set_server=utf8</span><br><span class="line"></span><br><span class="line"><span class="comment">### 注意:</span></span><br><span class="line"><span class="comment">#### 添加配置项在[mysqld]之后</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##### 修改后重启数据库服务</span></span><br><span class="line">systemctl restart mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment">###### 注意: 修改字符集后,新创建的数据库,数据表会生效;但是原来的数据库,数据表不会发生变化</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="已有库-表字符集变更"><a href="#已有库-表字符集变更" class="headerlink" title="已有库&amp;表字符集变更"></a>已有库&amp;表字符集变更</h2><blockquote>
<p>MySQL5.7版本中,之前创建的库,表字符集还是latin1</p>
<p>需要对数据库,数据表进行修改</p>
</blockquote>
<ul>
<li><p>修改已创建数据库的字符集</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE <span class="string">&#x27;数据库名&#x27;</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="string">&#x27;utf8&#x27;</span>;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>修改已创建数据表的字符集</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">&#x27;数据表名&#x27;</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="string">&#x27;utf8&#x27;</span>;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<blockquote>
<p>注意: 原有的数据如果是用非 ‘utf8’ 编码的话,数据本身编码不会发生变化;已有数据需要导出或者删除,然后重新插入.</p>
</blockquote>
<h2 id="各级别的字符集"><a href="#各级别的字符集" class="headerlink" title="各级别的字符集"></a>各级别的字符集</h2><blockquote>
<p>MySQL有四个级别的字符集和比较规则</p>
</blockquote>
<ul>
<li>服务器级别</li>
<li>数据库级别</li>
<li>表级别</li>
<li>列级别</li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看数据库字符集</span></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span><span class="string">&#x27;%character%&#x27;</span>;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>character_set_server: 服务器级别的字符集</li>
<li>character_set_database: 当前数据库的字符集</li>
<li>character_set_client: 服务器解码请求时使用的字符集</li>
<li>character_set_connection: 服务器处理请求时会把请求字符串从character_set_client转为character_set_connection</li>
<li>character_set_results: 服务器向客户端返回数据时使用的字符集</li>
</ul>
<h3 id="服务器级别的字符集"><a href="#服务器级别的字符集" class="headerlink" title="服务器级别的字符集"></a>服务器级别的字符集</h3><blockquote>
<p>我们可以在启动服务器程序时通过启动选项或者在服务器运行过程中使用<code>set</code>语句修改</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">[server]</span><br><span class="line">character_set_server= gbk <span class="comment"># 默认字符集</span></span><br><span class="line">collation_server= gbk_chinese_ci <span class="comment"># 对应的默认的比较规则</span></span><br></pre></td></tr></table></figure></div>

<p>当服务器启动的时候读取到这个配置文件后这两个系统变量的值便修改了</p>
<h3 id="数据库级别的字符集"><a href="#数据库级别的字符集" class="headerlink" title="数据库级别的字符集"></a>数据库级别的字符集</h3><blockquote>
<p>在创建和修改数据库的时候,可以指定该数据库的字符集和比较规则</p>
</blockquote>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 举例</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE 数据库名</span><br><span class="line">	[[<span class="keyword">DEFAULT</span>] <span class="type">CHARACTER</span> <span class="keyword">SET</span> 字符集名称]</span><br><span class="line">	[[<span class="keyword">DEFAULT</span>] <span class="keyword">COLLATE</span> 比较规则名称];</span><br><span class="line">	</span><br><span class="line"><span class="keyword">ALTER</span> DATABASE 数据库名</span><br><span class="line">	[[<span class="keyword">DEFAULT</span>] <span class="type">CHARACTER</span> <span class="keyword">SET</span> 字符集名称]</span><br><span class="line">	[[<span class="keyword">DEFAULT</span>] <span class="keyword">COLLATE</span> 比较规则名称];</span><br></pre></td></tr></table></figure></div>

<h3 id="表级别的字符集"><a href="#表级别的字符集" class="headerlink" title="表级别的字符集"></a>表级别的字符集</h3><blockquote>
<p>也可以在创建和修改表的时候指定数据表的字符集和比较规则</p>
</blockquote>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 举例</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名称 (列的信息)</span><br><span class="line">	[[<span class="keyword">DEFAULT</span>] <span class="type">CHARACTER</span> <span class="keyword">SET</span> 字符集名称]</span><br><span class="line">	[<span class="keyword">COLLATE</span> 比较规则名称];</span><br><span class="line">	</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称</span><br><span class="line">	[[DEFALUT] <span class="type">CHARACTER</span> <span class="keyword">SET</span> 字符集名称]</span><br><span class="line">	[<span class="keyword">COLLATE</span> 比较规则名称]</span><br></pre></td></tr></table></figure></div>

<blockquote>
<h3 id="如果创建和修改表的语句汇总没有指明字符集的比较规则-将使用该表所在数据库的字符集和比较规则作为该表的字符集和比较规则"><a href="#如果创建和修改表的语句汇总没有指明字符集的比较规则-将使用该表所在数据库的字符集和比较规则作为该表的字符集和比较规则" class="headerlink" title="如果创建和修改表的语句汇总没有指明字符集的比较规则,将使用该表所在数据库的字符集和比较规则作为该表的字符集和比较规则"></a>如果创建和修改表的语句汇总没有指明字符集的比较规则,将使用该表所在数据库的字符集和比较规则作为该表的字符集和比较规则</h3></blockquote>
<h3 id="列级别的字符集"><a href="#列级别的字符集" class="headerlink" title="列级别的字符集"></a>列级别的字符集</h3><blockquote>
<p>对于存储字符串的列,用一个表中的不同列也可以有不同的字符集和比较规则.在创建和修改列定义的时候可以指定该列的字符集和比较规则</p>
</blockquote>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">	列名 数据类型 [<span class="type">CHARACTER</span> <span class="keyword">SET</span> 字符集名称] [<span class="keyword">COLLATE</span> 比较规则名称],</span><br><span class="line">    其他列 ...</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY 列名 数据类型 [<span class="type">CHARACTER</span> <span class="keyword">SET</span> 字符集名称] [<span class="keyword">COLLATE</span> 比较规则名称];</span><br></pre></td></tr></table></figure></div>

<blockquote>
<h3 id="对于某个列来说-如果在创建和修改的语句中没有指定字符集和比较规则-将使用该列所在表的字符集和比较规则作为该列的字符集和比较规则"><a href="#对于某个列来说-如果在创建和修改的语句中没有指定字符集和比较规则-将使用该列所在表的字符集和比较规则作为该列的字符集和比较规则" class="headerlink" title="对于某个列来说,如果在创建和修改的语句中没有指定字符集和比较规则,将使用该列所在表的字符集和比较规则作为该列的字符集和比较规则"></a>对于某个列来说,如果在创建和修改的语句中没有指定字符集和比较规则,将使用该列所在表的字符集和比较规则作为该列的字符集和比较规则</h3></blockquote>
<ul>
<li><h2 id="注意-在转换列的字符集时候-需要注意-如果转换前列中存储的数据不能用转换后的字符集进行表示会发生错误-例如-之前列使用的字符集是utf8-列中存储了一些文字-现在要把列转换成ASCII-就会报错-因为ASCII字符集并不能表示汉字字符"><a href="#注意-在转换列的字符集时候-需要注意-如果转换前列中存储的数据不能用转换后的字符集进行表示会发生错误-例如-之前列使用的字符集是utf8-列中存储了一些文字-现在要把列转换成ASCII-就会报错-因为ASCII字符集并不能表示汉字字符" class="headerlink" title="注意: 在转换列的字符集时候,需要注意,如果转换前列中存储的数据不能用转换后的字符集进行表示会发生错误.例如;之前列使用的字符集是utf8,列中存储了一些文字,现在要把列转换成ASCII,就会报错,因为ASCII字符集并不能表示汉字字符"></a>注意: 在转换列的字符集时候,需要注意,如果转换前列中存储的数据不能用转换后的字符集进行表示会发生错误.例如;之前列使用的字符集是utf8,列中存储了一些文字,现在要把列转换成ASCII,就会报错,因为ASCII字符集并不能表示汉字字符</h2></li>
</ul>
<blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><ul>
<li>如果<code>创建或者修改列</code>时候,没有显式的指定字符集和比较规则,则该列<code>默认用表的</code>字符集和比较规则</li>
<li>如果<code>创建表</code>时没有显式的指定字符集和比较规则,则该表<code>默认用数据库的</code>字符集和比较规则</li>
<li>如果<code>创建数据库</code>时没有显式的指定字符集和比较规则,该数据库<code>默认用服务器的</code>字符集和比较规则</li>
</ul>
</blockquote>
<h2 id="SQL大小写规范"><a href="#SQL大小写规范" class="headerlink" title="SQL大小写规范"></a>SQL大小写规范</h2><blockquote>
<p>在不同环境下,规则不一样;<code>windows系统默认大小写不敏感</code>但是<code>linux系统是大小写敏感的</code></p>
<p>可以通过<code>lower_case_table_names</code>命令查看</p>
</blockquote>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%lower_case_table_names%&#x27;</span>;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>lower_case_table_names 参数值设置<ul>
<li><code>默认是0,大小写敏感</code></li>
<li>设置成1,大小写不敏感</li>
</ul>
</li>
</ul>
<blockquote>
<h4 id="当想要设置大小写不敏感时-要在my-cnf这个配置文件-mysqld-中加入lower-case-table-names-1配置项-然后重启服务器"><a href="#当想要设置大小写不敏感时-要在my-cnf这个配置文件-mysqld-中加入lower-case-table-names-1配置项-然后重启服务器" class="headerlink" title="当想要设置大小写不敏感时,要在my.cnf这个配置文件[mysqld]中加入lower_case_table_names=1配置项,然后重启服务器"></a>当想要设置大小写不敏感时,要在<code>my.cnf</code>这个配置文件<code>[mysqld]</code>中加入<code>lower_case_table_names=1</code>配置项,然后重启服务器</h4></blockquote>
<ul>
<li>但是要在重启数据库实例之前就需要将原来的数据库和表转换为小写,否则将找不到数据库名</li>
<li>此参数适用于MySQL5.7,在MySQL8.0下禁止在重启MySQL服务时将<code>lower_case_table_names</code>设置成不同于初始化MySQL服务时设置的<code>lower_case_table_names</code>值.如果非要将MySQL设置为大小写不敏感的,具体操作如下<ul>
<li>1 停止MySQL服务</li>
<li>2 删除数据目录, 即删除<code>/var/lib/mysql</code>目录</li>
<li>3 在MySQL配置文件<code>(/etc/my.cnf)</code>中添加<code>lower_case_table_names=1</code></li>
<li>4 启动MySQL服务</li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## MySQL在linux下数据库名,表名,列名,别名大小写规则是这样的</span></span><br><span class="line"><span class="comment">### 数据库名, 表名, 表的别名, 列的别名是严格区分大小写的</span></span><br><span class="line"><span class="comment">### 关键字, 函数名称在sql中不区分大小写</span></span><br><span class="line"><span class="comment">### 列名(或字段名)与列的别名(或字段别名)在所有的情况下均是忽略</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 命名规范建议</span></span><br><span class="line"><span class="comment">### 关键字和函数全部大写</span></span><br><span class="line"><span class="comment">### 数据库名,表名,表别名,字段名,字段别名全部小写</span></span><br><span class="line"><span class="comment">### sql语句必须以分号结束</span></span><br></pre></td></tr></table></figure></div>

<h2 id="sql-mode的合理设置"><a href="#sql-mode的合理设置" class="headerlink" title="sql_mode的合理设置"></a>sql_mode的合理设置</h2><h3 id="宽松模式-vs-严格模式"><a href="#宽松模式-vs-严格模式" class="headerlink" title="宽松模式 vs 严格模式"></a>宽松模式 vs 严格模式</h3><h4 id="宽松模式"><a href="#宽松模式" class="headerlink" title="宽松模式"></a>宽松模式</h4><blockquote>
<p>如果设置的是宽松模式,那么我们在插入数据的时候,即便是给了一个错误的数据,也可能会被接受,并且不报错</p>
</blockquote>
<h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><blockquote>
<p>在创建一个表时,该表中有一个字段为<code>name</code>,给<code>name</code>设置的字段类型时<code>char(10)</code>,如果我们在插入数据的时候,其中<code>name</code>这个字段对应的有一条数据的<code>长度超过了10</code>,例如<code>1234567890abc</code>,超过了设定的字段长度10,<code>那么不会报错,并且取前面10个字符存上</code>也就是说这个数据被存为<code>&#39;1234567890&#39;,而&#39;abc&#39;</code>就没有了,但是,我们给的这个数据是错的,因为超过了字段的长度,但是没有报错,并且mysql自行处理并接受了,这就是宽松模式的效果</p>
</blockquote>
<h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><blockquote>
<p>通过设置<code>sql_mode</code>为<code>宽松模式</code>,来保证大多数sql符合标准的sql语法,这样应用在不同数据库之前<code>迁移</code>时,则不需要对业务sql进行较大的修改</p>
</blockquote>
<h4 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h4><blockquote>
<p>出现上面宽松模式的错误,应该报错;所以MySQL5.7版本就将<code>sql_mode</code>默认值修改成了<code>严格模式</code>.所以在<code>生产等环境</code>中,我们必须采用的是<code>严格模式</code>,进而<code>开发,测试环境</code>的数据库也必须要设置,这样在开发测试阶段就可以发现问题,并且我们即使使用的是MySQL5.6,也应该自行将其修改为严格模式</p>
</blockquote>
<h5 id="开发经验"><a href="#开发经验" class="headerlink" title="开发经验"></a>开发经验</h5><blockquote>
<p>MySQL等数据库总想把关于数据的所有操作都自己包揽下来,包括数据的校验,其实开发中,我们应该自己<code>开发的项目程序级别将这些校验给做了</code>,虽然写项目的时候麻烦了一些步骤,但是这样做了之后,我们在数据库迁移或者项目迁移的时候,会方便很多</p>
</blockquote>
<ul>
<li><h3 id="改为严格模式可能会存在的问题"><a href="#改为严格模式可能会存在的问题" class="headerlink" title="改为严格模式可能会存在的问题"></a>改为严格模式可能会存在的问题</h3><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 若设置模式中包含了 NO_ZORE_DATE ,那么MySQL数据库不允许插入零日期,插入零日期会抛出错误而不是警告</span></span><br><span class="line"><span class="comment">-- 例如, 表中含字段 timestamp 列(如果未声明为null或者显示default子句)将自动分配 DEFAULT &#x27;0000-00-00 00:00:00&#x27; (零时间戳), 这显然是不满足 sql_mode 中 NO_ZERO_DATE 而报错</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="宽松模式例子"><a href="#宽松模式例子" class="headerlink" title="宽松模式例子"></a>宽松模式例子</h3><h4 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees <span class="keyword">group</span> <span class="keyword">by</span> department_id limit <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> sql_mode <span class="operator">=</span> ONLY_FULL_GROUP_BY;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees <span class="keyword">group</span> <span class="keyword">by</span> department_id limit <span class="number">10</span>; <span class="comment">-- 执行报错</span></span><br></pre></td></tr></table></figure></div>

<h4 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看表的结构</span></span><br><span class="line"><span class="keyword">desc</span> test1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置sql_mode</span></span><br><span class="line"><span class="keyword">set</span> sql_mode <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 故意将 int 字段插入 文字</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test1 (t_name, t_age)</span><br><span class="line"><span class="keyword">values</span>(<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入成功,查看警告</span></span><br><span class="line"><span class="keyword">show</span> warnings; <span class="comment">-- Incorrect integer value: &#x27;aaa&#x27; for column &#x27;age&#x27; at row 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看记录</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test1; <span class="comment">-- &quot;name = tom; age = 0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置sql_mode模式为 STRICT_TRANS_TABLES ,然后插入数据</span></span><br><span class="line"><span class="keyword">set</span> sql_mode <span class="operator">=</span> <span class="string">&#x27;STRICT_TRANS_TABLES&#x27;</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test1 <span class="keyword">values</span> (<span class="string">&#x27;jerry&#x27;</span>,<span class="string">&#x27;bbb&#x27;</span>); <span class="comment">-- 执行报错: ERROR 1366(HY000): Incorrect integer value ;&#x27;bbb&#x27; for column &#x27;age&#x27; at row 1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="模式查看和设置"><a href="#模式查看和设置" class="headerlink" title="模式查看和设置"></a>模式查看和设置</h3><ul>
<li><p>查看当前的<code>sql_mode</code></p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 全局</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@global</span>.sql_mode;</span><br><span class="line"><span class="comment">-- 会话</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@session</span>.sql_model;</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;sql_mode&#x27;</span>;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>临时设置: 设置当前窗口<code>sql_mode</code></p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 全局</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> sql_mode <span class="operator">=</span> <span class="string">&#x27;modes ...&#x27;</span>;</span><br><span class="line"><span class="comment">-- 当前会话</span></span><br><span class="line"><span class="keyword">SET</span> SESSION sql_mode <span class="operator">=</span> <span class="string">&#x27;modes ...&#x27;</span>;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>永久设置: 在<code>/etc/my.cnf</code>中配置<code>sql_mode</code></p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 在 my.cnf(windows系统文件叫 my.ini) 文件中新增配置</span></span><br><span class="line">[mysqld]</span><br><span class="line">sql_mode <span class="operator">=</span> ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 然后重启MySQL服务</span></span><br><span class="line"><span class="comment">-- 注意;在生产环境上是禁止重启MySQL服务的,所以采用 &quot;临时设置方式 + 永久设置方式&#x27; 来解决线上的问题;那么即使有天重启了MySQL服务,也会永久生效</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
        <category>Advanced</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot2基础入门</title>
    <url>/GSSBlog/2023/10/31/1.SpringBoot2%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="SpringBoot2入门"><a href="#SpringBoot2入门" class="headerlink" title="SpringBoot2入门"></a>SpringBoot2入门</h2><blockquote>
<p>系统配置要求</p>
<ul>
<li>JDK 8 +</li>
<li>Maven 3.3+</li>
<li>Idea 2019.+</li>
</ul>
</blockquote>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">## Maven配置</span><br><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line">## 配置Maven厂库,JDK编译版本</span><br></pre></td></tr></table></figure></div>

<h3 id="Ddmo-HelloWorld"><a href="#Ddmo-HelloWorld" class="headerlink" title="Ddmo-HelloWorld"></a>Ddmo-HelloWorld</h3><ul>
<li>引入依赖</li>
</ul>
<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## pom文件</span></span><br><span class="line">    <span class="string">&lt;groupId&gt;org.igsshan&lt;/groupId&gt;</span></span><br><span class="line">    <span class="string">&lt;artifactId&gt;springbootbasic&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="string">&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&lt;parent&gt;</span></span><br><span class="line">        <span class="string">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">        <span class="string">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span></span><br><span class="line">        <span class="string">&lt;version&gt;2.3.4.RELEASE&lt;/version&gt;</span></span><br><span class="line">    <span class="string">&lt;/parent&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&lt;properties&gt;</span></span><br><span class="line">        <span class="string">&lt;java.version&gt;8&lt;/java.version&gt;</span></span><br><span class="line">        <span class="string">&lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</span></span><br><span class="line">        <span class="string">&lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</span></span><br><span class="line">        <span class="string">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span></span><br><span class="line">    <span class="string">&lt;/properties&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&lt;dependencies&gt;</span></span><br><span class="line">        <span class="string">&lt;dependency&gt;</span></span><br><span class="line">            <span class="string">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">            <span class="string">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span></span><br><span class="line">        <span class="string">&lt;/dependency&gt;</span></span><br><span class="line">    <span class="string">&lt;/dependencies&gt;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>主程序</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main主程序</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(HelloWorldApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>业务层</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// controller</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHelloWorld</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello SpringBoot2!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>配置层</li>
</ul>
<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## application.yml</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>测试</li>
</ul>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">// 启动main方法</span><br><span class="line"></span><br><span class="line">// 请求路径</span><br><span class="line">http://localhost:8080/hello</span><br><span class="line"></span><br><span class="line">// 返回结果</span><br><span class="line">hello SpringBoot2!</span><br></pre></td></tr></table></figure></div>

<ul>
<li>简化部署</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>将项目打包成<code>jar</code>包,在服务器运行</p>
<p><code>jar -java path/hello.jar</code></p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 服务启动</span></span><br><span class="line"><span class="built_in">nohup</span> java -jar `<span class="built_in">pwd</span>`/app.jar &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 服务停机</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;current java pid is: `jps|grep app|awk -F &#x27; &#x27; &#x27;&#123;print <span class="variable">$1</span>&#125;&#x27;`&quot;</span></span><br><span class="line"><span class="built_in">kill</span> -9 `jps|grep app|awk -F <span class="string">&#x27; &#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>注意 :</p>
<p>使用<code>cmd</code>命令<code>springboot</code>,会出现启动失败的情况</p>
<p>可以修改配置,取消方法: &#96;右击cmd控制台窗口标题区区域打开[选项]取消勾选[快速编辑模式]</p>
</blockquote>
<h2 id="SpringBoot2自动配置"><a href="#SpringBoot2自动配置" class="headerlink" title="SpringBoot2自动配置"></a>SpringBoot2自动配置</h2><h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><ul>
<li>项目父项目依赖管理</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 依赖管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 他的父项目 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 几乎声明了所有开发中常用的依赖的版本号,自动版本仲裁机制 --&gt;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>父项目依赖控制</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.igsshan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springbootbasicparent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.complier.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.complier.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meven.complier.targer</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">meven.complier.targer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 版本仲裁 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-boot-dependencies.version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">spring-boot-dependencies.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 父工程管理 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot-dependencies.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>starter 场景启动器</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1. spring-boot-starter-* ; *就是某种场景启动器</span></span><br><span class="line"><span class="comment">比如: spring-boot-starter-web 就是web场景启动器</span></span><br><span class="line"><span class="comment">2. 只要引入starter,这个场景所需要的所有依赖都会自动引入</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 所有场景启动器的底层依赖都是 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>自动版本仲裁</li>
</ul>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">1. 引入依赖默认都可以不写版本号</span><br><span class="line">2. 引入非版本仲裁的jar,需要添加版本号</span><br><span class="line"></span><br><span class="line">## 如果要使用非版本（默认）的版本，则需要在自己的pom文件中使用properties标签配合上述官方pom文件中的版本控制格式进行修改</span><br></pre></td></tr></table></figure></div>

<ul>
<li>修改版本号</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">1、查看spring-boot-dependencies里面规定当前依赖的版本 用的 key。</span></span><br><span class="line"><span class="comment">2、在当前项目里面重写配置</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.43<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用maven就近原则修改仲裁依赖版本号 --&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h3><h4 id="1-自动配置"><a href="#1-自动配置" class="headerlink" title="1.自动配置"></a>1.自动配置</h4><ul>
<li><p>自动配置<code>tomcat</code></p>
<ul>
<li>引入<code>tomcat</code>依赖</li>
<li>配置tomcat配置</li>
</ul>
<blockquote>
<p>就可以完成<code>tomcat</code>的自动配置</p>
</blockquote>
</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 主启动类</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(HelloWorldApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. <span class="doctag">@SpringBootApplication</span>: SpringBoot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</span></span><br><span class="line"><span class="comment"> * 2. 主程序所在包及其下面的所有子包里面的组件都会被默认扫描进来</span></span><br><span class="line"><span class="comment"> * 3. 想要改变扫描路径，<span class="doctag">@SpringBootApplication</span>(scanBasePackages=&quot;com.igsshan&quot;)</span></span><br><span class="line"><span class="comment"> 	  或者 <span class="doctag">@ComponentScan</span> 指定扫描路径</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span> </span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.igsshan.springbootbasic&quot;)</span> <span class="comment">// 默认包扫描到@SpringBootApplication注解主启动类层级	</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意:</span></span><br><span class="line">想要改变扫描路径，不能直接将<span class="meta">@ComponentScan</span>和<span class="meta">@SpringBootApplication</span>一起使用，因为<span class="meta">@SpringBootApplication</span> 是由</span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>组成的，</span><br><span class="line">所以只能将 <span class="meta">@SpringBootApplication</span> 替换为</span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span> 这三个注解。</span><br></pre></td></tr></table></figure></div>

<ul>
<li>解析<code>@SpringBootApplication</code>注解</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @SpringBootConfiguration 注解</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span>: 标注在某个类上，表示这是一个SpringBoot的配置类；</span><br><span class="line">	<span class="meta">@Configuration</span>: 配置类上标注这个注解;</span><br><span class="line">		配置类也是容器中的一个组件;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @EnableAutoConfiguration 注解</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span>: 开启自动配置</span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span> 告诉SpringBoot开启自动配置功能；</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@EnableAutoConfiguration</span> 注解解析</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解析 <span class="doctag">@AutoConfigurationPackage</span></span></span><br><span class="line"><span class="comment"> * 1.1 自动配置包</span></span><br><span class="line"><span class="comment"> * 2.1 Spring的底层注解<span class="doctag">@Import</span>，给容器中导入一个组件；导入的组件由 AutoConfigurationPackages.Registrar.class 将主配置类（<span class="doctag">@SpringBootApplication</span>标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器；</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationPackages.Registrar.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解析 <span class="doctag">@Import</span>(AutoConfigurationImportSelector.class)</span></span><br><span class="line"><span class="comment"> * 1.1 给容器中导入组件</span></span><br><span class="line"><span class="comment"> * 1.2 AutoConfigurationImportSelector 组件导入选择器</span></span><br><span class="line"><span class="comment"> *	2.1 将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；</span></span><br><span class="line"><span class="comment"> *	2.2 会给容器中导入非常多的自动配置类（xxxAutoConfiguration);</span></span><br><span class="line"><span class="comment"> *		List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),</span></span><br><span class="line"><span class="comment">				getBeanClassLoader());</span></span><br><span class="line"><span class="comment">		protected Class&lt;?&gt; getSpringFactoriesLoaderFactoryClass() &#123;</span></span><br><span class="line"><span class="comment">		return EnableAutoConfiguration.class;</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>SpringBoot在启动的时候从类路径下的META-INF&#x2F;spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作</p>
</blockquote>
<h4 id="2-容器添加"><a href="#2-容器添加" class="headerlink" title="2.容器添加"></a>2.容器添加</h4><h5 id="2-1组件添加"><a href="#2-1组件添加" class="headerlink" title="2.1组件添加"></a>2.1组件添加</h5><h6 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a><strong>@Configuration</strong></h6><ul>
<li><p><code>Full</code>模式和<code>Lite</code>模式</p>
<ul>
<li><blockquote>
<p><a href="/GSSBlog/2023/11/15/Spring%E6%B3%A8%E5%85%A5Bean/index.html">full模式vslite模式详细说明</a></p>
</blockquote>
</li>
<li><p>使用</p>
<ul>
<li>配置类组件之间<code>无依赖关系</code>用<code>Lite</code>模式,加速容器启动过程,减少判断</li>
<li>配置类组件之间<code>有依赖关系</code>,方法会被调用得到之前单例组件,用<code>Full</code>模式</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">proxyBeanMethods: 代理bean的方法</span><br><span class="line">	1. Full(proxyBeanMethods = true),保证每个 @Bean 方法被调用多少次返回的组件都是单例的</span><br><span class="line">	2. Lite(proxyBeanMethods = false),每个 @Bean方法被调用多少次返回的组件都是新创建的</span><br></pre></td></tr></table></figure></div>



<h6 id="Bean-Component-Controller-Service-Repository"><a href="#Bean-Component-Controller-Service-Repository" class="headerlink" title="@Bean,@Component,@Controller,@Service,@Repository"></a><strong>@Bean</strong>,<strong>@Component</strong>,<strong>@Controller</strong>,<strong>@Service</strong>,<strong>@Repository</strong></h6><div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">根据它们的源码可以看到，</span><br><span class="line">@Controller、@Service、@Repository 其本质就是Component。</span><br><span class="line">它存在的本质只是给开发者看的，对Spring而言它们就都是Component。</span><br><span class="line">@Controller 控制层类，</span><br><span class="line">@Service 业务层类，</span><br><span class="line">@Repository 持久层类，</span><br><span class="line">@Component 无法归类到前3种时就称为组件。</span><br></pre></td></tr></table></figure></div>



<h6 id="ComponentScan-Import"><a href="#ComponentScan-Import" class="headerlink" title="@ComponentScan,@Import"></a><strong>@ComponentScan</strong>,<strong>@Import</strong></h6>]]></content>
      <categories>
        <category>SpringBoot2</category>
        <category>Basic</category>
      </categories>
      <tags>
        <tag>SpringBoot2</tag>
      </tags>
  </entry>
  <entry>
    <title>Stream基础使用</title>
    <url>/GSSBlog/2023/11/14/Stream%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p>在Java中，Stream是Java 8引入的一个新特性，用于处理集合数据的库。Stream API 提供了一种更便利、更高效的处理集合数据的方式，支持并行处理，可以大大简化代码。</p>
</blockquote>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="创建Stream"><a href="#创建Stream" class="headerlink" title="创建Stream"></a>创建Stream</h3><ul>
<li><p>通过集合创建</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; myList = Arrays.asList(<span class="string">&quot;a1&quot;</span>,<span class="string">&quot;a2&quot;</span>,<span class="string">&quot;a3&quot;</span>,<span class="string">&quot;a4&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; myStream = myList.stream();</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>通过数组创建</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="type">IntStream</span> <span class="variable">intStream</span> <span class="operator">=</span> Arrays.stream(numbers);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>通过<code>Stream.of()</code>创建</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stringStream = Stream.of(<span class="string">&quot;a1&quot;</span>,<span class="string">&quot;a2&quot;</span>,<span class="string">&quot;a3&quot;</span>,<span class="string">&quot;a4&quot;</span>);</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h3><ul>
<li><p><code>filter</code>: 过滤元素</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></div></li>
</ul>
]]></content>
      <categories>
        <category>Stream</category>
      </categories>
      <tags>
        <tag>Stream</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Bean Full vs Lite</title>
    <url>/GSSBlog/2023/11/15/Spring%E6%B3%A8%E5%85%A5Bean/</url>
    <content><![CDATA[<h2 id="Spring-Bean-的-Full-和-Lite模式"><a href="#Spring-Bean-的-Full-和-Lite模式" class="headerlink" title="Spring Bean 的 Full 和 Lite模式"></a>Spring Bean 的 Full 和 Lite模式</h2><blockquote>
<p>官网文献: <a class="link"   href="https://docs.spring.io/spring-framework/reference/core/beans/java/basic-concepts.html" >https://docs.spring.io/spring-framework/reference/core/beans/java/basic-concepts.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/GSSBlog/images/spring/springbeanfullvslitemode.png"
                     
                ></p>
<blockquote>
<p>Spring中都是bean,使用不同的注解标记,常见标记配置类bean的注解有</p>
<p><code>@Configuration</code>, <code>@Component</code>, <code>@ComponentScan</code>, <code>@Import</code>, <code>@ImportResource</code></p>
</blockquote>
<h2 id="Full-vs-Lite"><a href="#Full-vs-Lite" class="headerlink" title="Full vs Lite"></a>Full vs Lite</h2><blockquote>
<p>根据文档可以了解到</p>
<ul>
<li>在一个方法上标记<code>@Bean</code>注解,并将该方法的返回值暴漏给Spring容器,在这种场景下,<code>@Bean</code>注解实际上就是一种通用的工厂方法机制</li>
<li>当一个添加了<code>@Bean</code>注解的方法位于一个没有添加<code>@Configuration</code>注解的类里面时,那么这个添加了<code>@Bean</code>注解的方法在处理时就会按照<code>lite</code>模式来处理</li>
<li>当一个Bean被声明在添加了<code>@Component</code>注解的类中,那么会按照<code>lite</code>模式来处理</li>
<li>当一个Bean被声明在一个普通的类中时,会按照<code>lite</code>模式来处理</li>
<li>在<code>lite</code>模式下,<code>@Bean</code>注解标记的方法最终不会被<code>CGLIB</code>进行代理,就是一个普通的工厂方法.因此,在<code>@Bean</code>标记的方法中,不能调用其他<code>@Bean</code>注解标记的方法.如果有需要,<code>可以通过方法参数注入所需要的Bean</code></li>
<li>由于<code>lite</code>模式下并不会使用<code>CGLIB</code>,因此<code>@Bean</code>标记的方法可以是<code>final</code>类型的</li>
<li>在大多场景下,在一个<code>@Configuration</code>注解标记的类中,使用<code>@Bean</code>注解向 Spring 容器注册一个 Bean,都是<code>full</code>模式</li>
</ul>
</blockquote>
<p><strong>简单来说</strong></p>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">1. 类上标注有 @Component 注解 (@Service,@Controller注解上都有此方法)</span><br><span class="line">2. 类上标注有 @ComponentScan 注解</span><br><span class="line">3. 类上标注有 @Import 注解</span><br><span class="line">4. 类上标注有 @ImportResource 注解</span><br><span class="line">5. 若类上没有任何注解,但是类内方法存在 @Bean 注解</span><br><span class="line"></span><br><span class="line">以上,前提都是没有使用 @Configuration 注解;(在 Spring 5.2 之后,新增了 @Configuration 属性 proxyBeanMethods; 当 proxyBeanMethods(注意: 默认值为 TRUE) 值为 FLASE 时,也是属于 lite 模式的配置类 )</span><br><span class="line">上面列举的都可以称为配置类,属于 lite 模式的配置类</span><br></pre></td></tr></table></figure></div>

<h3 id="Full-模式"><a href="#Full-模式" class="headerlink" title="Full 模式"></a>Full 模式</h3><blockquote>
<p><code>full</code>模式, 在一个配置类上添加<code>@Configuration</code>注解,且不添加任何额外属性,就是<code>full</code>模式</p>
<p><code>full</code>模式最大的特点就是会给配置类通过<code>CGLIB</code>生成一个代理,所有被<code>@Bean</code>注解标记的方法都是通过代理方法进行调用</p>
</blockquote>
<p><strong>代码演示</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// =================== MyConfig配置类 ===================</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =================== 主启动类 ===================</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> SpringApplication.run(HelloWorldApplication.class, args);</span><br><span class="line">        <span class="type">MyConfig</span> <span class="variable">myConfig</span> <span class="operator">=</span> applicationContext.getBean(MyConfig.class);</span><br><span class="line">        System.out.println(myConfig);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试结果: 输出 myConfig</span></span><br><span class="line">com.igsshan.springbootbasic.configs.MyConfig$$EnhancerBySpringCGLIB$$3cc6a4ab@127d7908</span><br><span class="line"><span class="comment">// 可以看出,最终输入的 MyConfig 实例,并不是原始的 MyConfig 对象,而是一个被代理的 MyConfig 对象</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>为什么要代理呢?</li>
</ul>
<blockquote>
<p>看下面的案例,所实现的功能</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// =================== MyConfig配置类 ===================</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setPet(tomCat());</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Pet <span class="title function_">tomCat</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pet</span>(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =================== 主启动类 ===================</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> SpringApplication.run(HelloWorldApplication.class, args);</span><br><span class="line">        <span class="type">MyConfig</span> <span class="variable">myConfig</span> <span class="operator">=</span> applicationContext.getBean(MyConfig.class);</span><br><span class="line">        System.out.println(myConfig);</span><br><span class="line">		System.out.println(<span class="string">&quot;======================================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user01</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;user01&quot;</span>, User.class);</span><br><span class="line">        <span class="type">Pet</span> <span class="variable">tom</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;tom&quot;</span>, Pet.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户的宠物：&quot;</span> + (user01.getPet() == tom));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;======================================================&quot;</span>);</span><br><span class="line">        <span class="type">Pet</span> <span class="variable">tom01</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;tom&quot;</span>, Pet.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">Pet</span> <span class="variable">tom02</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;tom&quot;</span>, Pet.class);</span><br><span class="line">        System.out.println(tom01);</span><br><span class="line">        System.out.println(<span class="string">&quot;组件：&quot;</span> + (tom01 == tom02));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;======================================================&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> myConfig.user01();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> myConfig.user01();</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        System.out.println(<span class="string">&quot;配置类user01方法：&quot;</span> + (user == user1));</span><br><span class="line">        System.out.println(<span class="string">&quot;======================================================&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;测试时间: &quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试结果: </span></span><br><span class="line">com.igsshan.springbootbasic.configs.MyConfig$$EnhancerBySpringCGLIB$$676c133b@3249a1ce</span><br><span class="line">======================================================</span><br><span class="line">用户的宠物：<span class="literal">true</span></span><br><span class="line">======================================================</span><br><span class="line">com.igsshan.springbootbasic.model.Pet@4dd94a58</span><br><span class="line">组件：<span class="literal">true</span></span><br><span class="line">======================================================</span><br><span class="line">com.igsshan.springbootbasic.model.User@2f4919b0</span><br><span class="line">配置类user01方法：<span class="literal">true</span></span><br><span class="line">======================================================</span><br><span class="line">测试时间: <span class="number">1388</span></span><br></pre></td></tr></table></figure></div>

<p><strong>结论</strong></p>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">1. full 模式下,user中pet对象和tomCat方法注入注入到 Spring 容器中的对象是同一个</span><br><span class="line">2. full 模式下,user对象调用tomCat()方法的时候,调用的是一个代理对象;在这个代理对象的tomCat()方法中,会首先去检查 Spring 容器中是否存在 Pet 对象;如果存在,则直接用 Spring 容器中的pet对象,就不会真正执行tomCat()方法而获取一个新的Pet对象了;如果 Spring 容器中不存在 Pet对象,才会创建新的 Pet对象</span><br><span class="line">3. full 模式下,由于要给当前类生成代理,然后去代理 @Bean 注解标记的方法;因此,这些 @Bean 注解标记的方法不能是 final 或者 private 类型的,因为 final 或者 private 类型的方法无法被重写,也就没法生成代理对象,如果添加了 final 或者 private 修饰符,会抛出异常( org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: @Bean method &#x27;tomCat&#x27; must not be private or final; change the method&#x27;s modifiers to continue</span><br><span class="line">Offending resource: class path resource [com/igsshan/springbootbasic/configs/MyConfig.class] )</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h3 id="Lite-模式"><a href="#Lite-模式" class="headerlink" title="Lite 模式"></a>Lite 模式</h3><blockquote>
<p>如何开启 <code>lite</code>模式</p>
<p>除配置类上的 <code>@Configuration</code> 注解，或者去除之后添加 <code>@Component</code> 注解，或者使用<code>@ComponentScan</code>、<code>@ImportResource</code>、<code>@Import</code> 等注解标记类，那么最终都是 Lite 模式</p>
</blockquote>
<p><strong>代码演示</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// =================== MyConfig配置类 ===================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//@Configuration</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;小张&quot;</span>, <span class="number">19</span>);</span><br><span class="line">        <span class="comment">// user.setPet(tomCat());</span></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> User <span class="title function_">user01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;小张&quot;</span>, <span class="number">19</span>);</span><br><span class="line">        <span class="comment">// user.setPet(tomCat());</span></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;tom&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Pet <span class="title function_">tomCat</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pet</span>(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =================== 主启动类 ===================</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> SpringApplication.run(HelloWorldApplication.class, args);</span><br><span class="line">        <span class="type">MyConfig</span> <span class="variable">myConfig</span> <span class="operator">=</span> applicationContext.getBean(MyConfig.class);</span><br><span class="line">        System.out.println(myConfig);</span><br><span class="line">		System.out.println(<span class="string">&quot;======================================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user01</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;user01&quot;</span>, User.class);</span><br><span class="line">        <span class="type">Pet</span> <span class="variable">tom</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;tom&quot;</span>, Pet.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户的宠物：&quot;</span> + (user01.getPet() == tom));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;======================================================&quot;</span>);</span><br><span class="line">        <span class="type">Pet</span> <span class="variable">tom01</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;tom&quot;</span>, Pet.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">Pet</span> <span class="variable">tom02</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;tom&quot;</span>, Pet.class);</span><br><span class="line">        System.out.println(tom01);</span><br><span class="line">        System.out.println(<span class="string">&quot;组件：&quot;</span> + (tom01 == tom02));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;======================================================&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> myConfig.user01();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> myConfig.user01();</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        System.out.println(<span class="string">&quot;配置类user01方法：&quot;</span> + (user == user1));</span><br><span class="line">        System.out.println(<span class="string">&quot;======================================================&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;测试时间: &quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果: 输出 myConfig</span></span><br><span class="line">com.igsshan.springbootbasic.configs.MyConfig<span class="meta">@f6de586</span></span><br><span class="line">======================================================</span><br><span class="line">用户的宠物：<span class="literal">false</span></span><br><span class="line">======================================================</span><br><span class="line">com.igsshan.springbootbasic.model.Pet@5f2bd6d9</span><br><span class="line">组件：<span class="literal">true</span></span><br><span class="line">======================================================</span><br><span class="line">com.igsshan.springbootbasic.model.User@7c847072</span><br><span class="line">配置类user01方法：<span class="literal">false</span></span><br><span class="line">======================================================</span><br><span class="line">测试时间: <span class="number">1281</span></span><br></pre></td></tr></table></figure></div>

<p><strong>结论</strong></p>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">1. lite 模式下,配置类中的方法就是普通方法,可以是final类型,也可以是private</span><br><span class="line">2. lite 模式下,不需要通过 CGLIB 生成动态代理类,所以启动速度会快一些</span><br><span class="line">3. lite 模式下,一个 @Bean 方法调用另外一个 @Bean 方法,会导致同一个 Bean 被初始化两次</span><br></pre></td></tr></table></figure></div>



<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>full 模式</strong></p>
<div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">1. 配置类会被 CGLIB 增强(生成代理对象),放进 IOC 容器内的是代理</span><br><span class="line">2. 对于内部类是没有限制的: 可以是 full 模式或者 lite 模式</span><br><span class="line">3. 配置类内部可以通过方法调用来处理依赖,并且能够保证是同一个实例都指向 IOC 内的那个单例</span><br><span class="line">4. @Bean 方法不能被 private 或者 final 等进行修饰,因为代理类需要重写这个方法</span><br></pre></td></tr></table></figure></div>

<p><strong>lite 模式</strong></p>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">1. 配置类本身不会被 CGLIB 增强,放进 IOC 容器内的就是类本身</span><br><span class="line">2. 对于内部类是没有限制的: 可以是 full 模式或者 lite 模式</span><br><span class="line">3. 配置类内部不能通过方法调用来处理依赖,否则每次生成的都是一个新的实例并非 IOC 容器内的单例</span><br><span class="line">4. 配置类就是一个普通类,所以 @Bean 方法可以使用 private 或者 final 修饰</span><br></pre></td></tr></table></figure></div>



























]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
</search>
